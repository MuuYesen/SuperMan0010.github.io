<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022年终总结</title>
      <link href="/2022/12/28/2022-nian-zhong-zong-jie/"/>
      <url>/2022/12/28/2022-nian-zhong-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>纵观一年，有欢喜也有崩溃的时刻，但这些都成为了成长的养料。</p></blockquote><p>年初的时候，我正在申万宏源的量化项目里研究国债的因子挑选，做了将近半年的工作，工作内容大抵是复现相关的研报，并于小组内讨论结果，其中项目老师根据业务知识进行评价以及指导改进。</p><p>到了三月份，托着同学的介绍，很幸运地搬到学校附近，当时想着去图书馆方便些。同时，量化项目推进到了新的阶段，我们开始从国债的月级数据发展到了日级数据，并发起了国债期货的量化研究，对于期货我们主要是处理分钟级数据。对于我来说，月级、日级和分钟级的处理流程，总是让我有些乱得找不到头脑。</p><p>年初的时候，我还建了一个微信公众号，没有很大的愿景，当初单纯地只是想分享自己的笔记。后面还建了自己的公众号群，平时也没有什么消息，只是为了分享自己整理的仓库和方便讨论。</p><p>到了六月份，量化项目开始继续推进，策略的方向已经确定范围，现在需要一个策略实盘系统， 我和其它同事们便开始调研与搭建。不得不说，里面的坑真的很多。</p><p>也是在这段时期，我想起了赴日读博的念头。日本读博除了需要雅思托福外，还要求日语能力证书，但这对我并没有很大的障碍。我日语从大一便开始学习，并在大四得到了二级证书。这种抉择对我并不容易，因为从工作经历和研究方向来看，我显然更适合从事量化，相比而言，也会更容易些。</p><p>十一月底，我正式离开了第一家自己工作的公司，因为我要准备毕业的事情，里面的同事人很好，真的帮我了很多忙。混了两年，学业的东西倒是没有很大的提升，仍然处于混日子的地步。 </p><p>十二月初，于学校图书馆，得到了日本一家上市公司的内定书。</p><p>明天是要回家的，但好像出现了感染的症状，看样子进不了决赛圈了。</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>因果图工具包的介绍</title>
      <link href="/2022/11/17/yin-guo-tu-gong-ju-bao-de-jie-shao-yu-bi-jiao/"/>
      <url>/2022/11/17/yin-guo-tu-gong-ju-bao-de-jie-shao-yu-bi-jiao/</url>
      
        <content type="html"><![CDATA[<p>因果推断包含因果发现和因果推理，二者既相互分离又存在联系，就如同因果与机器学习。因果发现旨在探索变量之间是否存在因果关系，并以图的形式进行展示。</p><h4 id="1-PyCausalFS"><a href="#1-PyCausalFS" class="headerlink" title="1 PyCausalFS"></a>1 PyCausalFS</h4><p><strong>仓库地址：</strong><a href="https://github.com/kuiy/pyCausalFS" target="_blank" rel="noopener">https://github.com/kuiy/pyCausalFS</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>主攻马尔可夫边界发现，但同时提供基于此拓展的局部因果发现与全局因果发现的接口。</p><h4 id="2-causal-learn"><a href="#2-causal-learn" class="headerlink" title="2 causal-learn"></a>2 causal-learn</h4><p><strong>仓库地址：</strong><a href="https://github.com/cmu-phil/causal-learn" target="_blank" rel="noopener">https://github.com/cmu-phil/causal-learn</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>主要提供全局因果发现的接口，但包含了考虑真实场景的FCI算法。</p><h4 id="3-Tigramite"><a href="#3-Tigramite" class="headerlink" title="3 Tigramite"></a>3 Tigramite</h4><p><strong>仓库地址：</strong><a href="https://github.com/jakobrunge/tigramite" target="_blank" rel="noopener">https://github.com/jakobrunge/tigramite</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>专门为时间序列数据进行因果发现的工具包。</p><h4 id="4-gCastle"><a href="#4-gCastle" class="headerlink" title="4 gCastle"></a>4 gCastle</h4><p><strong>仓库地址：</strong><a href="https://github.com/huawei-noah/trustworthyAI/tree/master/gcastle" target="_blank" rel="noopener">https://github.com/huawei-noah/trustworthyAI/tree/master/gcastle</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>只提供全局因果发现接口，但方法更加多元，同时也给出了数据生成、方法评估的接口。</p><h4 id="5-CausalDiscoveryToolbox"><a href="#5-CausalDiscoveryToolbox" class="headerlink" title="5 CausalDiscoveryToolbox"></a>5 CausalDiscoveryToolbox</h4><p><strong>仓库地址：</strong><a href="https://github.com/FenTechSolutions/CausalDiscoveryToolbox" target="_blank" rel="noopener">https://github.com/FenTechSolutions/CausalDiscoveryToolbox</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>同时结合了多种因果发现和因果推理的算法，并将函数因果模型纳入。</p><h4 id="6-pcalg"><a href="#6-pcalg" class="headerlink" title="6 pcalg"></a>6 pcalg</h4><p><strong>仓库地址：</strong><a href="https://cran.r-project.org/web/packages/pcalg/index.html" target="_blank" rel="noopener">https://cran.r-project.org/web/packages/pcalg/index.html</a></p><p><strong>语言版本：</strong>R</p><p><strong>内容介绍：</strong>经典的工具包，集因果发现和因果推理于一身，提供因果发现方法（PC、FCI 和 LiNGAM）与通用后门准则推理。</p><h4 id="7-CausalExplorer"><a href="#7-CausalExplorer" class="headerlink" title="7 CausalExplorer"></a>7 CausalExplorer</h4><p><strong>仓库地址：</strong><a href="https://github.com/mensxmachina/CausalExplorer_1.5" target="_blank" rel="noopener">https://github.com/mensxmachina/CausalExplorer_1.5</a></p><p><strong>语言版本：</strong>Matlab</p><p><strong>内容介绍：</strong>专注于因果发现，提供马尔可夫边界发现和全局因果发现的接口。</p><h4 id="8-Causal-Learner"><a href="#8-Causal-Learner" class="headerlink" title="8 Causal-Learner"></a>8 Causal-Learner</h4><p><strong>仓库地址：</strong><a href="https://github.com/z-dragonl/Causal-Learner" target="_blank" rel="noopener">https://github.com/z-dragonl/Causal-Learner</a></p><p><strong>语言版本：</strong>Matlab</p><p><strong>内容介绍：</strong>是 CausalExplorer 的拓展版本，新增局部因果发现模块、数据生成模块和方法评估模块。</p><h4 id="9-causalnex"><a href="#9-causalnex" class="headerlink" title="9 causalnex"></a>9 causalnex</h4><p><strong>仓库地址：</strong><a href="https://github.com/quantumblacklabs/causalnex" target="_blank" rel="noopener">https://github.com/quantumblacklabs/causalnex</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>在Pearl体系中进行因果推断的工具包，即勾勒因果图并使用do算子完成效应推理。</p><h4 id="10-bnlearn"><a href="#10-bnlearn" class="headerlink" title="10 bnlearn"></a>10 bnlearn</h4><p><strong>仓库地址：</strong><a href="https://www.bnlearn.com/" target="_blank" rel="noopener">https://www.bnlearn.com/</a></p><p><strong>语言版本：</strong>R</p><p><strong>内容介绍：</strong>专注于贝叶斯网络结构学习，除了提供局部发现和全局发现外，也给出诸多实验数据集的下载和可视化。</p><h4 id="11-pgmpy"><a href="#11-pgmpy" class="headerlink" title="11 pgmpy"></a>11 pgmpy</h4><p><strong>仓库地址：</strong><a href="https://github.com/pgmpy/pgmpy" target="_blank" rel="noopener">https://github.com/pgmpy/pgmpy</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>贝叶斯网络必备工具包，虽然重点并不是因果推断，但也提供相关的衍生接口。</p><h4 id="12-YLearn"><a href="#12-YLearn" class="headerlink" title="12 YLearn"></a>12 YLearn</h4><p><strong>仓库地址：</strong><a href="https://github.com/DataCanvasIO/YLearn" target="_blank" rel="noopener">https://github.com/DataCanvasIO/YLearn</a></p><p><strong>语言版本：</strong>Python</p><p><strong>内容介绍：</strong>国内第一款商用的因果推断开源包，提供了完整的商业流程，但仓库出现时间尚短。</p>]]></content>
      
      
      <categories>
          
          <category> 因果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 因果图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pearl体系下的因果浅析</title>
      <link href="/2022/11/14/pearl-ti-xi-xia-de-yin-guo-qian-xi/"/>
      <url>/2022/11/14/pearl-ti-xi-xia-de-yin-guo-qian-xi/</url>
      
        <content type="html"><![CDATA[<p>因果推理存在两种框架，rubin的RCM（Rubin Causal Model） 与 pearl的SCM（Structural Causal Model），前者偏向计量，后者借助图形，更偏向计算机。</p><p>现在流行的推理方法绝大多数都是RCM框架的，比如PSM、CRF。但这里主要针对SCM进行讨论。</p><h4 id="1-因果图绘制"><a href="#1-因果图绘制" class="headerlink" title="1 因果图绘制"></a>1 因果图绘制</h4><p>SCM由图和方程组成，先得到因果图后搭建方程，有时因果图也被直接称作因果模型。由于方程依托于因果图，所以图的生成有效性对SCM举足轻重。</p><p>现在的因果图绘制算法，主要有条件独立、分数准则、连续优化、函数因果模型这几种方法。</p><ul><li>条件独立的方法，又叫约束方法，它是使用条件独立检验来绘制，由于使用局部信息，因此更适合高维学习，但也对样本量存在一定要求，同时条件独立存在前后影响，所以容易发生一错再错。</li><li>分数准则的方法是使用符合某种准则的评分指标从数据中学习出最契合的因果图，它需要遍历所有图的可能，是一个NP-hard问题，所以非常耗时，因此往往会使用启发式算法进行加速，但这有不可避免地陷入局部解。</li><li>优化的方法是将分数准则的方法的组合优化问题转换成连续优化问题，使用诸如梯度优化的形式完成求解，优点则是易与深度学习进行结合，也可以使用GPU进行加速，但缺点是求解简单粗暴，缺乏逻辑证明，也易入局部解。</li><li>函数因果模型的方法是使用回归残差的不可逆性来发现因果方向，通过事先定义的函数形式来从数据学习因果图，它的优点是易与SCM共用。</li></ul><p>其中，条件独立和分数准则的方法存在着等价类问题，即图定向的不可确定性。在条件独立的方法中，表现为多个图共享相同的骨架和V结构集合，也被称作结构等价；在分数准则的方法中，概率分布等价的两个图被要求具有相同的评分，而在连续变量和离散变量分别被预定义为高斯分布、伯努利分布的情况下，概率分布等价将等同于等价条件独立方法的结构等价，从而与条件独立的方法产生了联系。注意的是，等价的定义存在多种版本，但都表示相同的概念。</p><p>为了解决等价类导致的定向歧义问题，有人提出了本质图的概念，它通过遍历所有的等价类，在保持骨架不变的同时，保留它们共同的边方向，相当抽取出公共表征。</p><p>如果我们假定因果图具有如下形式：两变量之间至多只有单条边，且没有因果循环，那么它就是一个DAG（Directed Acyclic Graphs），对应的本质图的名称则是CPDAG（Completed Partially Directed Acyclic Graph）。</p><p>但是本质图通过定义来学习是非常困难的，因为它需要遍历所有等价类，而我们无法确定等价类的可能范围。所以在实际应用中，我们是先勾勒出因果图的骨架，然后使用已经被证明的定向规则，并辅以V结构来完成定向。如果此时使用的定向规则不是完备的——无法全部定向出公共边方向，我们则称得到的本质图是部分本质图，称作PDAG（Partially Directed Acyclic Graph）。</p><p>当我们考虑公共原因未被观测到（隐藏混淆）的场景，条件独立和分数准则的方法得到的因果图，会出现两变量间存在双边的现象。这是因为隐藏混淆导致两个变量分别检验出各自的V结构，此时生成的因果图不再满足DAG的形式。</p><p>显然，常规的DAG结构无法完整刻画出在实际生活中的因果关系，因此我们需要考虑另一种因果图结构，它就是MAG（Maximal Ancestral Graphs），其对应的本质图和部分本质图的名称分别是CPAG（Complete Partial Ancestral Graph），PAG（Partial Ancestral Graph）。</p><p>二者的主要差异在于：</p><ul><li>基于DAG的CPDAG的定向已经存在完备的规则，而基于MAG的CPAG尚未被提出完备的定向规则。</li><li>基于DAG的方法在实验阶段是使用预定义的贝叶斯网络的所有变量进行学习，而基于MAG的方法是仅选择部分变量进行学习。</li><li>基于DAG的方法在实际应用的结果往往不满足DAG形式的要求，因此很难使用面向DAG的推理方法。而基于MAG的方法的输出仍然是MAG形式，因此可以照常使用MAG的推理方法。</li></ul><p>等价类与MAG理论主要在条件独立和分数准则的方法中出现，所以连续优化和函数因果模型的方法的结果一般仍以DAG的形式完成输出，但它们是否能在真实场景中逼近真实因果图、表达真实因果关系仍然需要思索。</p><h4 id="2-效应的估计"><a href="#2-效应的估计" class="headerlink" title="2 效应的估计"></a>2 效应的估计</h4><p>绘制出因果图之后，我们可以再通过数据在图上学习对应的条件分布，将因果图转换成因果贝叶斯网络，进而使用Pear提出的do算子来完成一系列的效应估计，比如干预与反事实。</p><ul><li>关联：找出哪些指标或特征和最终目标关系，这是一种观测，直接用p(y|x)表示。</li><li>干预：假设发生x时，y会怎么样</li><li>反事实：y发生了某事件，是由什么x造成的。</li></ul><p>同样的，我们也可以直接根据得到的因果图，搭建对应的方程组，形成完整的SCM，再完成一系列的效应估计。</p><p>后者相比于前者，更加形式化，易与数值方法结合。</p><h4 id="3-实践的建议"><a href="#3-实践的建议" class="headerlink" title="3 实践的建议"></a>3 实践的建议</h4><p>因果发现而言：</p><p>在变量规模不大的情况下，建议采用非启发式算法的评分准则的CPDAG的方法，毕竟基于评分的方法误差比较小。</p><p>在变量规模稍大的情况下，建议采用基于条件独立的CPDAG方法。</p><p>因果推理而言：</p><p>建议采用基于条件独立的PAG方法，并结合PAG的do算子进行效应估计。</p><p>对PAG进行效应估计，存在许多方式。</p><ul><li>直接用PAG的do算子</li><li>把PAG转换成所有可能的MAG，分别进行do算子取效应均值</li><li>把PAG转换成SMCM再作do算子</li></ul><p>如果这种方法应用存在难度。另一种妥协方法是，只根据DAG直接辅以DAG的do算子进行估计。但这更考验生成DAG的方法的有效性，因为在实际应用中，直接输出DAG的方法都可能与真实因果图存在着偏离。</p><h4 id="4-前景与总结"><a href="#4-前景与总结" class="headerlink" title="4 前景与总结"></a>4 前景与总结</h4><p>因果错综复杂，需要考虑的变量可能不计其数，但在大数据时代恰恰满足了这个需求，为我们勾勒出合理的因果图提供了必要的数据基础，但它面临的问题如同以往的统计模型一样，维度爆炸导致学习方法效率非常低下。在这种场景下，显然利好基于条件独立的方法。</p><p>MAG虽然可以合理刻画出现实生活的因果关系，但它的父子节点不再诠释成直接原因和直接结果，而是原因与结果。对于想要捕捉目标变量的直系关系时，使用CPDAG仍然是一种非常好的分析工具，即使在混淆隐藏混淆的条件下，也只是增加双边而已，但如果需要进一步完成效应估计，这时就会产生难以推理的困境。</p><p>将MAG引入至因果表征学习，是一个非常有意思的方向，但这或许需要先出现MAG的评分准则的方法才行。</p>]]></content>
      
      
      <categories>
          
          <category> 因果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构因果模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国债期货合约及其交易策略</title>
      <link href="/2022/04/22/gai-shu-guo-zhai-qi-huo-he-yue-ji-qi-jiao-yi-ce-lue/"/>
      <url>/2022/04/22/gai-shu-guo-zhai-qi-huo-he-yue-ji-qi-jiao-yi-ce-lue/</url>
      
        <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>国债期货是债券市场投资者用于规避利率风险的一种常用的金融衍生工具，指买卖双方通过有组织的交易场所，约定在未来特定时间，按预先确定的价格和数量进行券款交收的国债交易方式。</p><p>国债期货具有如下功能：</p><p><strong>第一，规避利率风险功能。</strong>由于国债期货价格与其标的 物的价格变动趋势基本一致，通过国债期货套期保值交易可 以避免因利率波动造成的资产损失。 </p><p><strong>第二，价格发现功能。</strong>国债期货价格发现功能主要表现 在增加价格信息含量，为收益率曲线的构造、宏观调控提供 预期信号。 </p><p><strong>第三，促进国债发行功能。</strong>国债期货为国债发行市场的 承销商提供规避风险工具，促进承销商积极参与国债一级和 二级市场。 </p><p><strong>第四，优化资产配置功能。</strong>通过交易的杠杆效应，国债 期货具有较低的交易成本，能够方便投资者调整组合久期、 进行资产合理分配、提高投资收益率、方便现金流管理。</p><h3 id="2-中金所"><a href="#2-中金所" class="headerlink" title="2 中金所"></a>2 中金所</h3><p>中国金融期货交易所（以下简称“中金所”）是经国务院同意，中国证监会批准设立的，专门从事金融期货、期权等金融衍生品交易与结算的公司制交易所。中金所由上海期货交易所、郑州商品交易所、大连商品交易所、上海证券交易所和深圳证券交易所共同发起，于2006年9月8日在上海正式挂牌成立。</p><h3 id="3-交易流程"><a href="#3-交易流程" class="headerlink" title="3 交易流程"></a>3 交易流程</h3><p><strong>第三十条</strong> 会员接受客户委托指令后，应当将客户的所有指令通过交易所集中交易，不得进行场外交易。 </p><p><strong>第三十一条</strong> 买卖申报经撮合成交后，交易即告成立。  </p><p><strong>第三十二条</strong> 交易指令成交后，交易所按照规定发送成交回报。</p><p><strong>第三十三条</strong> 每日结算后，会员应当按照规定方式获取并核对成交记录。</p><p><strong>第三十六条</strong> 结算业务是指交易所根据公布的结算价 格和交易所有关规定对交易双方的交易结果进行资金清算 和划转的业务活动。 </p><p><strong>第三十七条</strong> 期货交易的结算，由交易所统一组织进行。 </p><p><strong>第三十八条</strong> 交易所实行会员分级结算制度。交易所对结算会员进行结算，结算会员对其受托的交易会员进行结算， 交易会员对其客户进行结算。 结算会员对其受托交易会员的期货交易承担履约责任， 交易会员无法履约时，结算会员应当代为履约，并取得对违约交易会员的相应追偿权。</p><h3 id="4-交易制度"><a href="#4-交易制度" class="headerlink" title="4 交易制度"></a>4 交易制度</h3><p><strong>第五十六条 交易所实行价格限制制度。</strong>价格限制制度分为熔断制度和涨跌停板制度。熔断幅度和涨跌停板幅度由交易所设定，交易所可以根据市场风险状况调整熔断幅度和涨跌停板幅度。 </p><p><strong>第五十七条 交易所实行持仓限额制度。</strong>持仓限额是指交易所规定的会员或者客户持仓的最大数量。会员或者客户的套期保值、套利交易的持仓按照交易所有关规定执行。 </p><p><strong>第五十八条 交易所实行大户持仓报告制度。</strong>会员或者客户持仓达到交易所规定的持仓报告标准或者被交易所指定必须报告的，会员或者客户应当向交易所报告。客户未报告的，会员应当向交易所报告。 交易所可以根据市场风险状况，制定并调整持仓报告标准。 </p><p><strong>第五十九条 交易所实行强行平仓制度。</strong>会员或者客户存在违规超仓、未按照规定及时追加保证金等违规行为或者交易所规定的其他情形的，交易所有权对相关会员或者客户采取强行平仓措施。 强行平仓盈利部分按照有关规定处理，发生的费用、损失及因市场原因无法强行平仓造成的损失扩大部分由相关会员或者客户承担。 </p><p><strong>第六十条 交易所实行强制减仓制度。</strong>期货交易出现同方向连续涨跌停板单边无连续报价或者市场风险明显增大情况的，交易所有权将当日以涨跌停板价格申报的未成交平仓报单，以当日涨跌停板价格与该合约净持仓盈利客户按照持仓比例自动撮合成交。 </p><p><strong>第六十一条 交易所实行结算担保金制度。</strong>结算担保金是指结算会员按照交易所规定缴纳的，用于应对结算会员违约风险的共同担保资金。 </p><p><strong>第六十二条 交易所实行风险警示制度。</strong>交易所认为必要的，可以单独或者同时采取要求会员和客户报告情况、谈话提醒、书面警示和发布风险警示公告等措施，以警示和化解风险。</p><h3 id="5-合约条款"><a href="#5-合约条款" class="headerlink" title="5 合约条款"></a>5 合约条款</h3><p><img src="../../../../medias/pic/%E5%9B%BD%E5%80%BA%E6%9C%9F%E8%B4%A7%E5%90%88%E7%BA%A6%E5%8F%8A%E5%85%B6%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5/image-20220521183018870.png" alt></p><p><img src="../../../../medias/pic/%E5%9B%BD%E5%80%BA%E6%9C%9F%E8%B4%A7%E5%90%88%E7%BA%A6%E5%8F%8A%E5%85%B6%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5/image-20220521183043135.png" alt></p><p><img src="../../../../medias/pic/%E5%9B%BD%E5%80%BA%E6%9C%9F%E8%B4%A7%E5%90%88%E7%BA%A6%E5%8F%8A%E5%85%B6%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5/image-20220521182812715.png" alt></p><p>​                                                                    来源：<a href="http://www.cffex.com.cn/10tf/" target="_blank" rel="noopener">10年期国债期货 | 中国金融期货交易所 (cffex.com.cn)</a></p><h3 id="6-期货交割"><a href="#6-期货交割" class="headerlink" title="6 期货交割"></a>6 期货交割</h3><h3 id="7-交易策略"><a href="#7-交易策略" class="headerlink" title="7 交易策略"></a>7 交易策略</h3><p>多头套期保值</p><p>多空套期保值</p><p>期现套利</p><p>跨期套利</p><p>跨品种套利</p><p>跨市套利</p><p>投机策略</p>]]></content>
      
      
      <categories>
          
          <category> 量化交易 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 期货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年终总结</title>
      <link href="/2021/12/26/2021-nian-zhong-zong-jie/"/>
      <url>/2021/12/26/2021-nian-zhong-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>年初的时候，我应该还在闵行校区看书，在外面租了个小房间。那段日子最惬意的事情莫过于每日在秋实阁就餐后，一路懒洋洋地走到大学林散步，总喜欢脚踩着满地落叶，时不时发出吱吱声。</p><img src="../../../../medias/pic/nzzj2021/0.jpg"><p>在这段时间里好像什么也没干，简单地看了些文献时间就混了过去，要说印象最深的应该是《机器学习线性代数基础》和《统计学习方法》。前者是代数后者偏概率，代数还好认真观摩也能理解无非是空间与视点的变化，概率倒是后面才碰碰巧巧入了个门，事实上在看到了罗晨学长的《基于高斯过程混合的分类模型》也着实落实了我是渣渣的定义。剩下的就是一个关于<a href="https://www.so-peace.com/2021/01/25/te-zheng-gong-cheng-gai-shu/" target="_blank" rel="noopener">特征工程的总结</a>，当时一心想着总结出统一的特征工程流程，翻阅了挺多的书籍和资料。</p><img src="../../../../medias/pic/nzzj2021/1.jpg"><p>当时租住的房东一家也很热情友好，每逢佳节几乎都请我们一同吃大餐，不得不说房东执厨确实是一道能手。房东家的那个二楼露天阳台也给我留下很深的印象，摆放着各式各样的盆栽。下面是中秋时摆的大宴和饭后到阳台放烟花的图片。</p><img src="../../../../medias/pic/nzzj2021/2.jpg"><img src="../../../../medias/pic/nzzj2021/3.jpg"><p>后来就开始迷迷糊糊地去找工作了，当时我想着从事量化行业，用自己的研究方向（局部因果发现/因果特征选择）为业务决策提供解释性工具，事实上也确实很侥幸地参与了这类的项目。下面是前往北京总部入职培训时逛过的地方。</p><img src="../../../../medias/pic/nzzj2021/4.jpg"><img src="../../../../medias/pic/nzzj2021/5.jpg"><p>在后来呀，就有点像电影里的两点一线的生活，白天在公司干活，晚上和周末就老老实实的做自己想做的事情。我是一个典型的宅男，哪里也不去，谁也叫不动，留给自己的时间也大多贡献给了书本。不过自己其实还是很爱玩的，比如前几个月忽然又染上了王者荣耀，然后就是好几个礼拜一有空闲就去玩，等玩疯了再回头又自责自己无所事事浪费青春，然后第二天又开始重蹈覆辙，这就有点像“不玩则已一玩就要成疯”，后来迫不得已只好将它卸载，偶尔实在无聊再下来玩一玩，然后劲头一过立马卸载。</p><img src="../../../../medias/pic/nzzj2021/6.jpg"><p>到这里想要就此打住但又似乎缺了一些不可或缺的东西需要总结，想想应该是学业了。怎么说呢，应该叫我放弃了学业更加准确，事实上在这一年里，在学校里在公司里，都没有非常关注我的课题方向，三天打鱼两天晒网。我学的东西很杂，从一开始的统计学习模型到概率模型，再到深度学习模型再再到因果发现，总感觉啥啥都了解一些又感觉啥啥都不了解，这种状态显然是有问题的。幸运的是在实践中我找到了我的毕论主题，那是一个我觉得较有前景的方向，同时也被导师认同，导师也为此给予了我很多的帮助。在后面的日子阿，我打算本本分分去钻研去落实我的想法，如果有空闲的时候想看一看下面这些书，为以后的进阶奠定一些基础，从上到下是我认为逐渐渐近的顺序。</p><img src="../../../../medias/pic/nzzj2021/7.jpg"><p>混了这么久，如果让我说出一句领悟最深的一句话，那应该是：世上真的有一种学习方式，叫作越学越菜。</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从朴素贝叶斯到隐马尔可夫模型的基础知识</title>
      <link href="/2021/09/12/cong-po-su-bei-xie-si-dao-yin-ma-er-ke-fu-mo-xing-de-ji-chu-zhi-shi/"/>
      <url>/2021/09/12/cong-po-su-bei-xie-si-dao-yin-ma-er-ke-fu-mo-xing-de-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<img src="../../../../medias/pic/latex2/1.jpg"><img src="../../../../medias/pic/latex2/2.jpg"><img src="../../../../medias/pic/latex2/3.jpg"><img src="../../../../medias/pic/latex2/4.jpg"><img src="../../../../medias/pic/latex2/5.jpg"><img src="../../../../medias/pic/latex2/6.jpg"><img src="../../../../medias/pic/latex2/7.jpg"><img src="../../../../medias/pic/latex2/8.jpg">]]></content>
      
      
      <categories>
          
          <category> 概率模型基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论基础与马尔科夫蒙特卡洛采样</title>
      <link href="/2021/09/03/gai-lu-lun-ji-chu-yu-ma-er-ke-fu-meng-te-qia-luo-cai-yang/"/>
      <url>/2021/09/03/gai-lu-lun-ji-chu-yu-ma-er-ke-fu-meng-te-qia-luo-cai-yang/</url>
      
        <content type="html"><![CDATA[<img src="../../../../medias/pic/latex1/1.jpg"><img src="../../../../medias/pic/latex1/2.jpg"><img src="../../../../medias/pic/latex1/3.jpg"><img src="../../../../medias/pic/latex1/4.jpg"><img src="../../../../medias/pic/latex1/5.jpg"><img src="../../../../medias/pic/latex1/6.jpg">]]></content>
      
      
      <categories>
          
          <category> 概率论基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《量化炼金术：中低频量化交易策略研发》总结</title>
      <link href="/2021/06/12/liang-hua-lian-jin-zhu-zhong-di-pin-liang-hua-jiao-yi-ce-lue-yan-fa-zong-jie/"/>
      <url>/2021/06/12/liang-hua-lian-jin-zhu-zhong-di-pin-liang-hua-jiao-yi-ce-lue-yan-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料：机械工业出版社的《量化炼金术：中低频量化交易策略研发》"><a href="#参考资料：机械工业出版社的《量化炼金术：中低频量化交易策略研发》" class="headerlink" title="参考资料：机械工业出版社的《量化炼金术：中低频量化交易策略研发》"></a>参考资料：机械工业出版社的《量化炼金术：中低频量化交易策略研发》</h2><p><img src="https://img-blog.csdnimg.cn/20210614161933722.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt="中低频量化交易策略研发"></p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《量化交易——如何建立自己的算法交易事业》总结</title>
      <link href="/2021/05/22/liang-hua-jiao-yi-ru-he-jian-li-zi-ji-de-suan-fa-jiao-yi-shi-ye-zong-jie/"/>
      <url>/2021/05/22/liang-hua-jiao-yi-ru-he-jian-li-zi-ji-de-suan-fa-jiao-yi-shi-ye-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料：东北财经大学出版社的《量化交易——如何建立自己的算法交易事业》"><a href="#参考资料：东北财经大学出版社的《量化交易——如何建立自己的算法交易事业》" class="headerlink" title="参考资料：东北财经大学出版社的《量化交易——如何建立自己的算法交易事业》"></a>参考资料：东北财经大学出版社的《量化交易——如何建立自己的算法交易事业》</h2><p><img src="https://img-blog.csdnimg.cn/20210614162041230.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt="如何建立自己的算法交易事业"></p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化交易 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《统计学习方法》总结</title>
      <link href="/2021/01/25/tong-ji-xue-xi-fang-fa-zong-jie/"/>
      <url>/2021/01/25/tong-ji-xue-xi-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：李航的《统计学习方法》第二版"><a href="#参考资料：李航的《统计学习方法》第二版" class="headerlink" title="参考资料：李航的《统计学习方法》第二版"></a>参考资料：李航的《统计学习方法》第二版</h1><h3 id="第一章-统计学习及监督学习概论"><a href="#第一章-统计学习及监督学习概论" class="headerlink" title="第一章 统计学习及监督学习概论"></a>第一章 统计学习及监督学习概论</h3><p><img src="https://img-blog.csdnimg.cn/20201120151111672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第二章-感知器"><a href="#第二章-感知器" class="headerlink" title="第二章 感知器"></a>第二章 感知器</h3><p><img src="https://img-blog.csdnimg.cn/20201120151200891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第三章-K近邻"><a href="#第三章-K近邻" class="headerlink" title="第三章 K近邻"></a>第三章 K近邻</h3><p><img src="https://img-blog.csdnimg.cn/20201120151216450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第四章-朴素贝叶斯"><a href="#第四章-朴素贝叶斯" class="headerlink" title="第四章 朴素贝叶斯"></a>第四章 朴素贝叶斯</h3><p><img src="https://img-blog.csdnimg.cn/20201120151227427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第五章-决策树"><a href="#第五章-决策树" class="headerlink" title="第五章 决策树"></a>第五章 决策树</h3><p><img src="https://img-blog.csdnimg.cn/20201120151237447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第六章-逻辑斯蒂回归与最大熵模型"><a href="#第六章-逻辑斯蒂回归与最大熵模型" class="headerlink" title="第六章 逻辑斯蒂回归与最大熵模型"></a>第六章 逻辑斯蒂回归与最大熵模型</h3><p><img src="https://img-blog.csdnimg.cn/2020112015124894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第七章-支持向量机"><a href="#第七章-支持向量机" class="headerlink" title="第七章 支持向量机"></a>第七章 支持向量机</h3><p><img src="https://img-blog.csdnimg.cn/20201120151258381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第八章-提升算法"><a href="#第八章-提升算法" class="headerlink" title="第八章 提升算法"></a>第八章 提升算法</h3><p><img src="https://img-blog.csdnimg.cn/20201120151317310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第九章-EM算法及其推广"><a href="#第九章-EM算法及其推广" class="headerlink" title="第九章 EM算法及其推广"></a>第九章 EM算法及其推广</h3><p><img src="https://img-blog.csdnimg.cn/20201120151327188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十章-隐马尔可夫模型"><a href="#第十章-隐马尔可夫模型" class="headerlink" title="第十章 隐马尔可夫模型"></a>第十章 隐马尔可夫模型</h3><p><img src="https://img-blog.csdnimg.cn/20201120151341495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十一章-条件随机场"><a href="#第十一章-条件随机场" class="headerlink" title="第十一章 条件随机场"></a>第十一章 条件随机场</h3><p><img src="https://img-blog.csdnimg.cn/20201120151353926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十二章-监督学习方法总结"><a href="#第十二章-监督学习方法总结" class="headerlink" title="第十二章 监督学习方法总结"></a>第十二章 监督学习方法总结</h3><p><img src="https://img-blog.csdnimg.cn/202011201514030.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十三章-无监督学习概论"><a href="#第十三章-无监督学习概论" class="headerlink" title="第十三章 无监督学习概论"></a>第十三章 无监督学习概论</h3><p><img src="https://img-blog.csdnimg.cn/20201120151412389.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十四章-聚类方法"><a href="#第十四章-聚类方法" class="headerlink" title="第十四章 聚类方法"></a>第十四章 聚类方法</h3><p><img src="https://img-blog.csdnimg.cn/20201120151422517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十五章-奇异值分解"><a href="#第十五章-奇异值分解" class="headerlink" title="第十五章 奇异值分解"></a>第十五章 奇异值分解</h3><p><img src="https://img-blog.csdnimg.cn/20201120151433212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十六章-主成分分析"><a href="#第十六章-主成分分析" class="headerlink" title="第十六章 主成分分析"></a>第十六章 主成分分析</h3><p><img src="https://img-blog.csdnimg.cn/20201120151444486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十七章-潜在语义分析"><a href="#第十七章-潜在语义分析" class="headerlink" title="第十七章 潜在语义分析"></a>第十七章 潜在语义分析</h3><p><img src="https://img-blog.csdnimg.cn/20201120151454884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十八章-概率潜在语义分析"><a href="#第十八章-概率潜在语义分析" class="headerlink" title="第十八章 概率潜在语义分析"></a>第十八章 概率潜在语义分析</h3><p><img src="https://img-blog.csdnimg.cn/20201120151506554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第十九章-马尔可夫链蒙特卡罗法"><a href="#第十九章-马尔可夫链蒙特卡罗法" class="headerlink" title="第十九章 马尔可夫链蒙特卡罗法"></a>第十九章 马尔可夫链蒙特卡罗法</h3><p><img src="https://img-blog.csdnimg.cn/2020112015151740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第二十章-潜在狄利克雷分配"><a href="#第二十章-潜在狄利克雷分配" class="headerlink" title="第二十章 潜在狄利克雷分配"></a>第二十章 潜在狄利克雷分配</h3><p><img src="https://img-blog.csdnimg.cn/20201120151532459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第二十一章-PageRank算法"><a href="#第二十一章-PageRank算法" class="headerlink" title="第二十一章 PageRank算法"></a>第二十一章 PageRank算法</h3><p><img src="https://img-blog.csdnimg.cn/20201120151544519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p><h3 id="第二十二章-无监督学习方法总结"><a href="#第二十二章-无监督学习方法总结" class="headerlink" title="第二十二章  无监督学习方法总结"></a>第二十二章  无监督学习方法总结</h3><p><img src="https://img-blog.csdnimg.cn/20201120151553689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特征工程概述</title>
      <link href="/2021/01/25/te-zheng-gong-cheng-gai-shu/"/>
      <url>/2021/01/25/te-zheng-gong-cheng-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、特征工程-主篇"><a href="#一、特征工程-主篇" class="headerlink" title="一、特征工程-主篇"></a>一、特征工程-主篇</h1><p>注：缺失值处理应在特征编码之前，因为部分编码方法无法处理缺失值。<br><img src="https://img-blog.csdnimg.cn/20210125154804184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="二、描述性统计"><a href="#二、描述性统计" class="headerlink" title="二、描述性统计"></a>二、描述性统计</h1><p><img src="https://img-blog.csdnimg.cn/20210125154815464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="三、探索性分析"><a href="#三、探索性分析" class="headerlink" title="三、探索性分析"></a>三、探索性分析</h1><p><img src="https://img-blog.csdnimg.cn/20210125155013462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="四、异常值处理"><a href="#四、异常值处理" class="headerlink" title="四、异常值处理"></a>四、异常值处理</h1><p><img src="https://img-blog.csdnimg.cn/20210125155059856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="五、缺失值处理"><a href="#五、缺失值处理" class="headerlink" title="五、缺失值处理"></a>五、缺失值处理</h1><p><img src="https://img-blog.csdnimg.cn/20210125155124685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="六、特征编码"><a href="#六、特征编码" class="headerlink" title="六、特征编码"></a>六、特征编码</h1><p><img src="https://img-blog.csdnimg.cn/20210125155214779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="七、Baseline模型确定"><a href="#七、Baseline模型确定" class="headerlink" title="七、Baseline模型确定"></a>七、Baseline模型确定</h1><p><img src="https://img-blog.csdnimg.cn/20210125155249433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="八、特征创造"><a href="#八、特征创造" class="headerlink" title="八、特征创造"></a>八、特征创造</h1><p><img src="https://img-blog.csdnimg.cn/20210125155318374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="九、标准化"><a href="#九、标准化" class="headerlink" title="九、标准化"></a>九、标准化</h1><p><img src="https://img-blog.csdnimg.cn/20210125155338985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十、特征筛选"><a href="#十、特征筛选" class="headerlink" title="十、特征筛选"></a>十、特征筛选</h1><p><img src="https://img-blog.csdnimg.cn/20210125155421764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十一、样本标签不均衡处理"><a href="#十一、样本标签不均衡处理" class="headerlink" title="十一、样本标签不均衡处理"></a>十一、样本标签不均衡处理</h1><p><img src="https://img-blog.csdnimg.cn/20210125155453343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十二、特征学习"><a href="#十二、特征学习" class="headerlink" title="十二、特征学习"></a>十二、特征学习</h1><p><img src="https://img-blog.csdnimg.cn/20210125155517192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十三、模型调参"><a href="#十三、模型调参" class="headerlink" title="十三、模型调参"></a>十三、模型调参</h1><p><img src="https://img-blog.csdnimg.cn/20210125155541834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 特征工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 特征工程概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于XGBoost模型组成的简单探究</title>
      <link href="/2020/10/20/guan-yu-xgboost-mo-xing-zu-cheng-de-jian-dan-tan-jiu/"/>
      <url>/2020/10/20/guan-yu-xgboost-mo-xing-zu-cheng-de-jian-dan-tan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：陈天奇的《XGBoost：A-scalable-Tree-Boosting-System》"><a href="#参考资料：陈天奇的《XGBoost：A-scalable-Tree-Boosting-System》" class="headerlink" title="参考资料：陈天奇的《XGBoost：A scalable Tree Boosting System》"></a>参考资料：陈天奇的《XGBoost：A scalable Tree Boosting System》</h1><p><img src="https://img-blog.csdnimg.cn/2020102017573840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间估计与假设检验的原理及其共同点</title>
      <link href="/2020/10/20/qu-jian-gu-ji-yu-jia-she-jian-yan-de-yuan-li-ji-qi-gong-tong-dian/"/>
      <url>/2020/10/20/qu-jian-gu-ji-yu-jia-she-jian-yan-de-yuan-li-ji-qi-gong-tong-dian/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201020175415267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区间估计 </tag>
            
            <tag> 假设检验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归的损失函数和梯度下降之间的概述</title>
      <link href="/2020/10/20/xian-xing-hui-gui-de-sun-shi-han-shu-he-ti-du-xia-jiang-zhi-jian-de-gai-shu/"/>
      <url>/2020/10/20/xian-xing-hui-gui-de-sun-shi-han-shu-he-ti-du-xia-jiang-zhi-jian-de-gai-shu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201020175228582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梯度下降 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于特征筛选中F分布和卡方分布的运用</title>
      <link href="/2020/10/20/guan-yu-te-zheng-shai-xuan-zhong-f-fen-bu-he-qia-fang-fen-bu-de-yun-yong/"/>
      <url>/2020/10/20/guan-yu-te-zheng-shai-xuan-zhong-f-fen-bu-he-qia-fang-fen-bu-de-yun-yong/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201020175141598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p>]]></content>
      
      
      <categories>
          
          <category> 特征工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 特征筛选 </tag>
            
            <tag> F分布 </tag>
            
            <tag> 卡方分布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVM基本数学模型求解过程——线性、非线性和核函数</title>
      <link href="/2020/10/20/svm-ji-ben-shu-xue-mo-xing-qiu-jie-guo-cheng-xian-xing-fei-xian-xing-he-he-han-shu/"/>
      <url>/2020/10/20/svm-ji-ben-shu-xue-mo-xing-qiu-jie-guo-cheng-xian-xing-fei-xian-xing-he-he-han-shu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20201020174217263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于PCA降维的特征值分解与奇异值分解的比较</title>
      <link href="/2020/10/20/ji-yu-pca-jiang-wei-de-te-zheng-zhi-fen-jie-yu-qi-yi-zhi-fen-jie-de-bi-jiao/"/>
      <url>/2020/10/20/ji-yu-pca-jiang-wei-de-te-zheng-zhi-fen-jie-yu-qi-yi-zhi-fen-jie-de-bi-jiao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020102017360121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70#pic_center" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习常用九大算法</title>
      <link href="/2020/07/17/ji-qi-xue-xi-chang-yong-jiu-da-suan-fa/"/>
      <url>/2020/07/17/ji-qi-xue-xi-chang-yong-jiu-da-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：极客时间的《数据分析实战45讲》"><a href="#参考资料：极客时间的《数据分析实战45讲》" class="headerlink" title="参考资料：极客时间的《数据分析实战45讲》"></a>参考资料：极客时间的《数据分析实战45讲》</h1><h3 id="一、决策树"><a href="#一、决策树" class="headerlink" title="一、决策树"></a>一、决策树</h3><p>在现实生活中，我们总会遇到需要各种抉择的场景，而抉择背后的逻辑结构图就是决策树。根据决策树在构建时所参考的指标的不同，决策树算法一共分为ID3算法、C4.5算法和CART算法等。</p><h4 id="I、ID3算法-（信息增益）"><a href="#I、ID3算法-（信息增益）" class="headerlink" title="I、ID3算法 （信息增益）"></a>I、ID3算法 （信息增益）</h4><h5>1. 基本原理</h5><p>通过以下公式的计算来获得决策树搭建所必需的指标：<br>$$<br>Gain(D,a)=Entropy(D)-\sum_{i=1}^{k} \frac{|D_i|}{|D|}Entropy(D_i)  \qquad \qquad \qquad (1)\<br>Entropy(D)=-\sum_{i=0}^{c-1}p(C_i|D)log_2^{P(C_i|D)} \qquad \qquad \qquad  \qquad (2)<br>$$<br>其中$D、a、k、D_i、c、p(C_i|D)$分别代表的是当前数据集、特征、特征a的所有取值个数、划分后的子数据集、分类标签个数和在当前数据集中被划分为第i个分类标签的概率。</p><p>假设当前数据集如下：</p><table><thead><tr><th>天气</th><th>温度</th><th>湿度</th><th>狂风</th><th>是否打篮球</th></tr></thead><tbody><tr><td>晴天</td><td>高</td><td>中</td><td>否</td><td>否</td></tr><tr><td>晴天</td><td>高</td><td>中</td><td>是</td><td>否</td></tr><tr><td>阴天</td><td>高</td><td>高</td><td>否</td><td>是</td></tr><tr><td>小雨</td><td>高</td><td>高</td><td>否</td><td>是</td></tr><tr><td>小雨</td><td>低</td><td>高</td><td>否</td><td>否</td></tr><tr><td>晴天</td><td>中</td><td>中</td><td>是</td><td>是</td></tr><tr><td>阴天</td><td>中</td><td>高</td><td>是</td><td>否</td></tr></tbody></table><p>我们将整个数据集$D$作为根结点，运用公式来选择哪一个特征作为分支依据。假设初始数据集$D$被特征天气分成了三个子集合$D_1、D_2、D_3$，那么</p><p>$$<br>Entropy(D)=-(\frac{3}{7}log_2^{\frac{3}{7}}+\frac{4}{7}log_2^{\frac{4}{7}})=0.985  \<br>    Entropy(D_1)=-(\frac{1}{3}log_2^{\frac{1}{3}}+\frac{2}{3}log_2^{\frac{2}{3}})=0.918 \<br>    Entropy(D_2)=-(\frac{1}{2}log_2^{\frac{1}{2}}+\frac{1}{2}log_2^{\frac{1}{2}})=1.0 \<br>    Entropy(D_3)=-(\frac{1}{3}log_2^{\frac{1}{3}}+\frac{2}{3}log_2^{\frac{2}{3}})=0.918 \<br>    Gain(D,天气)=Entropy(D)-\sum_{i=1}^{3} \frac{|D_i|}{|D|}Entropy(D_i)=0.985-(3/7<em>0.918+2/7</em>1.0+2/7*1.0)=0.020  \<br>$$<br> 同理求出当前数据集下其余特征对应的信息增益值<br>$$<br>    Gain(D,温度)=0.128    \<br>    Gain(D , 湿度)=0.020 \<br>    Gain(D , 刮风)=0.020<br>$$<br>通过数值的对比，我们发现以温度为对象的信息增益最大，因此我们可以判断出在当前数据集中选择温度特征来进行数据集的划分是最好的。<br><img src="https://img-blog.csdnimg.cn/20200715214720715.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>随后将得到的三个集合再次当作原数据集执行上述步骤，最终得到完整的决策树。<br><img src="https://img-blog.csdnimg.cn/20200715214951653.jpg?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>之所以规定选择信息增益最大的特征来进行数据集的划分，这是因为通过公式一，我们可以发现所谓的信息增益不过是父子节点间的信息熵的差值，而选择信息增益最大的特征来进行创建分支，本质上是选择某一特征来展开枝干使得父节点所丢失的信息熵最大，如此一来就使逐渐搭建成的树的纯度更高。</p><h5>2. 优势与缺陷</h5><p> ID3 的算法规则相对简单，可解释性强。同样也存在缺陷，比如我们会发现 ID3 算法倾向于选择取值比较多的属性。如果我们把“编号”作为一个属性，那么“编号”将会被选为最优属性 ，但实际上“编号”是无关属性的。</p><hr><h4 id="II、C4-5算法-（信息增益率）"><a href="#II、C4-5算法-（信息增益率）" class="headerlink" title="II、C4.5算法  （信息增益率）"></a>II、C4.5算法  （信息增益率）</h4><h5>1. 基本原理</h5><p>C4.5算法是ID3算法的改进版本，因此与ID3算法的步骤是基本一致的，其主要改进的部分在于以下几点：</p><ol><li>采用信息增益率来作为决策树搭建的参考指标</li><li>采用悲观剪枝，减少模型过拟合从而导致容错能力低、泛化能力差、死板的可能</li><li>离散化处理连续属性</li><li>自定义了处理缺失值的方法</li></ol><h5>2. 优势与缺陷</h5><p>C4.5 在 ID3 的基础上，用信息增益率代替了信息增益，解决了噪声敏感的问题，并且可以对构造树进行剪枝、处理连续数值以及数值缺失等情况，但是由于 C4.5 需要对数据集进行多次扫描，算法效率相对较低。</p><hr><h4 id="III、CART算法-（基尼指数）"><a href="#III、CART算法-（基尼指数）" class="headerlink" title="III、CART算法  （基尼指数）"></a>III、CART算法  （基尼指数）</h4><h5>1. 基本原理</h5><p>通过以下公式的计算来获得决策树搭建所必需的指标：</p><p>$$<br>GINI(D,a)=\sum_{i=1}^{k}\frac{D_i}{D}GINI(D_i) \<br>GINI(D)=1-\sum_{i=0}^{c-1}[p(C_i|D)]^2<br>$$<br>其中$D、a、k、D_i、c、p(C_i|D)$分别代表的是当前数据集、特征、特征a的所有取值个数、划分后的子数据集、分类标签个数和在当前数据集中被划分为第i个分类标签的概率。</p><p>假设当前数据集如下：<br>| 天气 | 温度 | 湿度 |狂风|是否打篮球|<br>|–|–|–|–|–|<br>|晴天  | 高 | 中 | 否 | 否|<br>| 晴天  | 高 | 中 | 是 | 否 |<br>|阴天  | 高 | 高 | 否 |是  |<br>| 小雨 | 高 | 高 | 否 | 是 |<br>| 小雨 | 低 |高| 否 | 否 |<br>| 晴天 | 中 | 中 |是  |是  |<br>| 阴天 | 中 | 中| 是 | 是 |<br>| 晴天 | 高 | 高 | 是 | 是 |<br>| 小雨 | 中 |高| 是 | 是 |<br>| 小雨 | 低 |高| 否 | 否 |<br>| 晴天 | 中 | 高 | 否 | 是 |<br>| 晴天 | 中 | 高 | 是 | 是 |<br>我们将整个数据集作为根结点，运用公式来选择哪一个特征作为分支依据。假设初始数据集$D$被特征天气分成了三个子集合$D_1、D_2$，那么</p><p>$$<br>GINI(D_1)=1-1=0 \<br>GINI(D_2)=1-(0.5^2+0.5^2)=0.5 \<br>GINI(D,狂风)=\frac{6}{12}GINI(D_1)+\frac{6}{12}GINI(D_2)=0+0.5*0.5=0.25<br>$$<br>同理可以求出当前数据集下其余特征对应的信息增益值。<br>$$GINI(D,天气)=\cdots \<br>GINI(D,温度)=\cdots \<br>GINI(D,湿度)=\cdots $$<br>通过数值的对比，假设我们发现以狂风为对象的基尼指标值最小，那么我们可以判断出在当前数据集中选择狂风特征来进行数据集的划分是最好的。<br><img src="https://img-blog.csdnimg.cn/20200716223720124.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>随后将得到的两个集合再次当作原数据集执行上述步骤，最终就可以得到完整的决策树。</p><h5>2. Python代码实战</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding=utf-8</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris<span class="token comment" spellcheck="true"># 准备数据集</span>iris<span class="token operator">=</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取特征集和分类标识</span>features <span class="token operator">=</span> iris<span class="token punctuation">.</span>datalabels <span class="token operator">=</span> iris<span class="token punctuation">.</span>target<span class="token comment" spellcheck="true"># 随机抽取33%的数据作为测试集，其余为训练集</span>train_features<span class="token punctuation">,</span> test_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> test_labels <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.33</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建CART分类树</span>clf <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>criterion<span class="token operator">=</span><span class="token string">'gini'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拟合构造CART分类树</span>clf <span class="token operator">=</span> clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用CART分类树做预测</span>test_predict <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 预测结果与测试集结果作比对</span>score <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>test_labels<span class="token punctuation">,</span> test_predict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CART分类树准确率 %.4lf"</span> <span class="token operator">%</span> score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="IV、泰坦尼克乘客生存预测实战"><a href="#IV、泰坦尼克乘客生存预测实战" class="headerlink" title="IV、泰坦尼克乘客生存预测实战"></a>IV、泰坦尼克乘客生存预测实战</h4><p>给定某一乘客的相关信息，预测其是否生存。</p><h5>1. 初始数据集</h5><p><img src="https://img-blog.csdnimg.cn/20200717120743209.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h5>2. 数据获取</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># 数据加载</span>train_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./Titanic_Data/train.csv'</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./Titanic_Data/test.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5>3. 数据探索</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据探索</span><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>train_data<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>4. 数据清洗</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用平均年龄来填充年龄中的nan值</span>train_data<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用票价的均值填充票价中的nan值</span>train_data<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用登录最多的港口来填充登录港口的nan值</span>train_data<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_data<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>5. 特征选择</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 特征选择</span>features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> <span class="token string">'SibSp'</span><span class="token punctuation">,</span> <span class="token string">'Parch'</span><span class="token punctuation">,</span> <span class="token string">'Fare'</span><span class="token punctuation">,</span> <span class="token string">'Embarked'</span><span class="token punctuation">]</span>train_features <span class="token operator">=</span> train_data<span class="token punctuation">[</span>features<span class="token punctuation">]</span>train_labels <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span>test_features <span class="token operator">=</span> test_data<span class="token punctuation">[</span>features<span class="token punctuation">]</span>        <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction <span class="token keyword">import</span> DictVectorizer    【特征值里有一些是字符串，这样不方便后续的运算，需要转成数值类型。即宽边长方法】dvec<span class="token operator">=</span>DictVectorizer<span class="token punctuation">(</span>sparse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>train_features<span class="token operator">=</span>dvec<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_features<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'record'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>6. 模型搭建</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token comment" spellcheck="true"># 构造ID3决策树</span>clf <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>criterion<span class="token operator">=</span><span class="token string">'entropy'</span><span class="token punctuation">)</span>    【指定使用ID3算法搭建决策树模型】<span class="token comment" spellcheck="true"># 决策树训练</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>7. 模型预测</h5><pre class="line-numbers language-python"><code class="language-python">test_features<span class="token operator">=</span>dvec<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_features<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'record'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 决策树预测</span>pred_labels <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5>8. 模型评估</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 得到决策树准确率</span>acc_decision_tree <span class="token operator">=</span> round<span class="token punctuation">(</span>clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token string">'score准确率为 %.4lf'</span> <span class="token operator">%</span> acc_decision_tree<span class="token punctuation">)</span> 【使用训练集来评估，准确率的可信度较低。使用测试集或者K折交叉验证】<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score<span class="token comment" spellcheck="true"># 使用K折交叉验证 统计决策树准确率</span><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token string">'cross_val_score准确率为 %.4lf'</span> <span class="token operator">%</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>cross_val_score<span class="token punctuation">(</span>clf<span class="token punctuation">,</span> train_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>9. 结果可视化</h5>借用 Graphviz 可视化工具帮我们把决策树呈现出来<p><img src="https://img-blog.csdnimg.cn/20200717114127880.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><hr><h3 id="二、贝叶斯"><a href="#二、贝叶斯" class="headerlink" title="二、贝叶斯"></a>二、贝叶斯</h3><h4 id="I-基本原理"><a href="#I-基本原理" class="headerlink" title="I. 基本原理"></a>I. 基本原理</h4><p>初始数据集（离散型）：<br>|编号|身高 |体重 |鞋码 |性别|<br>|–|–|–|–|–|<br>| 1 |  高| 重| 大| 男|<br>| 2 | 高 | 重| 大|男 |<br>| 3 | 中 |中 |大 |男 |<br>|4  | 中 |中 |中 |男 |<br>|5  | 矮 | 轻|小 | 女|<br>|6  | 矮 | 轻| 小|女|<br>| 7 |矮  |中 | 中| 女|<br>|8 |中 |中 |中 | 女|<br>现在我们想根据一条记录的特征值｛身高=“高”，体重=“中”，鞋码=“中”｝来预测拥有这些特征值的人的性别。<br>假设$A_1$=｛身高=“高”｝、$A_2$=｛体重=“中”｝、$A_3$=｛鞋码=“中”｝，$C_1$= 男性，$C_2$= 女性。那么，根据贝叶斯公式<br>$$ P(C_j|A_1A_2A_3)=\frac{P(A_1A_2A_3|C_j)P(C_j)}{P(A_1A_2A_3)}<br>=\frac{P(A_1|C_j) P(A_2|C_j) P(A_3|C_j) P(C_j)}{P(A_1)P(A_2)P(A_3)}$$<br>可以直接获得分类概率，其中$P(A_1|C_j)$为在性别为$C_j$的记录中满足$A_1$记录的比例、$P(A_i)$代表的是在初始数据中满足$A_i$记录的占比。<br>由于对于任意一个$j$，$P(C_j|A_1A_2A_3)$的分母都是一样的，因此选取里面的最大值本质是选择分子最大的。经计算，<br>$$P(A_1A_2A_3|C_1)=1/16 \<br>   P(A_1A_2A_3|C_2)=0<br>$$<br>因为$P(C_i)$是个非负数，因此可以推测出$P(C_1|A_1A_2A_3)$值是最大的，从而判断拥有｛身高=“高”，体重=“中”，鞋码=“中”｝特征的人的性别最大概率是男性。</p><hr><p>初始数据集（连续型）：<br>|编号|身高（CM） |体重（斤） |鞋码（欧码） |性别|<br>|–|–|–|–|–|<br>| 1 |  183| 164| 45| 男|<br>| 2 | 182 | 170 |44|男 |<br>| 3 | 178 |160 |43 |男 |<br>|4  | 175 |140 |40 |男 |<br>|5  | 160 | 88|35 | 女|<br>|6  | 165 | 100| 37|女|<br>| 7 |163  |110 | 38| 女|<br>|8 |168 |120 |39 | 女|<br>现在我们想根据一条记录的特征值｛身高=“180”，体重=“120”，鞋码=“41”｝来预测拥有这些特征值的人的性别。<br>同样的，我们假设$A_1$=｛身高=“180”｝、$A_2$=｛体重=“120”｝、$A_3$=｛鞋码=“41”｝，$C_1$= 男性，$C_2$= 女性。<br>由于数据是连续型的，因此使用贝叶斯来实现分类需要另外的一些步骤，以方便我们计算各个概率的值，如$P(A_i|C_j)和P（A_i）$。<br>在计算这些概率前，我们要先通过初始数据集确定各个的分布函数的参数，搭建身高、体重、鞋码、男性的身高、男性的体重、男性的鞋码、女性的身高、女性的体重、女性的鞋码的分布函数，最后通过各自的分布函数找到概率密度函数，从而计算出$P（A_i）和P(A_i|C_j)$，带入贝叶斯公式中，选择结果值最大的类别即可。</p><hr><h4 id="II、文档分类实战"><a href="#II、文档分类实战" class="headerlink" title="II、文档分类实战"></a>II、文档分类实战</h4><p>根据输入文档，判断其文章类型，比如垃圾邮件等。</p><h5>1. 初始数据集</h5><p>文档 1：this is the bayes document；<br>文档 2：this is the second second document；<br>文档 3：and the third one；<br>文档 4：is this the document。</p><h5>2. 对文档进行分词</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> nltkword_list <span class="token operator">=</span> nltk<span class="token punctuation">.</span>word_tokenize<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#英文分词</span>nltk<span class="token punctuation">.</span>pos_tag<span class="token punctuation">(</span>word_list<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#标注单词的词性</span><span class="token keyword">import</span> jiebaword_list <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#中文分词</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>3. 加载停用词表</h5><pre class="line-numbers language-python"><code class="language-python">stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> io<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'stop_words.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#停用词就是在分类中没有用的词，这些词一般词频 TF 高，但是 IDF 很低，起不到分类的作用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5>4. 计算单词的权重</h5><pre class="line-numbers language-python"><code class="language-python">tf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>stop_words<span class="token operator">=</span>stop_words<span class="token punctuation">,</span> max_df<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>features <span class="token operator">=</span> tf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_contents<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#得到TF-IDF特征空间 features</span><span class="token comment" spellcheck="true">#词频TF=单词出现的次数/该文档的总单词数</span><span class="token comment" spellcheck="true">#逆向文档频率IDF=log（文档总数/（）该单词出现的文档树+1））</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5>5. 生成朴素贝叶斯分类器</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 多项式贝叶斯分类器</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB  clf <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5>6. 使用生成的分类器做预测</h5><pre class="line-numbers language-python"><code class="language-python">test_tf <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span>stop_words<span class="token operator">=</span>stop_words<span class="token punctuation">,</span> max_df<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> vocabulary<span class="token operator">=</span>train_vocabulary<span class="token punctuation">)</span>test_features<span class="token operator">=</span>test_tf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>test_contents<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5>7. 计算准确率</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metrics<span class="token keyword">print</span> metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>test_labels<span class="token punctuation">,</span> predicted_labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="三、支持向量机（SVM）"><a href="#三、支持向量机（SVM）" class="headerlink" title="三、支持向量机（SVM）"></a>三、支持向量机（SVM）</h3><h4 id="I、基本原理"><a href="#I、基本原理" class="headerlink" title="I、基本原理"></a>I、基本原理</h4><p>一般的分类算法，其本质都是在许多不同类别的点集中勾勒出一条线性直线，使得线性直线尽可能将点集划分成不同的区域，其中每个区域都是同样的类别，在得到新的输入点后可以通过该线性直线快速得将输入点划分到某一个相似类别区域，达成分类的效果。<br><img src="https://img-blog.csdnimg.cn/20200722214220488.jpg?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>但是如果碰到下面的分布情况，就很难以线性方程来描述曲线。</p><p><img src="https://img-blog.csdnimg.cn/20200722213452366.jpg?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>因此需要支持向量机来解决这种的非线性分类问题。它是通过将二维空间内无法通过直线轻易划分的问题转化成三维空间寻找最佳超平面（最优决策面）的问题，而升维是由支持向量机的核函数来实现。<br><img src="https://img-blog.csdnimg.cn/20200722214630254.jpg?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>更加细致的讲，SVM 就是帮我们找到一个超平面，这个超平面能将不同的样本划分开，同时使得样本集中的点到这个分类超平面的最小距离（即分类间隔）最大化。其中我们定义某类样本集到超平面的距离是这个样本集合内的样本到超平面的最短距离。支持向量就是离分类超平面最近的样本点，因此实际上如果确定了支持向量也就确定了这个超平面。<br>我们假设这个超平面的方程为<br>$$g(x)=w^Tx+b,w\in R^n,x \in R^n$$<br>而点到平面的距离的数学表达式为<br>$$d_i=\frac{|wx_i+b|}{||w||}$$<br>那么我们可以通过凸优化的知识来得到具体的$w、b$ 的值，从而得到最佳决策面模型。</p><p>可以看到这种支持向量机只能实现二分类的问题，但在实际应用中总能碰到多分类需求，那么此时们该如何使用支持向量机来解决呢？<br>第一种，一对多方法。<br>假设我们要把物体分成 A、B、C、D 四种分类，那么我们可以先把其中的一类作为类别一，其他类统一归为类别二。<br>这样我们可以构造 4 种 SVM：<br>（1）样本 A 作为正集，B，C，D 作为负集<br>（2）样本 B 作为正集，A，C，D 作为负集<br>（3）样本 C 作为正集，A，B，D 作为负集<br>（4）样本 D 作为正集，A，B，C 作为负集<br>这种方法，针对 K 个分类，需要训练 K 个分类器，分类速度较快，但训练速度较慢。<br>第二种，一对一方法。<br>假设我们要把物体分成 A、B、C 三个类，那么我们可以在任意两类样本之间构造一个 SVM。<br>这样我们可以构造 3 个分类器：<br>（1）分类器 1：A、B<br>（2）分类器 2：A、C<br>（3）分类器 3：B、C<br>当对一个未知样本进行分类时，每一个分类器都会有一个分类结果，即为 1 票，最终得票最多的类别就是整个未知样本的类别。</p><h4 id="II、乳腺癌检测实战"><a href="#II、乳腺癌检测实战" class="headerlink" title="II、乳腺癌检测实战"></a>II、乳腺癌检测实战</h4><p>根据患者乳腺肿块经过细针穿刺 (FNA) 后的数字化图像来判断是否患有乳腺癌</p><h5>1. 初始数据集</h5><p><img src="https://img-blog.csdnimg.cn/20200722221127253.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200722221206880.jpg?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h5>2. 数据加载和探索</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载数据集，你需要把数据放到目录中</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./data.csv"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据探索</span><span class="token comment" spellcheck="true"># 因为数据集中列比较多，我们需要把dataframe中的列全部显示出来</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>3. 数据清洗</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将特征字段分成3组</span>features_mean<span class="token operator">=</span> list<span class="token punctuation">(</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>features_se<span class="token operator">=</span> list<span class="token punctuation">(</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span>features_worst<span class="token operator">=</span>list<span class="token punctuation">(</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据清洗</span><span class="token comment" spellcheck="true"># ID列没有用，删除该列</span>data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将B良性替换为0，M恶性替换为1</span>data<span class="token punctuation">[</span><span class="token string">'diagnosis'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'diagnosis'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'M'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>4. 特征选择</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将肿瘤诊断结果可视化</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'diagnosis'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"Count"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用热力图呈现features_mean字段之间的相关性</span>corr <span class="token operator">=</span> data<span class="token punctuation">[</span>features_mean<span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># annot=True显示每个方格的数据</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>corr<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 特征选择</span>features_remain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'radius_mean'</span><span class="token punctuation">,</span><span class="token string">'texture_mean'</span><span class="token punctuation">,</span> <span class="token string">'smoothness_mean'</span><span class="token punctuation">,</span><span class="token string">'compactness_mean'</span><span class="token punctuation">,</span><span class="token string">'symmetry_mean'</span><span class="token punctuation">,</span> <span class="token string">'fractal_dimension_mean'</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>5. 数据准备</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 抽取30%的数据作为测试集，其余作为训练集</span>train<span class="token punctuation">,</span> test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">,</span> test_size <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># in this our main data is splitted into train and test</span><span class="token comment" spellcheck="true"># 抽取特征选择的数值作为训练和测试数据</span>train_X <span class="token operator">=</span> train<span class="token punctuation">[</span>features_remain<span class="token punctuation">]</span>train_y<span class="token operator">=</span>train<span class="token punctuation">[</span><span class="token string">'diagnosis'</span><span class="token punctuation">]</span>test_X<span class="token operator">=</span> test<span class="token punctuation">[</span>features_remain<span class="token punctuation">]</span>test_y <span class="token operator">=</span>test<span class="token punctuation">[</span><span class="token string">'diagnosis'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 采用Z-Score规范化数据，保证每个特征维度的数据均值为0，方差为1</span>ss <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>train_X <span class="token operator">=</span> ss<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_X<span class="token punctuation">)</span>test_X <span class="token operator">=</span> ss<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_X<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>6. 模型搭建、预测和评估 </h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建SVM分类器</span>model <span class="token operator">=</span> svm<span class="token punctuation">.</span>SVC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用训练集做训练</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_X<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用测试集做预测</span>prediction<span class="token operator">=</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'准确率: '</span><span class="token punctuation">,</span> metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span>prediction<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、K最近邻（KNN）"><a href="#四、K最近邻（KNN）" class="headerlink" title="四、K最近邻（KNN）"></a>四、K最近邻（KNN）</h3><h4 id="I、基本原理-1"><a href="#I、基本原理-1" class="headerlink" title="I、基本原理"></a>I、基本原理</h4><p>初始数据集：<br>| 电影名称 | 打斗次数 | 接吻次数 | … | 电影类型|<br>|–|–|–|–|–|<br>| 《战狼》 | 100 | 5 | …  | 动作 |<br>| 《红海行动》 | 95 | 3 | …  | 动作 |<br>|《碟中谍6》  | 105 | 31 |…   | 动作 |<br>| 《前任3》 | 2 | 59 | …  | 爱情 |<br>| 《春娇救志明》 | 3 | 60 | …  | 爱情 |<br>| 《泰坦尼克号》 | 10  | 80 | …  | 爱情 |<br>我们可以把打斗次数看成 X 轴，接吻次数看成 Y 轴，将每条记录看成一个个点在坐标系上标记，我们可以看出这些点集会根据各自的特征而聚集在不同的区域上，自动形成分类模型。此时对于一个输入点，我们只需要看其附近的K个点大部分处于哪个类别，就能评估出其大概率属于哪个类别。<br><img src="https://img-blog.csdnimg.cn/20200722230000954.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="II、手写数字识别实战"><a href="#II、手写数字识别实战" class="headerlink" title="II、手写数字识别实战"></a>II、手写数字识别实战</h4><p>对值为0~9的图像进行计算机识别并给出其对应的数字</p><h5>1. 初始数据集</h5>sklearn 自带的MNIST 数据集，它只包括了 1797 幅数字图像，每幅图像大小是 8*8 像素，分别对应于0~9的值<h5>2. 数据加载和探索</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载数据</span>digits <span class="token operator">=</span> load_digits<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> digits<span class="token punctuation">.</span>data<span class="token comment" spellcheck="true"># 数据探索</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看第一幅图像</span><span class="token keyword">print</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一幅图像代表的数字含义</span><span class="token keyword">print</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将第一幅图像显示出来</span>plt<span class="token punctuation">.</span>gray<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>digits<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>3. 数据处理</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分割数据，将25%的数据作为测试集，其余作为训练集（你也可以指定其他比例的数据作为训练集）</span>train_x<span class="token punctuation">,</span> test_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> test_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">,</span> digits<span class="token punctuation">.</span>target<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 采用Z-Score规范化</span>ss <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>train_ss_x <span class="token operator">=</span> ss<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span>test_ss_x <span class="token operator">=</span> ss<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>4. 模型搭建、预测与评估</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建KNN分类器</span>knn <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span> knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_ss_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span> predict_y <span class="token operator">=</span> knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_ss_x<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"KNN准确率: %.4lf"</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>5. KNN、SVM、贝叶斯和决策树的表现对比</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_digits<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 创建SVM分类器</span>svm <span class="token operator">=</span> SVC<span class="token punctuation">(</span><span class="token punctuation">)</span>svm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_ss_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span>predict_y<span class="token operator">=</span>svm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_ss_x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SVM准确率: %0.4lf'</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 采用Min-Max规范化</span>mm <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>train_mm_x <span class="token operator">=</span> mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span>test_mm_x <span class="token operator">=</span> mm<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Naive Bayes分类器</span>mnb <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span>mnb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_mm_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span> predict_y <span class="token operator">=</span> mnb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_mm_x<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"多项式朴素贝叶斯准确率: %.4lf"</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建CART决策树分类器</span>dtc <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>dtc<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_mm_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span> predict_y <span class="token operator">=</span> dtc<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_mm_x<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CART决策树准确率: %.4lf"</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、K均值聚类（K-Means）"><a href="#五、K均值聚类（K-Means）" class="headerlink" title="五、K均值聚类（K-Means）"></a>五、K均值聚类（K-Means）</h3><h4 id="I、基本原理-2"><a href="#I、基本原理-2" class="headerlink" title="I、基本原理"></a>I、基本原理</h4><p>初始数据集：<br><img src="https://img-blog.csdnimg.cn/20200723131355117.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>首先我们将每条记录映射成一个多维空间内的点，并随机选择K个点作为中心点，随后通过遍历各点分别计算距离中日韩三点的距离，选择距离最近的对应中心点作为归属类别，这样我们得到了就是以K个中心点为基础扩展而来的K个点集，接下来我们再以平均值的形式计算K个点集中的新的中心点，并不断重复上述的步骤，直至每一个点的分类结果不改变。<br>具体而言，我们需要先对初始数据集中记录的每一个特征进行规范化，得<br><img src="https://img-blog.csdnimg.cn/20200723135307319.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>计算每一个点到中国、日本和韩国中心点的距离，并进行分类划分。<br><img src="https://img-blog.csdnimg.cn/20200723135641258.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>在得到的多个类别点集中，再次计算出各点集的新中心点。重复操作，直至分类结果不变，亦或者中心点位置不变，得到最终的聚类结果。<br><img src="https://img-blog.csdnimg.cn/20200723135909702.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="II、图像分割实战"><a href="#II、图像分割实战" class="headerlink" title="II、图像分割实战"></a>II、图像分割实战</h4><h5>1. 初始数据集</h5><p><img src="https://img-blog.csdnimg.cn/20200723140411148.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h5>2. 数据加载</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载图像，并对数据进行规范化</span><span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读文件</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 得到图像的像素值</span>    img <span class="token operator">=</span> image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 得到图像尺寸</span>    width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>size    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 得到点(x,y)的三个通道值</span>            c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3 <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">]</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 采用Min-Max规范化</span>    mm <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token comment" spellcheck="true"># 加载图像，得到规范化的结果img，以及图像尺寸</span>img<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token string">'./weixin.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>3. 模型搭建</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用K-Means对图像进行2聚类</span>kmeans <span class="token operator">=</span>KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>kmeans<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>img<span class="token punctuation">)</span>label <span class="token operator">=</span> kmeans<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将图像聚类结果，转化成图像尺寸的矩阵</span>label <span class="token operator">=</span> label<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span>width<span class="token punctuation">,</span> height<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>4. 结果二颜色可视化</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建个新图像pic_mark，用来保存图像聚类的结果，并设置不同的灰度值</span>pic_mark <span class="token operator">=</span> image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 根据类别设置图像灰度, 类别0 灰度值为255， 类别1 灰度值为127</span>        pic_mark<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">/</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>pic_mark<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"weixin_mark.jpg"</span><span class="token punctuation">,</span> <span class="token string">"JPEG"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>5. 结果十六颜色可视化</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> skimage <span class="token keyword">import</span> color<span class="token comment" spellcheck="true"># 将聚类标识矩阵转化为不同颜色的矩阵</span>label_color <span class="token operator">=</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span>label2rgb<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>label_color <span class="token operator">=</span> label_color<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>images <span class="token operator">=</span> image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>label_color<span class="token punctuation">)</span>images<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'weixin_mark_color.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5></h5><h5></h5><h3 id="六、EM聚类"><a href="#六、EM聚类" class="headerlink" title="六、EM聚类"></a>六、EM聚类</h3><h4 id="I、基本原理-3"><a href="#I、基本原理-3" class="headerlink" title="I、基本原理"></a>I、基本原理</h4><p>通常，我们可以假设样本是符合高斯分布的，每个高斯分布都属于这个模型的组成部分，要分成 K 类就相当于是 K 个组成部分。<br>这样我们可以先初始化每个组成部分的高斯分布的参数，然后再看来每个样本是属于哪个组成部分。这也就是 E 步骤。<br>再通过得到的这些隐含变量结果，反过来求每个组成部分高斯分布的参数，即 M 步骤。反复 EM 步骤，直到每个组成部分的高斯分布参数不变为止，得到最终的聚类结果。</p><p>EM 算法相当于一个框架（最大似然估计法），可以采用不同的模型来进行聚类，比如 GMM（高斯混合模型），或者 HMM（隐马尔科夫模型）来进行聚类。</p><h4 id="II、王者荣耀角色聚类实战"><a href="#II、王者荣耀角色聚类实战" class="headerlink" title="II、王者荣耀角色聚类实战"></a>II、王者荣耀角色聚类实战</h4><p>收集王者荣耀不同英雄的基本特征数据集，并在该数据集中实现聚类的效果。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> csv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>mixture <span class="token keyword">import</span> GaussianMixture<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token comment" spellcheck="true"># 数据加载，避免中文乱码问题</span>data_ori <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./heros7.csv'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'gb18030'</span><span class="token punctuation">)</span>features <span class="token operator">=</span> <span class="token punctuation">[</span>u<span class="token string">'最大生命'</span><span class="token punctuation">,</span>u<span class="token string">'生命成长'</span><span class="token punctuation">,</span>u<span class="token string">'初始生命'</span><span class="token punctuation">,</span>u<span class="token string">'最大法力'</span><span class="token punctuation">,</span> u<span class="token string">'法力成长'</span><span class="token punctuation">,</span>u<span class="token string">'初始法力'</span><span class="token punctuation">,</span>u<span class="token string">'最高物攻'</span><span class="token punctuation">,</span>u<span class="token string">'物攻成长'</span><span class="token punctuation">,</span>u<span class="token string">'初始物攻'</span><span class="token punctuation">,</span>u<span class="token string">'最大物防'</span><span class="token punctuation">,</span>u<span class="token string">'物防成长'</span><span class="token punctuation">,</span>u<span class="token string">'初始物防'</span><span class="token punctuation">,</span> u<span class="token string">'最大每5秒回血'</span><span class="token punctuation">,</span> u<span class="token string">'每5秒回血成长'</span><span class="token punctuation">,</span> u<span class="token string">'初始每5秒回血'</span><span class="token punctuation">,</span> u<span class="token string">'最大每5秒回蓝'</span><span class="token punctuation">,</span> u<span class="token string">'每5秒回蓝成长'</span><span class="token punctuation">,</span> u<span class="token string">'初始每5秒回蓝'</span><span class="token punctuation">,</span> u<span class="token string">'最大攻速'</span><span class="token punctuation">,</span> u<span class="token string">'攻击范围'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> data_ori<span class="token punctuation">[</span>features<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 对英雄属性之间的关系进行可视化分析</span><span class="token comment" spellcheck="true"># 设置plt正确显示中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#用来正常显示中文标签</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span> <span class="token comment" spellcheck="true">#用来正常显示负号</span><span class="token comment" spellcheck="true"># 用热力图呈现features_mean字段之间的相关性</span>corr <span class="token operator">=</span> data<span class="token punctuation">[</span>features<span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># annot=True显示每个方格的数据</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>corr<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 相关性大的属性保留一个，因此可以对属性进行降维</span>features_remain <span class="token operator">=</span> <span class="token punctuation">[</span>u<span class="token string">'最大生命'</span><span class="token punctuation">,</span> u<span class="token string">'初始生命'</span><span class="token punctuation">,</span> u<span class="token string">'最大法力'</span><span class="token punctuation">,</span> u<span class="token string">'最高物攻'</span><span class="token punctuation">,</span> u<span class="token string">'初始物攻'</span><span class="token punctuation">,</span> u<span class="token string">'最大物防'</span><span class="token punctuation">,</span> u<span class="token string">'初始物防'</span><span class="token punctuation">,</span> u<span class="token string">'最大每5秒回血'</span><span class="token punctuation">,</span> u<span class="token string">'最大每5秒回蓝'</span><span class="token punctuation">,</span> u<span class="token string">'初始每5秒回蓝'</span><span class="token punctuation">,</span> u<span class="token string">'最大攻速'</span><span class="token punctuation">,</span> u<span class="token string">'攻击范围'</span><span class="token punctuation">]</span>data <span class="token operator">=</span> data_ori<span class="token punctuation">[</span>features_remain<span class="token punctuation">]</span>data<span class="token punctuation">[</span>u<span class="token string">'最大攻速'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>u<span class="token string">'最大攻速'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> float<span class="token punctuation">(</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span>u<span class="token string">'攻击范围'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>u<span class="token string">'攻击范围'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'远程'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'近战'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 采用Z-Score规范化数据，保证每个特征维度的数据均值为0，方差为1</span>ss <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> ss<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 构造GMM聚类</span>gmm <span class="token operator">=</span> GaussianMixture<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> covariance_type<span class="token operator">=</span><span class="token string">'full'</span><span class="token punctuation">)</span>gmm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练数据</span>prediction <span class="token operator">=</span> gmm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>prediction<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将分组结果输出到CSV文件中</span>data_ori<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'分组'</span><span class="token punctuation">,</span> prediction<span class="token punctuation">)</span>data_ori<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./hero_out.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、关联规则挖掘"><a href="#七、关联规则挖掘" class="headerlink" title="七、关联规则挖掘"></a>七、关联规则挖掘</h3><h4 id="I、基本原理-4"><a href="#I、基本原理-4" class="headerlink" title="I、基本原理"></a>I、基本原理</h4><p>初始数据集：<br><img src="https://img-blog.csdnimg.cn/202007250824355.png" alt><br>我们先计算单个商品的支持度，支持度是指某个商品组合出现的次数与总次数之间的比例，也就是说支持度越高，代表这个组合出现的概率越大。<br>|商品项集|支持度  |<br>|–|–|<br>| 牛奶 | 4/5  |<br>| 面包 | 4/5 |<br>|尿布  | 5/5 |<br>|可乐  | 2/5 |<br>| 啤酒 | 3/5 |<br>|鸡蛋  | 1/5 |<br>进一步筛选，筛选的阀值这里假设为0.5，也就是最小支持度，筛选后的结果只有支持度大于等于这个值的集合。<br>|商品项集|支持度  |<br>|–|–|<br>| 牛奶 | 4/5  |<br>| 面包 | 4/5 |<br>|尿布  | 5/5 |<br>| 啤酒 | 3/5 |<br>在这个基础上，我们再将商品两两组合，得到 k=2 项的支持度。<br>|商品项集|支持度  |<br>|–|–|<br>| 牛奶 、面包| 3/5  |<br>| 牛奶、尿布 | 1/5 |<br>|牛奶、啤酒 | 2/5 |<br>|面包、尿布 | 4/5 |<br>| 面包、啤酒 | 2/5 |<br>|尿布、啤酒  | 3/5 |<br>再次筛掉小于最小值支持度的商品组合。<br>|商品项集|支持度  |<br>|–|–|<br>| 牛奶 、面包| 3/5  |<br>|面包、尿布 | 4/5 |<br>|尿布、啤酒  | 3/5 |<br>再对商品进行K=3项的组合。<br>|商品项集|支持度  |<br>|–|–|<br>| 牛奶 、面包、尿布| 3/5  |<br>|面包、尿布、啤酒 | 2/5 |<br>|牛奶、面包、啤酒  | 1/5 |<br>再次筛选。<br>|商品项集|支持度  |<br>|–|–|<br>| 牛奶 、面包、尿布| 3/5  |<br>发现进行K=4的商品组合的支持度计算，结果为空，此时算法结束。</p><p>上述每一个经过筛选的结果项集都是频繁项集，频繁项集就是支持度大于等于最小支持度 (Min Support) 阈值的项集，因此Apriori 算法其实就是查找频繁项集 (frequent itemset) 的过程。<br>其中，除了支持度这个概念，关联规则还涉及置信度和提升度。置信度是一个条件概率，就是在 A 发生的情况下，B 发生的概率是多少。而提升度代表的是“商品 A 的出现，对商品 B 的出现概率提升了多少”。</p><h4 id="II、导演选择演员的偏好探索实战"><a href="#II、导演选择演员的偏好探索实战" class="headerlink" title="II、导演选择演员的偏好探索实战"></a>II、导演选择演员的偏好探索实战</h4><h5>1. 数据抓取</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># 下载某个导演的电影数据集</span><span class="token keyword">from</span> efficient_apriori <span class="token keyword">import</span> apriori<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> csvdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置想要下载的导演 数据集</span>director <span class="token operator">=</span> u<span class="token string">'宁浩'</span><span class="token comment" spellcheck="true"># 写CSV文件</span>file_name <span class="token operator">=</span> <span class="token string">'./'</span> <span class="token operator">+</span> director <span class="token operator">+</span> <span class="token string">'.csv'</span>base_url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/subject_search?search_text='</span><span class="token operator">+</span>director<span class="token operator">+</span><span class="token string">'&amp;cat=1002&amp;start='</span>out <span class="token operator">=</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span>csv_write <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>out<span class="token punctuation">,</span> dialect<span class="token operator">=</span><span class="token string">'excel'</span><span class="token punctuation">)</span>flags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 下载指定页面的数据</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>request_url<span class="token punctuation">)</span><span class="token punctuation">:</span>  driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request_url<span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  html <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span>  html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置电影名称，导演演员 的XPATH</span>  movie_lists <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div[@id='wrapper']/div[@id='root']/div[1]//div[@class='item-root']/div[@class='detail']/div[@class='title']/a[@class='title-text']"</span><span class="token punctuation">)</span>  name_lists <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/html/body/div[@id='wrapper']/div[@id='root']/div[1]//div[@class='item-root']/div[@class='detail']/div[@class='meta abstract_2']"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取返回的数据个数</span>  num <span class="token operator">=</span> len<span class="token punctuation">(</span>movie_lists<span class="token punctuation">)</span>  <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#第一页会有16条数据</span>    <span class="token comment" spellcheck="true"># 默认第一个不是，所以需要去掉</span>    movie_lists <span class="token operator">=</span> movie_lists<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    name_lists <span class="token operator">=</span> name_lists<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>movie<span class="token punctuation">,</span> name_list<span class="token punctuation">)</span> <span class="token keyword">in</span> zip<span class="token punctuation">(</span>movie_lists<span class="token punctuation">,</span> name_lists<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 会存在数据为空的情况</span>    <span class="token keyword">if</span> name_list<span class="token punctuation">.</span>text <span class="token keyword">is</span> None<span class="token punctuation">:</span>       <span class="token keyword">continue</span>    <span class="token comment" spellcheck="true"># 显示下演员名称</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name_list<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    names <span class="token operator">=</span> name_list<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断导演是否为指定的director</span>    <span class="token keyword">if</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> director <span class="token operator">and</span> movie<span class="token punctuation">.</span>text <span class="token operator">not</span> <span class="token keyword">in</span> flags<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 将第一个字段设置为电影名称</span>      names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> movie<span class="token punctuation">.</span>text      flags<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie<span class="token punctuation">.</span>text<span class="token punctuation">)</span>      csv_write<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>names<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 代表这页数据下载成功</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token keyword">if</span> num <span class="token operator">>=</span> <span class="token number">14</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#有可能一页会有14个电影</span>    <span class="token comment" spellcheck="true"># 继续下一页</span>    <span class="token keyword">return</span> <span class="token boolean">True</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 没有下一页</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 开始的ID为0，每页增加15</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> start<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#最多抽取1万部电影</span>  request_url <span class="token operator">=</span> base_url <span class="token operator">+</span> str<span class="token punctuation">(</span>start<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 下载数据，并返回是否有下一页</span>  flag <span class="token operator">=</span> download<span class="token punctuation">(</span>request_url<span class="token punctuation">)</span>  <span class="token keyword">if</span> flag<span class="token punctuation">:</span>    start <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">15</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">break</span>out<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finished'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200725085714401.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h5>2. 模型搭建，输出频繁项集和频繁规则</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> efficient_apriori <span class="token keyword">import</span> apriori<span class="token keyword">import</span> csvdirector <span class="token operator">=</span> u<span class="token string">'宁浩'</span>file_name <span class="token operator">=</span> <span class="token string">'./'</span><span class="token operator">+</span>director<span class="token operator">+</span><span class="token string">'.csv'</span>lists <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据加载</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> names <span class="token keyword">in</span> lists<span class="token punctuation">:</span>     name_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 去掉演员数据中的空格</span>           name_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name_new<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 挖掘频繁项集和关联规则</span>itemsets<span class="token punctuation">,</span> rules <span class="token operator">=</span> apriori<span class="token punctuation">(</span>data<span class="token punctuation">,</span> min_support<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>  min_confidence<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>itemsets<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020072509001546.png" alt><br>可以看出，宁浩导演喜欢用徐峥和黄渤，并且有徐峥的情况下，一般都会用黄渤。</p><h3 id="八、网页排名（PageRank）"><a href="#八、网页排名（PageRank）" class="headerlink" title="八、网页排名（PageRank）"></a>八、网页排名（PageRank）</h3><h4 id="I、基本原理-5"><a href="#I、基本原理-5" class="headerlink" title="I、基本原理"></a>I、基本原理</h4><p>当我们在搜索引擎填写关键字得到的结果页面中，页面之间的排序顺序主要是由这个页面的影响力来决定的，一般而言，页面的影响力越大排名越在前面。<br>页面的影响力的计算公式如下：<br>$$PR(u)=\sum_{v \in B_u}{\frac{PR(v)}{L(v)}}$$<br>其中，$u$ 为待评估的页面，$Bu$​ 为页面$u$ 的入链集合。针对入链集合中的任意页面 $v$，它能给 $u$带来的影响力是其自身的影响力$PR(v)$除以$v$页面的出链数量，即页面 $v$把影响力$PR(v)$ 平均分配给了它的出链。</p><p>具体而言的话，假设我们现在有四个页面，它们之间的相互引用关系如下：<br><img src="https://img-blog.csdnimg.cn/20200725094927213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>我们可以知道当用户访问 A 的时候，跳转到 B、C 或者 D 的可能性均为 1/3，同理对B、C和D也能分别得到一个4X1的矩阵，将这些矩阵进行列拼接可以得到这四个页面的转移矩阵$M$。<br>,<center><img src="https://img-blog.csdnimg.cn/20200725095353468.png" alt></center><br>我们再假设每个页面的初始影响力都是平均的，即都是1/4，那么我么可以得到一个4X1的页面影响力矩阵$W_0$。</p><p>,<center><br><img src="https://img-blog.csdnimg.cn/20200725095702500.png" alt></center></p>将两个矩阵进行相乘，得到第一次转移后各页面的影响力。<p>，<center><br><img src="https://img-blog.csdnimg.cn/20200725100022238.png" alt></center></p><p>不断用新的$w_i$来乘以$M$直至 $w_i$的值不再发生变化，此时$w_i$的值就是各页面最终平衡状态下的影响力，在这里结果为$(0.3333,0.2222,0.2222,0.2222)$。<br>根据结果可知，A页面的影响力相对较大，因此其在排名中应位于最靠前的位置上。</p><h4 id="II、希拉里邮件中的人物关系分析实战"><a href="#II、希拉里邮件中的人物关系分析实战" class="headerlink" title="II、希拉里邮件中的人物关系分析实战"></a>II、希拉里邮件中的人物关系分析实战</h4><p>通过 PageRank 算法计算每个人物在邮件关系网络中的权重，最后筛选出来最有价值的人物来进行关系网络图的绘制。</p><h5>1. 初始数据集</h5><p>Alises.csv：别名和人物的对应关系<br>Emails.csv：所有公开邮件的内容，发送者和接收者的信息<br>Persons.csv： 邮件中所有人物的姓名及对应的 ID</p><h5>2. 代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># 用 PageRank 挖掘希拉里邮件中的重要任务关系</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> networkx <span class="token keyword">as</span> nx<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 数据加载</span>emails <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./input/Emails.csv"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取别名文件</span>file <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./input/Aliases.csv"</span><span class="token punctuation">)</span>aliases <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> file<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    aliases<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token string">'Alias'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'PersonId'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 读取人名文件</span>file <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./input/Persons.csv"</span><span class="token punctuation">)</span>persons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> file<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    persons<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token string">'Id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 针对别名进行转换        </span><span class="token keyword">def</span> <span class="token function">unify_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 姓名统一小写</span>    name <span class="token operator">=</span> str<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 去掉, 和 @后面的内容</span>    name <span class="token operator">=</span> name<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 别名转换</span>    <span class="token keyword">if</span> name <span class="token keyword">in</span> aliases<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> persons<span class="token punctuation">[</span>aliases<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> name<span class="token comment" spellcheck="true"># 画网络图</span><span class="token keyword">def</span> <span class="token function">show_graph</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token string">'spring_layout'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 使用 Spring Layout 布局，类似中心放射状</span>    <span class="token keyword">if</span> layout <span class="token operator">==</span> <span class="token string">'circular_layout'</span><span class="token punctuation">:</span>        positions<span class="token operator">=</span>nx<span class="token punctuation">.</span>circular_layout<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        positions<span class="token operator">=</span>nx<span class="token punctuation">.</span>spring_layout<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置网络图中的节点大小，大小与 pagerank 值相关，因为 pagerank 值很小所以需要 *20000</span>    nodesize <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token string">'pagerank'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">20000</span> <span class="token keyword">for</span> v<span class="token punctuation">,</span>x <span class="token keyword">in</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 设置网络图中的边长度</span>    edgesize <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> e <span class="token keyword">in</span> graph<span class="token punctuation">.</span>edges<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 绘制节点</span>    nx<span class="token punctuation">.</span>draw_networkx_nodes<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> positions<span class="token punctuation">,</span> node_size<span class="token operator">=</span>nodesize<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绘制边</span>    nx<span class="token punctuation">.</span>draw_networkx_edges<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> positions<span class="token punctuation">,</span> edge_size<span class="token operator">=</span>edgesize<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绘制节点的 label</span>    nx<span class="token punctuation">.</span>draw_networkx_labels<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> positions<span class="token punctuation">,</span> font_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出希拉里邮件中的所有人物关系图</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将寄件人和收件人的姓名进行规范化</span>emails<span class="token punctuation">.</span>MetadataFrom <span class="token operator">=</span> emails<span class="token punctuation">.</span>MetadataFrom<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>unify_name<span class="token punctuation">)</span>emails<span class="token punctuation">.</span>MetadataTo <span class="token operator">=</span> emails<span class="token punctuation">.</span>MetadataTo<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>unify_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置遍的权重等于发邮件的次数</span>edges_weights_temp <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> zip<span class="token punctuation">(</span>emails<span class="token punctuation">.</span>MetadataFrom<span class="token punctuation">,</span> emails<span class="token punctuation">.</span>MetadataTo<span class="token punctuation">,</span> emails<span class="token punctuation">.</span>RawText<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> temp <span class="token operator">not</span> <span class="token keyword">in</span> edges_weights_temp<span class="token punctuation">:</span>        edges_weights_temp<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        edges_weights_temp<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> edges_weights_temp<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 转化格式 (from, to), weight => from, to, weight</span>edges_weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> edges_weights_temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 创建一个有向图</span>graph <span class="token operator">=</span> nx<span class="token punctuation">.</span>DiGraph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置有向图中的路径及权重 (from, to, weight)</span>graph<span class="token punctuation">.</span>add_weighted_edges_from<span class="token punctuation">(</span>edges_weights<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计算每个节点（人）的 PR 值，并作为节点的 pagerank 属性</span>pagerank <span class="token operator">=</span> nx<span class="token punctuation">.</span>pagerank<span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将 pagerank 数值作为节点的属性</span>nx<span class="token punctuation">.</span>set_node_attributes<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'pagerank'</span><span class="token punctuation">,</span> values<span class="token operator">=</span>pagerank<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画网络图</span>show_graph<span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将完整的图谱进行精简</span><span class="token comment" spellcheck="true"># 设置 PR 值的阈值，筛选大于阈值的重要核心节点</span>pagerank_threshold <span class="token operator">=</span> <span class="token number">0.005</span><span class="token comment" spellcheck="true"># 复制一份计算好的网络图</span>small_graph <span class="token operator">=</span> graph<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 剪掉 PR 值小于 pagerank_threshold 的节点</span><span class="token keyword">for</span> n<span class="token punctuation">,</span> p_rank <span class="token keyword">in</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p_rank<span class="token punctuation">[</span><span class="token string">'pagerank'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> pagerank_threshold<span class="token punctuation">:</span>         small_graph<span class="token punctuation">.</span>remove_node<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画网络图,采用circular_layout布局让筛选出来的点组成一个圆</span>show_graph<span class="token punctuation">(</span>small_graph<span class="token punctuation">,</span> <span class="token string">'circular_layout'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200725100858421.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><center><p><img src="https://img-blog.csdnimg.cn/20200725100914314.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p></center><p></p><h3 id="九、增强学习（Adaboost）"><a href="#九、增强学习（Adaboost）" class="headerlink" title="九、增强学习（Adaboost）"></a>九、增强学习（Adaboost）</h3><h4 id="I、基本原理-6"><a href="#I、基本原理-6" class="headerlink" title="I、基本原理"></a>I、基本原理</h4><p>初始数据集：<br>| X | 0 |1 | 2 |   3 | 4| 5|6 |7 |8 | 9|<br>|–|–|– | – |  –  |– | –| –| –| –| –|<br>| Y | 1 | 1| 1 |  -1  | -1|-1 |1 | 1| 1| -1|<br>假设第一轮训练中，我们得到10个样本的权重都是均匀的，那么整个样本集的权重矩阵$D_1=(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)$，同时假设我们已经获得了三个基础分类器$f_i(x)$.<br>$$<br>f_1(x)= \left\{ \begin{array}{ll}<br>            1, &amp; x \leq 2.5\<br>            -1, &amp; x &gt; 2.5<br>            \end{array} \right.  \quad;\quad<br>f_2(x)= \left\{ \begin{array}{ll}<br>            -1, &amp; x \leq 5.5\<br>            1, &amp; x &gt; 5.5<br>            \end{array} \right.     \quad    ;\quad<br>f_3(x)= \left\{ \begin{array}{ll}<br>            1, &amp; x \leq 8.5\<br>            -1, &amp; x &gt; 8.5<br>            \end{array} \right.<br>$$<br>依次将X值带入分类器中，使得到的结果与实际对应的Y值对比，可以知道$f_1、f_2、f_3$的错误率分别为0.3、0.4和0.3，此时我们选择错误率最小的$f_1、f_3$中任选一个作为最优分类器，这里我们选择$f_1$，即$G_1=f_1$，并通过下面的公式计算该最优分类器的权重$\alpha_1=0.4236$。<br>$$<br>\alpha_i=\frac{1}{2}log{\frac{1-e_i}{e_i}}<br>$$<br>再进一步利用下面的公式更新每一个样本的权重，即最新的样本集权重矩阵$D_2=(0.0715, 0.0715, 0.0715, 0.0715, 0.0715, 0.0715, 0.1666, 0.1666, 0.1666, 0.0715)$。<br>$$<br>D_{k+1}=(w_{k+1,1},w_{k+1,2},\dots,w_{k+1,N})  \<br>w_{k+1,i}=\frac{w_{k,i}}{Z_k}exp(-\alpha_ky_iG_k(x_i)),i=1,2,\dots,N<br>$$<br>其中$w_{k+1,i}$指的是在$k+1$轮训练中第$i$个样本的权重。<br>接下来开始第二轮训练，重复上述的操作，$f_1、f_2、f_3$的错误率分别为0.1666<em>3、 0.0715</em>4和0.0715*3，此时我们选择错误率最小的$f_3$作为最优分类器，即$G_2=f_3$，并计算出了$\alpha_2=0.6496$、$D_3=(0.0455,0.0455,0.0455,0.1667, 0.1667,0.01667,0.1060, 0.1060, 0.1060, 0.0455)$。<br>开始第三轮，仍然是重复操作，得到$G_3=f_2、\alpha_3=0.7514$。此时得到最终的强分类器$G(x) = 0.4236G1(x) + 0.6496G2(x)+0.7514G3(x)$。</p><h4 id="II、房价预测实战"><a href="#II、房价预测实战" class="headerlink" title="II、房价预测实战"></a>II、房价预测实战</h4><h5>1. 初始数据集</h5><p><img src="https://img-blog.csdnimg.cn/20200725153144889.png?x-oss-process=ype_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h5>2. 代码实现</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_boston<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> AdaBoostRegressor<span class="token comment" spellcheck="true"># 加载数据</span>data<span class="token operator">=</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分割数据</span>train_x<span class="token punctuation">,</span> test_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> test_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>target<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用AdaBoost回归模型</span>regressor<span class="token operator">=</span>AdaBoostRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>regressor<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span>pred_y <span class="token operator">=</span> regressor<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> pred_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"房价预测结果 "</span><span class="token punctuation">,</span> pred_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"均方误差 = "</span><span class="token punctuation">,</span>round<span class="token punctuation">(</span>mse<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用决策树回归模型</span>dec_regressor<span class="token operator">=</span>DecisionTreeRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>dec_regressor<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span>pred_y <span class="token operator">=</span> dec_regressor<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> pred_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"决策树均方误差 = "</span><span class="token punctuation">,</span>round<span class="token punctuation">(</span>mse<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用KNN回归模型</span>knn_regressor<span class="token operator">=</span>KNeighborsRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>knn_regressor<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span>pred_y <span class="token operator">=</span> knn_regressor<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>mse <span class="token operator">=</span> mean_squared_error<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> pred_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"KNN均方误差 = "</span><span class="token punctuation">,</span>round<span class="token punctuation">(</span>mse<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5>3. 模型的对比</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> zero_one_loss<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span>  AdaBoostClassifier<span class="token comment" spellcheck="true"># 设置AdaBoost迭代次数</span>n_estimators<span class="token operator">=</span><span class="token number">200</span><span class="token comment" spellcheck="true"># 使用</span>X<span class="token punctuation">,</span>y<span class="token operator">=</span>datasets<span class="token punctuation">.</span>make_hastie_10_2<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">12000</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从12000个数据中取前2000行作为测试集，其余作为训练集</span>train_x<span class="token punctuation">,</span> train_y <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">:</span><span class="token punctuation">]</span>test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 弱分类器</span>dt_stump <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>min_samples_leaf<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>dt_stump<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span>dt_stump_err <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">-</span>dt_stump<span class="token punctuation">.</span>score<span class="token punctuation">(</span>test_x<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 决策树分类器</span>dt <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>dt<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>  train_y<span class="token punctuation">)</span>dt_err <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">-</span>dt<span class="token punctuation">.</span>score<span class="token punctuation">(</span>test_x<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># AdaBoost分类器</span>ada <span class="token operator">=</span> AdaBoostClassifier<span class="token punctuation">(</span>base_estimator<span class="token operator">=</span>dt_stump<span class="token punctuation">,</span>n_estimators<span class="token operator">=</span>n_estimators<span class="token punctuation">)</span>ada<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>  train_y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 三个分类器的错误率可视化</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置plt正确显示中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>n_estimators<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>dt_stump_err<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'k-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span>u<span class="token string">'决策树弱分类器 错误率'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>n_estimators<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>dt_err<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'k--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span>u<span class="token string">'决策树模型 错误率'</span><span class="token punctuation">)</span>ada_err <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_estimators<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 遍历每次迭代的结果 i为迭代次数, pred_y为预测结果</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>pred_y <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>ada<span class="token punctuation">.</span>staged_predict<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 统计错误率</span>    ada_err<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>zero_one_loss<span class="token punctuation">(</span>pred_y<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制每次迭代的AdaBoost错误率 </span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>n_estimators<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> ada_err<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'AdaBoost Test 错误率'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'orange'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'迭代次数'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'错误率'</span><span class="token punctuation">)</span>leg<span class="token operator">=</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">,</span>fancybox<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200725153424822.png?x-oss-process=type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>从图中可以看出，弱分类器的错误率最高，只比随机分类结果略好，准确率稍微大于 50%。决策树模型的错误率明显要低很多。 AdaBoost 模型在迭代次数超过 25 次之后，错误率有了明显下降，经过 125 次迭代之后错误率的变化形势趋于平缓。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Python进行数据分析及思维导图</title>
      <link href="/2020/06/25/li-yong-python-jin-xing-shu-ju-fen-xi-ji-si-wei-dao-tu/"/>
      <url>/2020/06/25/li-yong-python-jin-xing-shu-ju-fen-xi-ji-si-wei-dao-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：机械工业出版社的《利用Python进行数据分析》（思维导图在最后面）"><a href="#参考资料：机械工业出版社的《利用Python进行数据分析》（思维导图在最后面）" class="headerlink" title="参考资料：机械工业出版社的《利用Python进行数据分析》（思维导图在最后面）"></a>参考资料：机械工业出版社的《利用Python进行数据分析》（思维导图在最后面）</h1><h3 id="第一章-准备工作"><a href="#第一章-准备工作" class="headerlink" title="第一章 准备工作"></a>第一章 准备工作</h3><h4 id="I、为何利用Python进行数据分析"><a href="#I、为何利用Python进行数据分析" class="headerlink" title="I、为何利用Python进行数据分析"></a>I、为何利用Python进行数据分析</h4><ol><li>Python作为胶水，很容易整合C、C++和FORTRAN等语言的代码</li><li>Python不但适用于研究和原型实现，也适合搭建生产系统，可以同时兼顾研究人员和软件工程师</li><li>Python简洁明了，同一任务可以用更少的代码实现并具有强大的代码可读性<h4 id="II、重要的Python库"><a href="#II、重要的Python库" class="headerlink" title="II、重要的Python库"></a>II、重要的Python库</h4></li><li>Numpy：全称为Numerical Python，是Python数值计算的基石。它赋予了Python快速数组处理能力并充当算法和库之间作为数据传递的数据容器</li><li>pandas：提供了高级数据结构和函数，使得表格化数据的工作快速、简单和有表现力，在数据分析中的数据操作、预处理、清洗等方面扮演重要的角色</li><li>matplotlib：是最流行的用于制图及其他二维数据可视化的Python库，与生态系统的其他库良好整合，是一个安全的默认可视化工具</li><li>SciPy：是科学计算领域针对不同标准问题域的包集合，如数值积分求解、概率分布等</li><li>scikit-learn：Python编程者首选的机器学习工具包，包含分类、回归、降维、预处理等模块</li><li>statsmodels：是一个统计分析包，相比scikit-learn，其包含了经典的统计学、经济学算法，如回归模型、时间序列分析等。<h3 id="第二章-Python语言基础、IPython及Jupyter-notebook"><a href="#第二章-Python语言基础、IPython及Jupyter-notebook" class="headerlink" title="第二章 Python语言基础、IPython及Jupyter notebook"></a>第二章 Python语言基础、IPython及Jupyter notebook</h3><h4 id="I、IPython基础"><a href="#I、IPython基础" class="headerlink" title="I、IPython基础"></a>I、IPython基础</h4></li><li>Tab补全：对方法、对属性、对文件路径、对函数的关键字参数进行补全</li><li>？内省：在变量名、函数的前后使用问号？，可以显示一些关于该对象的概要信息</li><li>？？内省：在函数名前后使用？？，可以显示函数的源代码</li><li>%run命令：在IPython会话中使用%run命令运行任意的Python程序文件</li><li>%load命令：在IPython会话中将Python文件导入成一个独立的代码单元</li><li>Ctril+C：强制中断Python进程</li><li>%matplotlib inline：在使用matplotlib库函数绘画时，必须实现填写该命令，否则可能绘图失败<h4 id="II、Python语言基础"><a href="#II、Python语言基础" class="headerlink" title="II、Python语言基础"></a>II、Python语言基础</h4></li><li>在Python中使用缩进来组织代码，而非Java中使用大括号，推荐使用四个空格，而非Tab</li><li>使用‘#’作为注释符号，所在写在#号的文本会自动被Python解释器忽略</li><li>参数传递，默认使用的是如Java的引用，而非值拷贝</li><li>在Python编写过程中，使用import some_module as sm 来导入库，或者使用 from some_module import PI as pi来导入变量或函数</li><li>可以用is关键字来检查两个引用是否指向同一个对象，而==关键字只能判断值的是否相同</li><li>Python的标量类型有None、str、bytes、float、bool和int</li><li>Python的字符串是不可变的，因此无法修改一个字符串，否者会抛出异常</li><li>如果字符串中需要输出反斜杠符号，可以在字符串前面添加r符号，如r‘this\has’等价于’this\\\has’</li><li>字符串编码成字节流，字节流解码成字符串</li><li>Python的布尔值写作True和False，日期时间的类对应是datetime </li><li>if-elif-else控制流：<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>printf<span class="token punctuation">(</span><span class="token string">'XXX1'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> printf<span class="token punctuation">(</span><span class="token string">'XXX2'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">0</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>printf<span class="token punctuation">(</span><span class="token string">'XXX3'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>printf<span class="token punctuation">(</span><span class="token string">'XXX4'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>for循环控制流：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> value <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#用值做些什么</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="13"><li>while循环控制流：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#用值做些什么</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="14"><li>pass语句：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'XXX'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span><span class="token keyword">else</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'XXX2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三章-内建数据结构、函数及文件"><a href="#第三章-内建数据结构、函数及文件" class="headerlink" title="第三章 内建数据结构、函数及文件"></a>第三章 内建数据结构、函数及文件</h3><h4 id="I、元组"><a href="#I、元组" class="headerlink" title="I、元组"></a>I、元组</h4><ol><li>元组是一个固定长度、不可变的Python对象序列</li><li>元组创建方法有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token number">2</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>元组拆包操作有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> tup <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> tup<span class="token number">2</span><span class="token punctuation">.</span> a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">.</span> a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a<span class="token number">4</span><span class="token punctuation">.</span> seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token keyword">in</span> seq<span class="token punctuation">:</span> XXXX<span class="token number">5</span><span class="token punctuation">.</span> values <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span>   a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>rest <span class="token operator">=</span> values<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>元组自身的方法调用有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="II、列表"><a href="#II、列表" class="headerlink" title="II、列表"></a>II、列表</h4><ol><li>列表的长度是可变的，它所包含的内容也是可以修改的。</li><li>列表创建方法有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>None<span class="token punctuation">]</span><span class="token number">2</span><span class="token punctuation">.</span> a_list <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">,</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> a_list <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>None<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token number">5</span><span class="token punctuation">.</span> a_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>None<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>列表自身的方法调用有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> a_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'dwarf'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> a_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'read'</span><span class="token punctuation">)</span> 【注<span class="token punctuation">:</span><span class="token number">1</span>指的是索引<span class="token number">1</span>】<span class="token number">3</span><span class="token punctuation">.</span> a_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> a_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span> a_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token punctuation">.</span> a_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span>  <span class="token number">7</span><span class="token punctuation">.</span> <span class="token string">'dwarf'</span> <span class="token keyword">in</span> a_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="III、切片"><a href="#III、切片" class="headerlink" title="III、切片"></a>III、切片</h4><ol><li>使用切片符号对大多数序列类型选取其子集，包括列表和元组</li><li>使用方法有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> seq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    【注：集合关系为<span class="token punctuation">[</span>Start<span class="token punctuation">,</span>stop<span class="token punctuation">)</span>】<span class="token number">2</span><span class="token punctuation">.</span> seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">.</span> seq<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     【注：若seq为<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>那么它的索引数组分别有<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>和<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>】<span class="token number">4</span><span class="token punctuation">.</span> seq<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token number">5</span><span class="token punctuation">.</span> seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">6</span><span class="token punctuation">.</span> seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    【可实现序列的翻转】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IV、内建序列函数"><a href="#IV、内建序列函数" class="headerlink" title="IV、内建序列函数"></a>IV、内建序列函数</h4><ol><li>enumerate函数：用于在遍历一个序列的同时追踪当前元素的索引</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span>value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">:</span>    XXXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>sorted函数：用于返回一个根据任意序列中的元素新建的已排序列表</li></ol><pre class="line-numbers language-python"><code class="language-python">sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">or</span> sorted<span class="token punctuation">(</span><span class="token string">'horse race'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>zip函数：用于将列表、元组或其他序列的元素配对，新建一个元组构成的列表</li></ol><pre class="line-numbers language-python"><code class="language-python">seq1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token punctuation">,</span><span class="token string">'baz'</span><span class="token punctuation">]</span>seq2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span> zipped <span class="token operator">=</span> zip<span class="token punctuation">(</span>seq1<span class="token punctuation">,</span>seq2<span class="token punctuation">)</span>        【注：它生成的列表长度由最短的子序列决定，在这里是指seq1的长度<span class="token number">3</span>】list<span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>reversed函数：用于将序列的元素倒序排列</li></ol><pre class="line-numbers language-python"><code class="language-python">list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="V、字典"><a href="#V、字典" class="headerlink" title="V、字典"></a>V、字典</h4><ol><li>字典是拥有灵活尺寸的键值对集合，它采用了哈希表的算法，其中键和值可以都为Python对象，但要求键必须是不可变的对象，如元组</li><li>字典创建操作有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> a_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'some value'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span> a_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>reversed<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    【结果为<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>字典自带方法有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> a_dict<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'an integer'</span><span class="token number">2</span><span class="token punctuation">.</span> a_dict<span class="token punctuation">[</span>tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">del</span> a_dict<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token number">4</span><span class="token punctuation">.</span> ret <span class="token operator">=</span> a_dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span> list<span class="token punctuation">(</span>a_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">or</span> list<span class="token punctuation">(</span>a_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token punctuation">.</span> <span class="token string">'b'</span> <span class="token keyword">in</span> a_dict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="VI、集合"><a href="#VI、集合" class="headerlink" title="VI、集合"></a>VI、集合</h4><ol><li>集合是一种无序、元素唯一且不可变的容器，且仅当两个集合的内容完全一模一样时，两个集合才相等（==）</li><li>集合的创建操作有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> col <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【结果为<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>】<span class="token number">2</span><span class="token punctuation">.</span> col <span class="token operator">=</span> <span class="token punctuation">{</span>tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    【结果为<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span>，注：元素只有一个】<span class="token number">3</span><span class="token punctuation">.</span> newCol <span class="token operator">=</span> col<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>集合自带的方法有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> a<span class="token punctuation">.</span>union<span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token operator">or</span> a<span class="token operator">|</span>b<span class="token number">2</span><span class="token punctuation">.</span> a<span class="token operator">&amp;</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="VI、列表、集合与字典的推导式"><a href="#VI、列表、集合与字典的推导式" class="headerlink" title="VI、列表、集合与字典的推导式"></a>VI、列表、集合与字典的推导式</h4><ol><li>列表推导式允过滤一个容器的元素，用一种简明的表达式转换传递给过滤器的元素，从而生成一个新的列表</li><li>列表推导式的基本形式：[ expr for val in collection  if condition ]</li></ol><pre class="line-numbers language-python"><code class="language-python">a_list <span class="token operator">=</span> <span class="token punctuation">[</span> x<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> strings <span class="token keyword">if</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">]</span>    【给定一个字符串列表，过滤出长度大于<span class="token number">2</span>的，并且将字母改为大写】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>集合推导式的基本形式：{ expr for value in collection if condition }</li></ol><pre class="line-numbers language-python"><code class="language-python">a_col <span class="token operator">=</span> <span class="token punctuation">{</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> strings <span class="token punctuation">}</span>    【生成包含列表中字符串的长度的集合】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>字典推导式的基本形式：{ key-expr : value-expr for value in collection if condition }</li></ol><pre class="line-numbers language-python"><code class="language-python">a_dict <span class="token operator">=</span> <span class="token punctuation">{</span> val <span class="token punctuation">:</span> index <span class="token keyword">for</span> index <span class="token punctuation">,</span>val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>strings<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>嵌套列表推导式：</li></ol><pre class="line-numbers language-python"><code class="language-python">all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'John'</span><span class="token punctuation">,</span><span class="token string">'Emily'</span><span class="token punctuation">,</span><span class="token string">'Micha'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'Stevem'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'Maria'</span><span class="token punctuation">,</span><span class="token string">'Juan'</span><span class="token punctuation">,</span><span class="token string">'Javier'</span><span class="token punctuation">,</span><span class="token string">'Natalia'</span><span class="token punctuation">,</span><span class="token string">'Pilar'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>result <span class="token operator">=</span> <span class="token punctuation">[</span> name <span class="token keyword">for</span> names <span class="token keyword">in</span> all_data <span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token keyword">if</span> name<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">]</span>    【获得一个列表包含所有含有<span class="token number">2</span>个以上字母e的名字】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="VII、函数"><a href="#VII、函数" class="headerlink" title="VII、函数"></a>VII、函数</h4><ol><li>函数是Python中最重要、最基础的代码组织和代码复用方式，一般将多次执行的重复相同的或类似的代码构建成一个可复用的函数</li><li>如果Python达到函数的尾部时仍然没有遇到return语句，那么就会自动返回None</li><li>在Python中，支持函数的形参设置默认值</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>        【其中，x和y被称作位置参数，z被称作关键字参数】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>使用Python编程时，可以使用简单的语法就能实现从函数中返回多个值</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">5</span>    b <span class="token operator">=</span> <span class="token number">6</span>    c <span class="token operator">=</span> <span class="token number">7</span>    <span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c        【注：返回一个元组】a1<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>c1 <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">5</span>    b <span class="token operator">=</span> <span class="token number">6</span>    c <span class="token operator">=</span> <span class="token number">7</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span>a<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span>b<span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span>c<span class="token punctuation">}</span>        【注：返回一个字典】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>由于Python的函数是对象，很多在其他语言中比较难的构造在Python中非常容易实现</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">remove_punctuation</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'[!@?]'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>clean_ops <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">.</span>strip<span class="token punctuation">,</span>remove_punctuation<span class="token punctuation">,</span>str<span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">clean_strings</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span>ops<span class="token punctuation">)</span><span class="token punctuation">:</span>        【将特定的列表操作应用到某个字符串的集合上】    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> strings<span class="token punctuation">:</span>        <span class="token keyword">for</span> function <span class="token keyword">in</span> ops<span class="token punctuation">:</span>            value <span class="token operator">=</span> function<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>匿名（Lambda）函数：它是一种通过单个语句生成函数的方式，其结果是返回值</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">short_function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">*</span><span class="token number">2</span>equiv_anon <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">apply_to_list</span><span class="token punctuation">(</span>some_list<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> some_list<span class="token punctuation">]</span>ints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>apply_to_list<span class="token punctuation">(</span>ints<span class="token punctuation">,</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>柯里化——部分参数应用：它表示通过部分参数应用的方式从已有的函数中衍生出新的函数</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_numbers</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> yadd_five <span class="token operator">=</span> <span class="token keyword">lambda</span> y <span class="token punctuation">:</span> add_numbers<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="8"><li>生成器：它是通过迭代器协议来实现的，迭代器协议是一种令对象可遍历的通用方式，当我们写下for key in some_dict的语句时，Python解释器首先尝试根据some_dict生成一个迭代器，大部分以列表或列表型对象为参数的方法都可以接收任意的迭代器对象，其中生成器则“惰性”地返回一个多结果序列。</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">squares</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>'XX <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token operator">**</span><span class="token number">2</span><span class="token keyword">for</span> x <span class="token keyword">in</span> squares<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>生成器表达式</li></ol><pre class="line-numbers language-python"><code class="language-python">sum<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    【结果为<span class="token number">328350</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>错误和异常处理</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">attempt_float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> float<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x<span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">attempt_float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> float<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">return</span> x<span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">attempt_float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> float<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span>ValueError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x<span class="token number">4</span><span class="token punctuation">.</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    write_to_file<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    write_to_file<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Failed'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Succeeded'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四章-Numpy基础"><a href="#第四章-Numpy基础" class="headerlink" title="第四章 Numpy基础"></a>第四章 Numpy基础</h3><p>Numpy的算法库是用C语言写的，所以在操作数据内存时，不需要任何类型检查或者其他管理操作，也使得Numpy数组使用的内存量也小于其他Python内建序列。同时Numpy可以针对全量数组进行复杂计算而不需要写Python循环。<br>具体而言，即np.arange(10000000)和list(range(10000000))同时执行遍历操作，前者的执行速度要比后者快10到100倍，且使用的内存更少。</p><h4 id="I、Numpy-ndarray——多维数组对象"><a href="#I、Numpy-ndarray——多维数组对象" class="headerlink" title="I、Numpy ndarray——多维数组对象"></a>I、Numpy ndarray——多维数组对象</h4><ol><li>ndarray的生成操作有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7.5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【以列表为参数，生成二维数组】<span class="token number">3</span><span class="token punctuation">.</span> arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    【以元组为参数，生成全为<span class="token number">0</span>的二维数组】<span class="token number">5</span><span class="token punctuation">.</span> arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        【以元组为参数，生成全为<span class="token number">0</span>的三维数组。注：相比zeros方法而言，empty方法并不一定全为<span class="token number">0</span>】<span class="token number">6</span><span class="token punctuation">.</span> arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>        【注：需与全局函数range进行辩证分析】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>ndarray的数据类型：即元数据类型dtype，它是Numpy能够与其他系统数据灵活交互的原因</li></ol><pre class="line-numbers language-python"><code class="language-python">arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1.25'</span><span class="token punctuation">,</span><span class="token string">'-9.6'</span><span class="token punctuation">,</span><span class="token string">'43'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>string_<span class="token punctuation">)</span>    【创建元素类型为string_的多维数组对象】arr1<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>        【将arr的元素类型显式转化成float类型。注：若无法转换则抛出异常】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>Numpy数组算术：它允许用户进行逐元素的批量操作而无须任何for循环，这种特性也被称作向量化 </li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> arr1 <span class="token operator">*</span> arr1<span class="token number">2</span><span class="token punctuation">.</span> arr1 <span class="token operator">-</span> arr1<span class="token number">3</span><span class="token punctuation">.</span> <span class="token number">1</span><span class="token operator">/</span>arr1<span class="token number">4</span><span class="token punctuation">.</span> arr1 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token number">5</span><span class="token punctuation">.</span> arr1 <span class="token operator">></span> arr2        【逐元素进行比较，结果为布尔数组】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>基础索引与切片：通过索引与切片所得到的视图，任何对其的修改都会反映到原数组上，除非在视图显式调用copy方法</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">12</span>        【数值为下标索引，且集合关系为<span class="token punctuation">[</span><span class="token punctuation">)</span>】arr1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">32</span>    【默认修改所有元素】<span class="token number">2</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    【返回一维数组，array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>】arr1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    【返回二维数组，array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>】arr1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        【返回部分二维数组，array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>】arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>    【与arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>等价，返回<span class="token number">3</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>布尔索引：</li></ol><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Joe'</span><span class="token punctuation">,</span><span class="token string">'Will'</span><span class="token punctuation">,</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Will'</span><span class="token punctuation">,</span><span class="token string">'Joe'</span><span class="token punctuation">,</span><span class="token string">'Joe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">(</span>names <span class="token operator">==</span> <span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        【在布尔索引的基础上添加了取反的操作】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>神奇索引：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr1<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        【利用列表，一行一行地选】arr1<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr1<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    【利用交叉点，一个一个地选】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>数组转置和换轴</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr1<span class="token punctuation">.</span>T        【数组转置】np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>arr<span class="token punctuation">.</span>T<span class="token punctuation">,</span>arr<span class="token punctuation">)</span>    【计算矩阵内积】<span class="token number">2</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr1<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        【将第一个轴与第二个轴进行交换，一开始默认顺序为<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="II、数组的通用函数"><a href="#II、数组的通用函数" class="headerlink" title="II、数组的通用函数"></a>II、数组的通用函数</h4><p>数组的通用函数是一种在ndarray数据中进行逐元素操作的函数，也被称作ufunc</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token number">4</span><span class="token punctuation">.</span> remainder<span class="token punctuation">,</span>whole_part <span class="token operator">=</span> np<span class="token punctuation">.</span>modf<span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span>    【结果输出到arr2中】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="III、数组的应用操作"><a href="#III、数组的应用操作" class="headerlink" title="III、数组的应用操作"></a>III、数组的应用操作</h4><ol><li>将条件逻辑作为数组操作：</li></ol><pre class="line-numbers language-python"><code class="language-python">xarr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">1.4</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>yarr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">,</span><span class="token number">2.3</span><span class="token punctuation">,</span><span class="token number">2.4</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cond <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span> result <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>cond<span class="token punctuation">,</span>xarr<span class="token punctuation">,</span>yarr<span class="token punctuation">)</span>        【若cond的元素为<span class="token boolean">True</span>时，选取xarr的对应元素，否则选取yarr的对应元素】<span class="token number">2</span><span class="token punctuation">.</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>arr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>arr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>        【仅将正值设为<span class="token number">2</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>数学与统计方法：</li></ol><pre class="line-numbers language-python"><code class="language-python">arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span> arr1<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        【求全元素的均值】<span class="token number">2</span><span class="token punctuation">.</span> arr1<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token number">3</span><span class="token punctuation">.</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> arr1<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span> arr1<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        【X轴方向，每一列求和】<span class="token number">6</span><span class="token punctuation">.</span> arr1<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span>        【从<span class="token number">0</span>开始元素累和】<span class="token number">7</span><span class="token punctuation">.</span> arr1<span class="token punctuation">.</span>cumprod<span class="token punctuation">(</span><span class="token punctuation">)</span>        【从<span class="token number">1</span>开始元素累积】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>布尔值数组的方法</li></ol><pre class="line-numbers language-python"><code class="language-python">arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>arr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>        【将数值数组转化至布尔值数组，从而计算正值的个数】<span class="token number">2</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>arr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>any<span class="token punctuation">(</span><span class="token punctuation">)</span>        【若数组中至少有一个<span class="token boolean">True</span>，那么返回<span class="token boolean">True</span>】<span class="token number">3</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>arr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>     【若数组每个值都是<span class="token boolean">True</span>，那么才返回<span class="token boolean">True</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>排序</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>arr1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>arr1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token number">1</span>）        【以Y轴为方向，每一行内部进行由小到大的排序】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>唯一值与其他集合逻辑</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>names <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Joe'</span><span class="token punctuation">,</span><span class="token string">'Will'</span><span class="token punctuation">,</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Will'</span><span class="token punctuation">,</span><span class="token string">'Joe'</span><span class="token punctuation">,</span><span class="token string">'Joe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>unique<span class="token punctuation">(</span>names<span class="token punctuation">)</span>    【返回数组中唯一值排序后形成的数组，结果为array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Joe'</span><span class="token punctuation">,</span><span class="token string">'Will'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>】<span class="token number">2</span><span class="token punctuation">.</span>values <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>in1d<span class="token punctuation">(</span>values<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【检查一个数组的元素是否在另外一个数组中，并返回一个布尔值数组】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>伪随机数生成</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    【生成4x4的正态分布随机样本数组】<span class="token number">2</span><span class="token punctuation">.</span>rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>rng<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第五章-Pandas入门"><a href="#第五章-Pandas入门" class="headerlink" title="第五章 Pandas入门"></a>第五章 Pandas入门</h3><h4 id="I、Series"><a href="#I、Series" class="headerlink" title="I、Series"></a>I、Series</h4><ol><li>Series是一种一维的数组型对象，它包含了一个值序列并且包含了数据标签，称为索引，亦或者说是会显式展示索引列</li><li>Series的创建操作有：<pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Ohio'</span><span class="token punctuation">:</span><span class="token number">35000</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">:</span><span class="token number">71000</span><span class="token punctuation">,</span><span class="token string">'Oregon'</span><span class="token punctuation">:</span><span class="token number">16000</span><span class="token punctuation">,</span><span class="token string">'Utah'</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Ohio'</span><span class="token punctuation">:</span><span class="token number">35000</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">:</span><span class="token number">71000</span><span class="token punctuation">,</span><span class="token string">'Oregon'</span><span class="token punctuation">:</span><span class="token number">16000</span><span class="token punctuation">,</span><span class="token string">'Utah'</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'California'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Oregon'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 【添加index后，只会显示指定索引的数据，若原数据集没有，则默认填充值NaN】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Series的操作方法有：</li></ol></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> obj<span class="token punctuation">.</span>index<span class="token number">2</span><span class="token punctuation">.</span> obj<span class="token punctuation">.</span>values<span class="token number">3</span><span class="token punctuation">.</span> obj<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token number">4</span><span class="token punctuation">.</span> obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token number">5</span><span class="token punctuation">.</span> obj<span class="token punctuation">[</span>obj <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token number">6</span><span class="token punctuation">.</span> obj <span class="token operator">*</span> <span class="token number">2</span><span class="token number">7</span><span class="token punctuation">.</span> pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    【检查数据项是否缺失，即为空】<span class="token number">8</span><span class="token punctuation">.</span> pd<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token number">9</span><span class="token punctuation">.</span> obj1 <span class="token operator">+</span> obj2        【相加具有自动对齐索引的特性，即只相加具有相同标签的值，若一方没有则值为NaN】<span class="token number">10</span><span class="token punctuation">.</span> obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'population'</span>        【给Series对象设置名称】<span class="token number">11</span><span class="token punctuation">.</span> obj<span class="token punctuation">.</span>index<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'state'</span>    【给Series对象的索引设置名称】<span class="token number">12</span><span class="token punctuation">.</span> obj<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Steve'</span><span class="token punctuation">,</span><span class="token string">'Jeff'</span><span class="token punctuation">,</span><span class="token string">'Ryan'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="II、DataFrame"><a href="#II、DataFrame" class="headerlink" title="II、DataFrame"></a>II、DataFrame</h4><ol><li>DataFrame表示的是矩阵的数据表，它包含已排序的列集合，每一列可以是不同的类型，它也有行索引和列索引，可以被视为一个共享相同索引的Series的字典</li><li>DataFrame的创建操作有：</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'state'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span><span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'year'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2000.2001</span><span class="token punctuation">,</span><span class="token number">2002</span><span class="token punctuation">,</span><span class="token number">2001</span><span class="token punctuation">,</span><span class="token number">2002</span><span class="token punctuation">,</span><span class="token number">2003</span><span class="token punctuation">]</span>        <span class="token string">'pop'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1.7</span><span class="token punctuation">,</span><span class="token number">3.6</span><span class="token punctuation">,</span><span class="token number">2.4</span><span class="token punctuation">,</span><span class="token number">2.9</span><span class="token punctuation">,</span><span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span> frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> frame <span class="token operator">=</span> Pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> frame <span class="token operator">=</span> Pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">,</span><span class="token string">'five'</span><span class="token punctuation">,</span><span class="token string">'six'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>DataFrame的操作方法有：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> frame<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> frame<span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token punctuation">.</span> frame<span class="token punctuation">.</span>year<span class="token number">4</span><span class="token punctuation">.</span> frame<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span>    【选取某行】<span class="token number">5</span><span class="token punctuation">.</span> frame<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16.5</span>    【可以直接通过这方式添加一列】<span class="token number">6</span><span class="token punctuation">.</span> frame<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token punctuation">.</span> val <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">,</span><span class="token string">'five'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   frame<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> val        【利用Series来填充DateFrame】<span class="token number">8</span><span class="token punctuation">.</span> frame<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span> <span class="token operator">=</span> frame<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token string">'Ohio'</span><span class="token number">9</span><span class="token punctuation">.</span> <span class="token keyword">del</span> frame2<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span>    【删除某一列】<span class="token number">10</span><span class="token punctuation">.</span> frame<span class="token punctuation">.</span>columns<span class="token number">11</span><span class="token punctuation">.</span> <span class="token string">'Ohio'</span> <span class="token keyword">in</span> frame<span class="token punctuation">.</span>columns<span class="token number">12</span><span class="token punctuation">.</span> <span class="token number">2003</span> <span class="token keyword">in</span> frame<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="III、基本功能"><a href="#III、基本功能" class="headerlink" title="III、基本功能"></a>III、基本功能</h4><ol><li>重建索引：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.5</span><span class="token punctuation">,</span><span class="token number">7.2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5.3</span><span class="token punctuation">,</span><span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【若原数据有一样的索引，则按指定顺序排序，否则默认值为NaN】<span class="token number">2</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'purple'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">)</span>        【ffill方法会将默认值因地适宜得改成前面的值】<span class="token number">3</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'California'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【重建行索引，没有则全填充NaN值】frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'California'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【重建列索引，没有则全填充NaN值】frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'California'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        【同时重建行列索引，没有则全填充NaN值】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>轴向上删除条目：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>obj2 <span class="token operator">=</span> obj<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    【在原对象中删除列】<span class="token number">2</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【清除行】frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        【清除列】frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">)</span>    【清除列】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>索引、选择与过滤：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        【选取下标索引为<span class="token number">1</span>和<span class="token number">3</span>的行】obj<span class="token punctuation">[</span>obj<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">]</span>obj<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>        【注：集合关系为<span class="token punctuation">[</span><span class="token punctuation">]</span>，即结果包含<span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span>两行】<span class="token number">2</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span>        【选列】frame<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>frame<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        【选取下标索引为<span class="token number">0</span>和<span class="token number">1</span>的行，集合关系为<span class="token punctuation">[</span><span class="token punctuation">)</span>】frame<span class="token punctuation">[</span>frame<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">]</span>frame<span class="token punctuation">[</span>frame <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    【交叉选取】frame<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>frame<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span>    【利用字符切片，注：包含了<span class="token string">'Utah'</span>代表的行】frame<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>frame<span class="token punctuation">.</span>three <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">]</span>    【嵌套筛选，注：<span class="token punctuation">:</span><span class="token number">3</span>代表的选取<span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>索引列】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>算术和数据对齐：在Series和DataFrame中，当将两个相同类型对象相加时，会自动采用索引对齐相加的方式，若一方没有相应索引，则自动填充NaN。具体区别则是Series是行索引对齐，而DataFrame则是行索引和列索引分别对齐</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>obj1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7.3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">,</span><span class="token number">3.6</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj1 <span class="token operator">+</span> obj2<span class="token number">2</span><span class="token punctuation">.</span>frame1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bcd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame1 <span class="token operator">+</span> frame2        【缺失默认填充值为NaN】<span class="token number">3</span><span class="token punctuation">.</span>frame1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>frame2<span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        【设置缺失默认填充值为<span class="token number">0</span>】<span class="token number">4</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span>frame1frame1<span class="token punctuation">.</span>rdiv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span>arr1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr1 <span class="token operator">-</span> arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        【arr1的每一行都对arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>进行了减操作】<span class="token number">6</span><span class="token punctuation">.</span>frame2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>series <span class="token operator">=</span> frame2<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        【注：选取第一行作为Series对象】frame2 <span class="token operator">-</span> series        【frame2的每一列删除series的相应的索引值】<span class="token number">7</span><span class="token punctuation">.</span>frame2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame2 <span class="token operator">+</span> series        【双方都提前进行索引拓展，填充值默认为NaN，再最后进行相加】<span class="token number">8</span><span class="token punctuation">.</span>frame2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>series <span class="token operator">=</span> frame2<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span>frame2<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>series<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span>        【改成在列上进行广播，在行上匹配】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>函数应用和映射：</li></ol><pre class="line-numbers language-python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'bde'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Texas'</span><span class="token punctuation">,</span><span class="token string">'Oregon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>        【注：Numpy的通用函数对pandas对象也有效】<span class="token number">2</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    【每一列都应用函数】<span class="token number">3</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">)</span>     【每一行都应用函数】<span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span><span class="token string">'max'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        【传递给apply的函数可以返回带有多个值的Series对象】<span class="token number">5</span><span class="token punctuation">.</span>format <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'%.2f'</span> <span class="token operator">%</span>xframe<span class="token punctuation">.</span>applymap<span class="token punctuation">(</span>format<span class="token punctuation">)</span>        【给每一个元素逐一应用函数】<span class="token number">6</span><span class="token punctuation">.</span>format <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'%.2f'</span> <span class="token operator">%</span>xframe<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>format<span class="token punctuation">)</span>        【给某一列的所有元素逐一应用函数】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>排序和排名：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>        【根据索引值来进行行排序】<span class="token number">2</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>     【根据列索引进行列排序，且设置成降序排序】<span class="token number">3</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">)</span>        【根据Series值进行排序】<span class="token number">4</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>        【根据索引b的列的值来进行行排序】frame<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【根据多个指标的值来进行行排序】<span class="token number">5</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>rank<span class="token punctuation">(</span><span class="token punctuation">)</span>        【允许名次重复，如<span class="token number">7</span>和<span class="token number">7</span>的值被计算成同一个名次。注：结果为名次值，而非原数据】obj<span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span>    【不允许名次重复，同值的对象根据在数据中的观测顺序进行分配】obj<span class="token punctuation">.</span>rank<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>        【按降序排序，即值越大名次越靠前，越小】<span class="token number">6</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4.3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rank<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">)</span>        【对每一行进行名次计算】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>含有重复标签的轴索引：</li></ol><pre class="line-numbers language-python"><code class="language-python">obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>index<span class="token punctuation">.</span>is_unique        【检查标签是否唯一】obj<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>    【注：由于标签重复，故最后可能会输出多行】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="IV、描述性统计的概述与计算"><a href="#IV、描述性统计的概述与计算" class="headerlink" title="IV、描述性统计的概述与计算"></a>IV、描述性统计的概述与计算</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7.1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.75</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>        【依次计算每个列的总和】frame<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">)</span>    【依次计算每个行的总和】frame<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'columns'</span><span class="token punctuation">,</span>skipna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    【计算均值时，不忽略NA值】frame<span class="token punctuation">.</span>indxmax<span class="token punctuation">(</span><span class="token punctuation">)</span>    【依次记录每个列的最大值的行索引】frame<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span>    frame<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>        【计算各列的汇总统计集合】<span class="token number">2</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>uniques <span class="token operator">=</span> obj<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>        【返回序列中的所有不重复值】count <span class="token operator">=</span> obj<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>        【返回序列中值的个数，包括重复值】pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>obj<span class="token punctuation">.</span>values<span class="token punctuation">,</span>sort<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    【对结果进行排序】mask <span class="token operator">=</span> obj<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【遍历各行，判断值是否包含在<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>中】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第六章-数据载入和存储"><a href="#第六章-数据载入和存储" class="headerlink" title="第六章 数据载入和存储"></a>第六章 数据载入和存储</h3><h4 id="I、数据的载入"><a href="#I、数据的载入" class="headerlink" title="I、数据的载入"></a>I、数据的载入</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex1.csv'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'examples/ex1.csv'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>header<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【显式设置数据集的列索引】<span class="token number">5</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token string">'message'</span><span class="token punctuation">)</span>   【显式设置数据集的列索引，并把一项作为行索引】<span class="token number">6</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">'exmaple/ex2.txt'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'\s+'</span><span class="token punctuation">)</span><span class="token number">8</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>skiprows<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【跳跃下标索引为<span class="token number">0</span>、<span class="token number">2</span>和<span class="token number">3</span>的行】<span class="token number">9</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>na_values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'NULL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【数据集中若元素值等于NULL，那么就设置它为NA】<span class="token number">11</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>na_values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'NA'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'something'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token punctuation">.</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/ex2.csv'</span><span class="token punctuation">,</span>nrows<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    【只读取五行】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="II、-数据的存储"><a href="#II、-数据的存储" class="headerlink" title="II、 数据的存储"></a>II、 数据的存储</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'example/ex2.csv'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span>        【存储时元素用分隔符分开】<span class="token number">3</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>na_rep<span class="token operator">=</span><span class="token string">'NULL'</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        【不存储数据集的行索引和列索引】<span class="token number">5</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第七章-数据清洗与准备"><a href="#第七章-数据清洗与准备" class="headerlink" title="第七章    数据清洗与准备"></a>第七章    数据清洗与准备</h3><p>在进行数据分析和建模的过程中，大量的时间花在数据准备上：加载、清理、转换和重新排列，这样的工作占用了分析师80%以上的时间。</p><h4 id="I、处理缺失值"><a href="#I、处理缺失值" class="headerlink" title="I、处理缺失值"></a>I、处理缺失值</h4><ol><li>在统计学应用中，NA数据可以是不存在的数据或者是存在但不可观测的数据</li><li>过滤缺失值</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> nan <span class="token keyword">as</span> NA<span class="token number">1</span><span class="token punctuation">.</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>NA<span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span>NA<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cleaned <span class="token operator">=</span> data<span class="token punctuation">[</span>data<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>cleaned <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>    【清理掉包含NA值的行】<span class="token number">2</span><span class="token punctuation">.</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">6.5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>NA<span class="token punctuation">,</span>NA<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>NA<span class="token punctuation">,</span>NA<span class="token punctuation">,</span>NA<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>NA<span class="token punctuation">,</span><span class="token number">6.5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cleaned <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>cleaned <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">)</span>    【清理掉所有值都是NA值的行】cleaned <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">)</span>        【清理掉所有值都是NA值的列，注：和arr1<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>有理念区别】cleaned <span class="token operator">=</span> data<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>thresh<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        【保留最多包含<span class="token number">1</span>个NA值的行】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>补全缺失值 </li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>NA<span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span>NA<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">=</span> data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>data<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        【用数据集的均值来代替NA值】<span class="token number">2</span><span class="token punctuation">.</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res <span class="token operator">=</span> data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        【分别用<span class="token number">0.5</span>，<span class="token number">0</span>来代替第二列、第三列的NA值】res <span class="token operator">=</span> data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    【只允许填充<span class="token number">2</span>行】data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        【原地修改，用<span class="token number">0</span>代替NA值】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="II、数据转换"><a href="#II、数据转换" class="headerlink" title="II、数据转换"></a>II、数据转换</h4><ol><li>删除重复值</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'k1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'k2'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span>        【检测每一行是否存在重复（与之前出现过的行相同）的情况，返回布尔数组】data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span>        【返回duplicated函数中为<span class="token boolean">False</span>的行，即返回不含重复行的数据集】data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'k1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【利用K1列来去除重复值，即只保留K1列中不同值第一次出现的行】data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'k1'</span><span class="token punctuation">,</span><span class="token string">'k2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>keep<span class="token operator">=</span><span class="token string">'last'</span><span class="token punctuation">)</span>    【只保留K1和K2列不同组合最后出现的行】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用函数或映射进行数据转换</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'food'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'bacon'</span><span class="token punctuation">,</span><span class="token string">'pulled pork'</span><span class="token punctuation">,</span><span class="token string">'bacon'</span><span class="token punctuation">,</span><span class="token string">'Pastrami'</span><span class="token punctuation">,</span><span class="token string">'corned                                             beef'</span><span class="token punctuation">,</span><span class="token string">'Bacon'</span><span class="token punctuation">,</span><span class="token string">'pastrami'</span><span class="token punctuation">,</span><span class="token string">'honey ham'</span><span class="token punctuation">,</span><span class="token string">'nova lox'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'ounces'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7.5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>meat_to_animal <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'bacon'</span><span class="token punctuation">:</span><span class="token string">'pig'</span><span class="token punctuation">,</span><span class="token string">'pulled pork'</span><span class="token punctuation">:</span><span class="token string">'pig'</span><span class="token punctuation">,</span><span class="token string">'pastrami'</span><span class="token punctuation">:</span><span class="token string">'cow'</span><span class="token punctuation">,</span><span class="token string">'corned       beef'</span><span class="token punctuation">:</span><span class="token string">'cow'</span><span class="token punctuation">,</span><span class="token string">'honey ham'</span><span class="token punctuation">:</span><span class="token string">'pig'</span><span class="token punctuation">,</span><span class="token string">'nova lox'</span><span class="token punctuation">:</span><span class="token string">'salmon'</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span>lowercased <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'animal'</span><span class="token punctuation">]</span> <span class="token operator">=</span> lowercased<span class="token punctuation">.</span>map<span class="token punctuation">(</span>meat_to_animal<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>meat_to_animal<span class="token punctuation">[</span>x<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>替代值</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>    【用NA值来替代<span class="token operator">-</span><span class="token number">999</span>】data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>    【用NA值同时替代<span class="token operator">-</span><span class="token number">999</span>和<span class="token operator">-</span><span class="token number">1000</span>】data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【用NA值替代<span class="token operator">-</span><span class="token number">999</span>，用<span class="token number">0</span>替代<span class="token operator">-</span><span class="token number">1000</span>】data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        【同上】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>重命名轴索引</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span><span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>transform <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">7</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>index <span class="token operator">=</span> data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>map<span class="token punctuation">(</span>transform<span class="token punctuation">)</span>    【改变索引格式】<span class="token number">8</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span>str<span class="token punctuation">.</span>title<span class="token punctuation">,</span>columns<span class="token operator">=</span>str<span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token number">9</span><span class="token punctuation">.</span> data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'OHIO'</span><span class="token punctuation">:</span><span class="token string">'INDIANA'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span><span class="token string">'peekaboo'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    【将<span class="token string">'OHIO'</span>改成<span class="token string">'INDIANA'</span>】<span class="token number">4.</span>data<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'OHIO'</span><span class="token punctuation">:</span><span class="token string">'INDIANA'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    【原地修改】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>离散化和分箱</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span>bins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>cats <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span>bins<span class="token punctuation">)</span>    【输出每个数值所在箱对应的区间，切割时默认是集合关系<span class="token punctuation">(</span><span class="token punctuation">]</span>】cats<span class="token punctuation">.</span>codes        【输出每个数值所在箱的索引】cats<span class="token punctuation">.</span>categoriespd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>cats<span class="token punctuation">)</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    【更改集合关系为<span class="token punctuation">[</span><span class="token punctuation">)</span>】pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>ages<span class="token punctuation">,</span>bins<span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Youth'</span><span class="token punctuation">,</span><span class="token string">'YoungAdult'</span><span class="token punctuation">,</span><span class="token string">'MiddleAged'</span><span class="token punctuation">,</span><span class="token string">'Senior'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【同时设置每个箱的名称】<span class="token number">2</span><span class="token punctuation">.</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>precision<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    【设置箱对应区间边界的精度，保留后二位】<span class="token number">3</span><span class="token punctuation">.</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>cats <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    【qcut相比cut方法，会使每个箱具有相同数据量的数据点，因此可以通过该方法获得等长的箱】pd<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>cats<span class="token punctuation">)</span>pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【根据自定义的样本分位数来切割】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="12"><li>检测与过滤异常值</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>col <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>col<span class="token punctuation">[</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">]</span>        【找出一列中绝对值大于三的值】data<span class="token punctuation">[</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>any<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        【找出所有值大于<span class="token number">3</span>或小于<span class="token operator">-</span><span class="token number">3</span>的行】np<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    【根据数据中的值的正负分别生成<span class="token number">1</span>和<span class="token operator">-</span><span class="token number">1</span>的数值】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="14"><li>置换和随机抽样</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshapes<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sampler <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>take<span class="token punctuation">(</span>sampler<span class="token punctuation">)</span>    【调整行顺序】df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        【随机选出一个不含替代值的随机子集】<span class="token number">2</span><span class="token punctuation">.</span>choices <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>draws <span class="token operator">=</span> choices<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>replace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    【随机从五个数据中抽取十个样本，允许重复值】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="16"><li>计算指标/虚拟变量</li></ol><pre class="line-numbers language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data1'</span><span class="token punctuation">:</span>range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【将数据集转换成值为<span class="token number">1</span>和<span class="token number">0</span>的矩阵】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="III、字符串操作"><a href="#III、字符串操作" class="headerlink" title="III、字符串操作"></a>III、字符串操作</h4><ol><li>字符串对象方法</li></ol><pre class="line-numbers language-python"><code class="language-python">val <span class="token operator">=</span> <span class="token string">'a,b, guido'</span>val<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>pieces <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> val<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>first<span class="token punctuation">,</span>second<span class="token punctuation">,</span>third <span class="token operator">=</span> piecesfirst <span class="token operator">+</span> <span class="token string">'::'</span> <span class="token operator">+</span> second <span class="token operator">+</span> <span class="token string">'::'</span> <span class="token operator">+</span> third<span class="token string">'::'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>pieces<span class="token punctuation">)</span><span class="token string">'guido'</span> <span class="token keyword">in</span> valval<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>  OR val<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>val<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>val<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'::'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>正则表达式</li></ol><pre class="line-numbers language-python"><code class="language-python">text <span class="token operator">=</span> <span class="token string">"foo    bar\t baz  \tqux"</span><span class="token number">1</span><span class="token punctuation">.</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\s+'</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>regex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'\s+'</span><span class="token punctuation">)</span>        【产生正则表达式对象，有利于节约CPU周期】regex<span class="token punctuation">.</span>split<span class="token punctuation">(</span>text<span class="token punctuation">)</span>regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        【返回所有与正则表达式匹配的部分】regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        【返回第一个与正则表达式匹配的部分】regrex<span class="token punctuation">.</span>match<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        【只在文本开头进行匹配】regrex<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'READCTED'</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span>        【用字符串<span class="token string">'READCTED'</span>来代替匹配到的部分】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>pandas中的向量化字符串函数（用于批量正则表达式应用）</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Dave'</span><span class="token punctuation">:</span><span class="token string">'dave@google.com'</span><span class="token punctuation">,</span><span class="token string">'Steve'</span><span class="token punctuation">:</span><span class="token string">'steve@gmail.com'</span><span class="token punctuation">,</span><span class="token string">'Rob'</span><span class="token punctuation">:</span><span class="token string">'rob@gmail.com'</span><span class="token punctuation">,</span><span class="token string">'Wes'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">}</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        【字典转化至Series对象，其中键成为值的索引】data<span class="token punctuation">.</span>str<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'gmail'</span><span class="token punctuation">)</span>        【为每个对象都同时应用一个正则表达式，其中使用该类函数可以避免原数据中可能包含的NA值的影响，而不直接报错】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="第八章-数据规整：连接、联合和重塑"><a href="#第八章-数据规整：连接、联合和重塑" class="headerlink" title="第八章    数据规整：连接、联合和重塑"></a>第八章    数据规整：连接、联合和重塑</h3><h4 id="I、分层索引"><a href="#I、分层索引" class="headerlink" title="I、分层索引"></a>I、分层索引</h4><ol><li>分层索引允许在一个轴上拥有多个（两个及以上）索引层级，笼统的说，分层索引提供了一种在更低维度的形式中处理更高维度数据的方式</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>        【默认指的是第一级索引】data<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>    【不限第一级索引，限制第二级索引的第二索引】data<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>        【DataFrame重新排列】dat<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arrange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'Green'</span><span class="token punctuation">,</span><span class="token string">'Red'</span><span class="token punctuation">,</span><span class="token string">'Green'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>index<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'key2'</span><span class="token punctuation">]</span>frame<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token string">'color'</span><span class="token punctuation">]</span>frame<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重排序和层级排序</li></ol><pre class="line-numbers language-python"><code class="language-python">frame<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">,</span><span class="token string">'key2'</span><span class="token punctuation">)</span>        【交换行的两级索引】frame<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        【根据第二级索引来数据集进行行排列】frame<span class="token punctuation">.</span>swaplevel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>按层级进行汇总统计</li></ol><pre class="line-numbers language-python"><code class="language-python">frame<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'key2'</span><span class="token punctuation">)</span>        【参数为某级索引名称，对特定行轴上的相同标签类型进行行累和】frame<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'color'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        【对特定列轴的相同标签进行列累和】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>使用DataFrame的列进行索引</li></ol><pre class="line-numbers language-python"><code class="language-python">frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span>range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span>range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span>        【将<span class="token string">'c'</span>、<span class="token string">'d'</span>两列移动，并作为行索引】frame2 <span class="token operator">=</span> frame<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>     【将<span class="token string">'c'</span>、<span class="token string">'d'</span>两列拷贝作为行索引】frame2<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>    【是set_index方法的反操作，即将行索引转换成列】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="II、联合与合并数据集"><a href="#II、联合与合并数据集" class="headerlink" title="II、联合与合并数据集"></a>II、联合与合并数据集</h4><ol><li>数据库风格的DataFrame连接</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data1'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data2'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">)</span>        【默认把重叠列名作为连接的键，且仅保留双方匹配列值一致的行，注：默认做“内连接”】pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span>    【显式指定要匹配的列】pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span>        【设置合并以“外连接”为策略】<span class="token number">2</span><span class="token punctuation">.</span>df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'lkey'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data1'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'rkey'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data2'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df3<span class="token punctuation">,</span> df4<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'lkey'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'rkey'</span><span class="token punctuation">)</span>        【分别指定双方进行匹配的列，并保留该两列】<span class="token number">3</span><span class="token punctuation">.</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data2'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span>left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'lval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'rval'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span>        【使用多个键进行合并】pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key1'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key1'</span><span class="token punctuation">,</span> suffixes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'_left'</span><span class="token punctuation">,</span> <span class="token string">'_right'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     【即当两个合并集同时拥有多个非连接键重名时，为了防止混淆时使用，第一个集合重名列添加<span class="token string">'_left'</span>，第二个集合添加<span class="token string">'_right'</span>】    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>根据索引合并</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>left1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>right1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'group_val'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left1<span class="token punctuation">,</span> right1<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        【第一集合的‘key’列值和第二集合的索引值进行匹配，而非列值与列值的匹配了】pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left1<span class="token punctuation">,</span> right1<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>lefth <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span><span class="token number">2002</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>righth <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'event1'</span><span class="token punctuation">,</span> <span class="token string">'event2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>lefth<span class="token punctuation">,</span> righth<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>lefth<span class="token punctuation">,</span> righth<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>left2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>right2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Missouri'</span><span class="token punctuation">,</span> <span class="token string">'Alabama'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left2<span class="token punctuation">,</span> right2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">,</span> left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span>left1<span class="token punctuation">.</span>join<span class="token punctuation">(</span>right1<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span>another <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span><span class="token string">'Oregon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>right2<span class="token punctuation">,</span> another<span class="token punctuation">]</span><span class="token punctuation">)</span>left2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>right2<span class="token punctuation">,</span> another<span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>沿轴向连接</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        【类似于arr与arr的横向拼接】<span class="token number">2</span><span class="token punctuation">.</span>s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">)</span>        【默认沿着axis<span class="token operator">=</span><span class="token number">0</span>的轴向生效的，类似于行的上下拼接】pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        【列的左右拼接，不存在的值自动填充NA】s4 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">)</span>    pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> join<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> join_axes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【在pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>的结果上继续处理，即仅保留a、c、b、e标签的行，而由于c、e本来就没有该标签，所以这两行的值都默认为NA】result <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【仅仅是用<span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span>来创建第一级索引（外围索引），用于区分上下拼接的行原先是属于哪个集合】result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【<span class="token string">'level1'</span>、<span class="token string">'level2'</span>成为列轴上的第一级索引（外围索引），用于区别列属于原先哪个集合】pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'level1'</span><span class="token punctuation">:</span> df1<span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">:</span> df2<span class="token punctuation">}</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>     【效果与上语句相同】pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">,</span> <span class="token string">'level2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token string">'lower'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【设置第一级索引名称<span class="token string">'upper'</span>和第二级索引名称<span class="token string">'lower'</span>】<span class="token number">4</span><span class="token punctuation">.</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    【若原集合没有设置行索引，则会默认设置行索引为整数索引，并执行行的上下拼接操作】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>联合重叠数据</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>a <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>b<span class="token punctuation">.</span>combine_first<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【当两个集合的索引局部甚至全部一致时，用集合a来修补集合b的缺失值】<span class="token number">2</span><span class="token punctuation">.</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df1<span class="token punctuation">.</span>combine_first<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="III、重塑和透视"><a href="#III、重塑和透视" class="headerlink" title="III、重塑和透视"></a>III、重塑和透视</h4><ol><li>使用多层索引进行重塑</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span><span class="token string">'Colorado'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> data<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>        【将DataFrame中的列索引转换成带二级行索引的Series】result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>        【默认将带二级行索引的Series的第二级行索引（内层索引）转换成DataFrame列索引】result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        【将带二级行索引的Series的第一级行索引（外层索引）转换成DataFrame列索引】result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span>        【利用索引名称来选择移动的索引轴】<span class="token number">2</span><span class="token punctuation">.</span>s1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>        【Series转成DataFrame】data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span>        【在逆操作过程中默认只显示有值的索引行显示】data2<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span>dropna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        【显示设置所有的所有行显示，即NA值行也显示】<span class="token number">3</span><span class="token punctuation">.</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'left'</span><span class="token punctuation">:</span> result<span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">:</span> result <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'side'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token string">'side'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>将“长”透视成“宽”：将原先的许多列的数据集中的列索引旋转成某一列的列值，这样就使数据集的宽度变窄了，但同样的，高度也比以往高了些许</li></ol><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/macrodata.csv'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>        【显示前五行】periods <span class="token operator">=</span> pd<span class="token punctuation">.</span>PeriodIndex<span class="token punctuation">(</span>year<span class="token operator">=</span>data<span class="token punctuation">.</span>year<span class="token punctuation">,</span> quarter<span class="token operator">=</span>data<span class="token punctuation">.</span>quarter<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">)</span>columns <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'realgdp'</span><span class="token punctuation">,</span> <span class="token string">'infl'</span><span class="token punctuation">,</span> <span class="token string">'unemp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>columns<span class="token operator">=</span>columns<span class="token punctuation">)</span>data<span class="token punctuation">.</span>index <span class="token operator">=</span> periods<span class="token punctuation">.</span>to_timestamp<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'end'</span><span class="token punctuation">)</span>ldata <span class="token operator">=</span> data<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>pivoted <span class="token operator">=</span> ldata<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>ldata<span class="token punctuation">[</span><span class="token string">'value2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ldata<span class="token punctuation">)</span><span class="token punctuation">)</span>pivoted <span class="token operator">=</span> ldata<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">)</span>pivoted<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>unstacked <span class="token operator">=</span> ldata<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'item'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>将“宽”透视成“长”</li></ol><pre class="line-numbers language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>melted <span class="token operator">=</span> pd<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>df<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>reshaped <span class="token operator">=</span> melted<span class="token punctuation">.</span>pivot<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'variable'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>reshaped<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>df<span class="token punctuation">,</span> id_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>df<span class="token punctuation">,</span> value_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>df<span class="token punctuation">,</span> value_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第九章-绘图与可视化"><a href="#第九章-绘图与可视化" class="headerlink" title="第九章 绘图与可视化"></a>第九章 绘图与可视化</h3><h4 id="I、简明matplolib-API入门"><a href="#I、简明matplolib-API入门" class="headerlink" title="I、简明matplolib API入门"></a>I、简明matplolib API入门</h4><ol><li>图片与子图</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax1 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>ax3 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630214837666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'k--'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630215022223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python">ax1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630215108949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span>fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> sharex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        axes<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span>hist<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>wspace<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> hspace<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020063021530736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="3"><li>颜色、标记和线类型</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>random <span class="token keyword">import</span> randnIn <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>randn<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'ko--'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630215344610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'k--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Default'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'k-'</span><span class="token punctuation">,</span> drawstyle<span class="token operator">=</span><span class="token string">'steps-post'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'steps-post'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020063021545624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="5"><li>刻度、标签和图例</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630215542706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python">ticks <span class="token operator">=</span> ax<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">750</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> ax<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'five'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token string">'small'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'My first matplotlib plot'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Stages'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630215702467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>random <span class="token keyword">import</span> randnfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'one'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'k--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'two'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'k.'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'three'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630215828777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="7"><li>注释与子图加工</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimefig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/spx.csv'</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> parse_dates<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>spx <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'SPX'</span><span class="token punctuation">]</span>spx<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ax<span class="token operator">=</span>ax<span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">'k-'</span><span class="token punctuation">)</span>crisis_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>datetime<span class="token punctuation">(</span><span class="token number">2007</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Peak of bull market'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>datetime<span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Bear Stearns Fails'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>datetime<span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Lehman Bankruptcy'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> date<span class="token punctuation">,</span> label <span class="token keyword">in</span> crisis_data<span class="token punctuation">:</span>    ax<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span>label<span class="token punctuation">,</span> xy<span class="token operator">=</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> spx<span class="token punctuation">.</span>asof<span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xytext<span class="token operator">=</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> spx<span class="token punctuation">.</span>asof<span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">225</span><span class="token punctuation">)</span><span class="token punctuation">,</span>arrowprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span>headwidth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>headlength<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>horizontalalignment<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> verticalalignment<span class="token operator">=</span><span class="token string">'top'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Zoom in on 2007-2010</span>ax<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1/1/2007'</span><span class="token punctuation">,</span> <span class="token string">'1/1/2011'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Important dates in the 2008-2009 financial crisis'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020063022002230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>rect <span class="token operator">=</span> plt<span class="token punctuation">.</span>Rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span> circ <span class="token operator">=</span>plt<span class="token punctuation">.</span>Circle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>pgon <span class="token operator">=</span> plt<span class="token punctuation">.</span>Polygon<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.35</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>rect<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>circ<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>pgon<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630220139237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="9"><li>将图片保存到文件</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'figpath.svg'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'figpath.png'</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> bbox_inches<span class="token operator">=</span><span class="token string">'tight'</span><span class="token punctuation">)</span>    【得到一张带有最小白边且分辨率为400DPI的PNG图片】<span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO        【savefig并非一定要写入磁盘，也可以写入任何文件型的对象】buffer <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>plot_data <span class="token operator">=</span> buffer<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>matplotlib设置</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>plt<span class="token punctuation">.</span>rc<span class="token punctuation">(</span><span class="token string">'figure'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        【将全局的图像默认大小设置为<span class="token number">10</span>×<span class="token number">10</span>】<span class="token number">2</span><span class="token punctuation">.</span>font_options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'family'</span> <span class="token punctuation">:</span> <span class="token string">'monospace'</span><span class="token punctuation">,</span><span class="token string">'weight'</span> <span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span><span class="token string">'size'</span> <span class="token punctuation">:</span> <span class="token string">'small'</span><span class="token punctuation">}</span>plt<span class="token punctuation">.</span>rc<span class="token punctuation">(</span><span class="token string">'font'</span><span class="token punctuation">,</span> <span class="token operator">**</span>font_options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="II、使用pandas和seaborn绘图"><a href="#II、使用pandas和seaborn绘图" class="headerlink" title="II、使用pandas和seaborn绘图"></a>II、使用pandas和seaborn绘图</h4><ol><li>折线图</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630220522367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630220603631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="3"><li>柱状图</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcdefghijklmnop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>ax<span class="token operator">=</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>ax<span class="token operator">=</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630220650424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span><span class="token string">'five'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Genus'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Genus A B C Done <span class="token number">0.370670</span> <span class="token number">0.602792</span> <span class="token number">0.229159</span> <span class="token number">0.486744</span>two <span class="token number">0.420082</span> <span class="token number">0.571653</span> <span class="token number">0.049024</span> <span class="token number">0.880592</span>three <span class="token number">0.814568</span> <span class="token number">0.277160</span> <span class="token number">0.880316</span> <span class="token number">0.431326</span>four <span class="token number">0.374020</span> <span class="token number">0.899420</span> <span class="token number">0.460304</span> <span class="token number">0.100843</span>five <span class="token number">0.433270</span> <span class="token number">0.125107</span> <span class="token number">0.494675</span> <span class="token number">0.961825</span>six <span class="token number">0.601648</span> <span class="token number">0.478576</span> <span class="token number">0.205690</span> <span class="token number">0.560547</span>In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630220739376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>stacked<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630220835969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">3</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span>tips <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/tips.csv'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span>party_counts <span class="token operator">=</span> pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>tips<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tips<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> party_countsOut<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span>size <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span>dayFri <span class="token number">1</span> <span class="token number">16</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span>Sat <span class="token number">2</span> <span class="token number">53</span> <span class="token number">18</span> <span class="token number">13</span> <span class="token number">1</span> <span class="token number">0</span>Sun <span class="token number">0</span> <span class="token number">39</span> <span class="token number">15</span> <span class="token number">18</span> <span class="token number">3</span> <span class="token number">1</span>Thur <span class="token number">1</span> <span class="token number">48</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">1</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># Not many 1- and 6-person parties</span>In <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> party_counts <span class="token operator">=</span> party_counts<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> party_pcts <span class="token operator">=</span> party_counts<span class="token punctuation">.</span>div<span class="token punctuation">(</span>party_counts<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> party_pctsOut<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span>size <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>dayFri <span class="token number">0.888889</span> <span class="token number">0.055556</span> <span class="token number">0.055556</span> <span class="token number">0.000000</span>Sat <span class="token number">0.623529</span> <span class="token number">0.211765</span> <span class="token number">0.152941</span> <span class="token number">0.011765</span>Sun <span class="token number">0.520000</span> <span class="token number">0.200000</span> <span class="token number">0.240000</span> <span class="token number">0.040000</span>Thur <span class="token number">0.827586</span> <span class="token number">0.068966</span> <span class="token number">0.086207</span> <span class="token number">0.017241</span>In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> party_pcts<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221001542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">4</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snsIn <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tips<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tips<span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>tips<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span> <span class="token operator">-</span> tips<span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tips<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span>total_bill tip smoker day time size tip_pct<span class="token number">0</span> <span class="token number">16.99</span> <span class="token number">1.01</span> No Sun Dinner <span class="token number">2</span> <span class="token number">0.063204</span><span class="token number">1</span> <span class="token number">10.34</span> <span class="token number">1.66</span> No Sun Dinner <span class="token number">3</span> <span class="token number">0.191244</span><span class="token number">2</span> <span class="token number">21.01</span> <span class="token number">3.50</span> No Sun Dinner <span class="token number">3</span> <span class="token number">0.199886</span><span class="token number">3</span> <span class="token number">23.68</span> <span class="token number">3.31</span> No Sun Dinner <span class="token number">2</span> <span class="token number">0.162494</span><span class="token number">4</span> <span class="token number">24.59</span> <span class="token number">3.61</span> No Sun Dinner <span class="token number">4</span> <span class="token number">0.172069</span>In <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'day'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>tips<span class="token punctuation">,</span> orient<span class="token operator">=</span><span class="token string">'h'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221346876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>barplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'day'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'time'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>tips<span class="token punctuation">,</span> orient<span class="token operator">=</span><span class="token string">'h'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221424798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="5"><li>直方图和密度图</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tips<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221624753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tips<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">.</span>density<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221648692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">3</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> comp1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> comp2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> values <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>comp1<span class="token punctuation">,</span> comp2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>distplot<span class="token punctuation">(</span>values<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221726679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="7"><li>散点图或点图</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> macro <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/macrodata.csv'</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data <span class="token operator">=</span> macro<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'cpi'</span><span class="token punctuation">,</span> <span class="token string">'m1'</span><span class="token punctuation">,</span> <span class="token string">'tbilrate'</span><span class="token punctuation">,</span> <span class="token string">'unemp'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> trans_data <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>diff<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> trans_data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span>cpi m1 tbilrate unemp<span class="token number">198</span> <span class="token operator">-</span><span class="token number">0.007904</span> <span class="token number">0.045361</span> <span class="token operator">-</span><span class="token number">0.396881</span> <span class="token number">0.105361</span><span class="token number">199</span> <span class="token operator">-</span><span class="token number">0.021979</span> <span class="token number">0.066753</span> <span class="token operator">-</span><span class="token number">2.277267</span> <span class="token number">0.139762</span><span class="token number">200</span> <span class="token number">0.002340</span> <span class="token number">0.010286</span> <span class="token number">0.606136</span> <span class="token number">0.160343</span><span class="token number">201</span> <span class="token number">0.008419</span> <span class="token number">0.037461</span> <span class="token operator">-</span><span class="token number">0.200671</span> <span class="token number">0.127339</span><span class="token number">202</span> <span class="token number">0.008894</span> <span class="token number">0.012202</span> <span class="token operator">-</span><span class="token number">0.405465</span> <span class="token number">0.042560</span>In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>regplot<span class="token punctuation">(</span><span class="token string">'m1'</span><span class="token punctuation">,</span> <span class="token string">'unemp'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>trans_data<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>matplotlib<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>_subplots<span class="token punctuation">.</span>AxesSubplot at <span class="token number">0x7fb613720be0</span><span class="token operator">></span>In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Changes in log %s versus log %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'m1'</span><span class="token punctuation">,</span> <span class="token string">'unemp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020063022182744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>trans_data<span class="token punctuation">,</span> diag_kind<span class="token operator">=</span><span class="token string">'kde'</span><span class="token punctuation">,</span> plot_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'alpha'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221859923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><ol start="9"><li>分面网格和分类数据</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>factorplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'day'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'time'</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">'smoker'</span><span class="token punctuation">,</span> kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>tips<span class="token punctuation">[</span>tips<span class="token punctuation">.</span>tip_pct <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630221942555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">2</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>factorplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'day'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> row<span class="token operator">=</span><span class="token string">'time'</span><span class="token punctuation">,</span>col<span class="token operator">=</span><span class="token string">'smoker'</span><span class="token punctuation">,</span>kind<span class="token operator">=</span><span class="token string">'bar'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>tips<span class="token punctuation">[</span>tips<span class="token punctuation">.</span>tip_pct <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630222033944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">3</span><span class="token punctuation">.</span>In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sns<span class="token punctuation">.</span>factorplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'day'</span><span class="token punctuation">,</span> kind<span class="token operator">=</span><span class="token string">'box'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>tips<span class="token punctuation">[</span>tips<span class="token punctuation">.</span>tip_pct <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200630222114606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="第十章-数据聚合与分组操作"><a href="#第十章-数据聚合与分组操作" class="headerlink" title="第十章 数据聚合与分组操作"></a>第十章 数据聚合与分组操作</h3><h4 id="I、GroupyBy机制"><a href="#I、GroupyBy机制" class="headerlink" title="I、GroupyBy机制"></a>I、GroupyBy机制</h4><pre class="line-numbers language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key1'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'key2'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'data2'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span>grouped <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       grouped<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        【按key1进行分组，并计算data1列的平均值】<span class="token number">2</span><span class="token punctuation">.</span>means <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        【按key1、key2进行分组，并计算data1列的平均值，得到具有一个层次化索引的Series】means<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>states <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>years <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2006</span><span class="token punctuation">,</span> <span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">2006</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>states<span class="token punctuation">,</span> years<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        【利用自定义数组的位置与值来分组】<span class="token number">4</span><span class="token punctuation">.</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        【注：这儿变成DataFrame来进行分组】df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>遍历各分组</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">,</span> group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>pieces <span class="token operator">=</span> dict<span class="token punctuation">(</span>list<span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        【利用分组搭建字典】<span class="token number">4</span><span class="token punctuation">.</span>grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">.</span>dtypes<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        【groupby默认是在axis<span class="token operator">=</span><span class="token number">0</span>上进行分组的，通过设置也可以在其他任何轴上进行分组，这里根据类型分组】<span class="token keyword">for</span> dtype<span class="token punctuation">,</span> group <span class="token keyword">in</span> grouped<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dtype<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>选择一列或所有列的子集</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'data2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token punctuation">.</span>df<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【等价于上面语句】df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'data2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key1'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'data2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>使用字典和Series分组</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>people <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Wes'</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> <span class="token string">'Travis'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>people<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nanmapping <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'f'</span> <span class="token punctuation">:</span> <span class="token string">'orange'</span><span class="token punctuation">}</span>by_column <span class="token operator">=</span> people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        【用字典分组】by_column<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>map_series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>mapping<span class="token punctuation">)</span>        【将字典转变成Series】people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>map_series<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        【用Series分组】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>使用函数分组</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>            【任何被当做分组键的函数都会在各个索引值上被调用一次，其返回值就会被用作分组名称。】<span class="token number">2</span><span class="token punctuation">.</span>key_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>people<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">,</span> key_list<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span>        【在以len为分组键的基础上，再根据key_list的位置和值进行二次分组，即结果有二级行索引】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>根据索引层级分组</li></ol><pre class="line-numbers language-python"><code class="language-python">columns <span class="token operator">=</span> pd<span class="token punctuation">.</span>MultiIndex<span class="token punctuation">.</span>from_arrays<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span><span class="token string">'JP'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cty'</span><span class="token punctuation">,</span> <span class="token string">'tenor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>hier_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">)</span>hier_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token string">'cty'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    【当DataFrame有两级列索引时，可以显式选择一个列索引进行分组】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="II、数据聚合"><a href="#II、数据聚合" class="headerlink" title="II、数据聚合"></a>II、数据聚合</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'key1'</span><span class="token punctuation">)</span>grouped<span class="token punctuation">[</span><span class="token string">'data1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span>        【使用quantile聚合函数计算样本分位数】<span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">peak_to_peak</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token keyword">return</span> arr<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> arr<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>agg<span class="token punctuation">(</span>peak_to_peak<span class="token punctuation">)</span>        【使用自定义函数来聚合】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>逐列及多函数应用</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'examples/tips.csv'</span><span class="token punctuation">)</span>tips<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tips<span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span> <span class="token operator">/</span> tips<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span>grouped <span class="token operator">=</span> tips<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'smoker'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【分组】grouped_pct <span class="token operator">=</span> grouped<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span>    【选列】grouped_pct<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token string">'mean'</span><span class="token punctuation">)</span>        【聚合】<span class="token number">2</span><span class="token punctuation">.</span>grouped_pct<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'std'</span><span class="token punctuation">,</span> peak_to_peak<span class="token punctuation">]</span><span class="token punctuation">)</span>        【传入一组函数或函数名，列名默认函数名】grouped_pct<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>std<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        【显示设置列名】<span class="token number">3</span><span class="token punctuation">.</span>functions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> grouped<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> <span class="token string">'total_bill'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>functions<span class="token punctuation">)</span>    【对tipp_pct和totaol_bill列同时执行多个相同的函数，默认列名为函数名】ftuples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Durchschnitt'</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Abweichung'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>var<span class="token punctuation">)</span><span class="token punctuation">]</span>grouped<span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> <span class="token string">'total_bill'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>ftuples<span class="token punctuation">)</span>    【显式设置列名】grouped<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'tip'</span> <span class="token punctuation">:</span> np<span class="token punctuation">.</span>max<span class="token punctuation">,</span> <span class="token string">'size'</span> <span class="token punctuation">:</span> <span class="token string">'sum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        【使用字典来为多个列分别制定特定的函数聚合操作】grouped<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'tip_pct'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'std'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'size'</span> <span class="token punctuation">:</span> <span class="token string">'sum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>返回不含行索引的聚合数据</li></ol><pre class="line-numbers language-python"><code class="language-python">tips<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'smoker'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="III、应用：通用拆分-应用-联合"><a href="#III、应用：通用拆分-应用-联合" class="headerlink" title="III、应用：通用拆分-应用-联合"></a>III、应用：通用拆分-应用-联合</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token string">'tip_pct'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span>column<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span>top<span class="token punctuation">(</span>tips<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>tips<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'smoker'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>top<span class="token punctuation">)</span>    【top函数在DataFrame的各个片段上调用，然后结果由pandas<span class="token punctuation">.</span>concat组装到一起，并以分组名称进行了标记，即将由smoker得到的分组分别应用函数top】tips<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'smoker'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>top<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token string">'total_bill'</span><span class="token punctuation">)</span>    【在上条语句的基础上，显式设置了top函数的实参】result <span class="token operator">=</span> tips<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'smoker'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token string">'smoker'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>压缩分组键</li></ol><pre class="line-numbers language-python"><code class="language-python">tips<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'smoker'</span><span class="token punctuation">,</span> group_keys<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>分位数与桶分析</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'data1'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'data2'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>quartiles <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>frame<span class="token punctuation">.</span>data1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        【利用cut获得范围】<span class="token keyword">def</span> <span class="token function">get_stats</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'min'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'count'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">:</span> group<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>grouped <span class="token operator">=</span> frame<span class="token punctuation">.</span>data2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>quartiles<span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>get_stats<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span>        【利用分位数（范围）来对数据集进行分组，并在组内应用函数】<span class="token number">2</span><span class="token punctuation">.</span>grouping <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>frame<span class="token punctuation">.</span>data1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    【利用qcut获得范围】grouped <span class="token operator">=</span> frame<span class="token punctuation">.</span>data2<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>grouping<span class="token punctuation">)</span>grouped<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>get_stats<span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>示例：使用指定分组值填充缺失值</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nans<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>s<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'Vermont'</span><span class="token punctuation">,</span> <span class="token string">'Florida'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'Idaho'</span><span class="token punctuation">]</span>group_key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'East'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'West'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>states<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Vermont'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Idaho'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nandata<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>group_key<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>fill_mean <span class="token operator">=</span> <span class="token keyword">lambda</span> g<span class="token punctuation">:</span> g<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>g<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        【用分组内的值来填充分组中的NA值，利用对象的自带方法】data<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>group_key<span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>fill_mean<span class="token punctuation">)</span>fill_values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'East'</span><span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'West'</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>fill_func <span class="token operator">=</span> <span class="token keyword">lambda</span> g<span class="token punctuation">:</span> g<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>fill_values<span class="token punctuation">[</span>g<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    【同样的功能，但利用的是外部字典和分组的名字】data<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>group_key<span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>fill_func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>示例：随机采样与排列：从一个大数据集中随机抽取（进行替换或不替换）样本以进行蒙特卡罗模拟（Monte Carlo simulation）或其他分析工作。</li></ol><pre class="line-numbers language-python"><code class="language-python">suits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span>card_val <span class="token operator">=</span> <span class="token punctuation">(</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span>base_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">+</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">]</span>cards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> suit <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    cards<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> suit <span class="token keyword">for</span> num <span class="token keyword">in</span> base_names<span class="token punctuation">)</span>deck <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>card_val<span class="token punctuation">,</span> index<span class="token operator">=</span>cards<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>deck<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> deck<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    【随机从样本集中采取<span class="token number">5</span>行】draw<span class="token punctuation">(</span>deck<span class="token punctuation">)</span>get_suit <span class="token operator">=</span> <span class="token keyword">lambda</span> card<span class="token punctuation">:</span> card<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> deck<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>get_suit<span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>draw<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>deck<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>get_suit<span class="token punctuation">,</span> group_keys<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>draw<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>示例：分组加权平均和相关性</li></ol><pre class="line-numbers language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'category'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'weights'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span>get_wavg <span class="token operator">=</span> <span class="token keyword">lambda</span> g<span class="token punctuation">:</span> np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>g<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> weights<span class="token operator">=</span>g<span class="token punctuation">[</span><span class="token string">'weights'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    【加权平均】grouped<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>get_wavg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>示例：逐组线性回归</li></ol><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="IV、数据透视表与交叉表"><a href="#IV、数据透视表与交叉表" class="headerlink" title="IV、数据透视表与交叉表"></a>IV、数据透视表与交叉表</h4><pre class="line-numbers language-python"><code class="language-python">tips<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'smoker'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tips<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">'smoker'</span><span class="token punctuation">)</span>    【选取tip_pct和size列作为数据列】tips<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'smoker'</span><span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        【传入margins<span class="token operator">=</span><span class="token boolean">True</span>添加分项小计。这将会添加标签为All的行和列，其值对应于单个等级中所有数据的分组统计】tips<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'smoker'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'day'</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span>len<span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    【使用其他的聚合函数，将其传给aggfunc即可。例如，使用count或len可以得到有关分组大小的交叉表（计数或频率）：】tips<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span><span class="token string">'tip_pct'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">,</span> <span class="token string">'smoker'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'day'</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>交叉表：是一种用于计算分组频率的特殊透视表（crosstab）</li></ol><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>data<span class="token punctuation">.</span>Nationality<span class="token punctuation">,</span> data<span class="token punctuation">.</span>Handedness<span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    【利用Nationality的值来作为行索引，Handedness列的值作为列索引】pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span><span class="token punctuation">[</span>tips<span class="token punctuation">.</span>time<span class="token punctuation">,</span> tips<span class="token punctuation">.</span>day<span class="token punctuation">]</span><span class="token punctuation">,</span> tips<span class="token punctuation">.</span>smoker<span class="token punctuation">,</span> margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    【将time和day列的值作为二级行索引】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="第十八章-思维导图"><a href="#第十八章-思维导图" class="headerlink" title="第十八章 思维导图"></a>第十八章 思维导图</h3><p><img src="https://img-blog.csdnimg.cn/20200707145648520.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础英语语法</title>
      <link href="/2020/04/12/ling-ji-chu-ying-yu-yu-fa/"/>
      <url>/2020/04/12/ling-ji-chu-ying-yu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：《零基础英语语法》"><a href="#参考资料：《零基础英语语法》" class="headerlink" title="参考资料：《零基础英语语法》"></a>参考资料：《零基础英语语法》</h1><h1 id="一、词法篇"><a href="#一、词法篇" class="headerlink" title="一、词法篇"></a>一、词法篇</h1><h2 id="1、实词"><a href="#1、实词" class="headerlink" title="1、实词"></a>1、实词</h2><h3 id="1、名词"><a href="#1、名词" class="headerlink" title="1、名词"></a>1、名词</h3><h4 id="I-根据意义分为专有名词和普通名词"><a href="#I-根据意义分为专有名词和普通名词" class="headerlink" title="I. 根据意义分为专有名词和普通名词"></a>I. 根据意义分为专有名词和普通名词</h4><h5 id="1-专有名词"><a href="#1-专有名词" class="headerlink" title="1. 专有名词"></a>1. 专有名词</h5><p>1、专有名词是指特定的人、物、地点等名称的词<br>                2、专有名词首字母都要大写、前面加the时、the不大写。另外，专有名词一般都是不可数名词</p><h5 id="2、普通名词"><a href="#2、普通名词" class="headerlink" title="2、普通名词"></a>2、普通名词</h5><p>1、集合名词<br>$\qquad$ 1、作为主语时表示整个集体概念时、要看成的单个主语、谓语动词要用单数形式<br>2、可数名词<br>3、不可数名词</p><h5 id="3、名词的所有格"><a href="#3、名词的所有格" class="headerlink" title="3、名词的所有格"></a>3、名词的所有格</h5><p>1、名词的所有格是指名词中表示所有关系的格式，一种‘从属’关系，常被译为‘….的’<br>                2、表现形式<br>    $\qquad$                 1、名词+’s    常用于表示人或动物等有生命的名词<br>$\qquad$                     2、of+名词    常用于表示无生命的名词所有格<br>                3、所有关系<br>        $\qquad$             1、人、国家、动物的所有关系<br>    $\qquad$                 2、某人工作、学习或生活的所属关系<br>    $\qquad$                 3、亲属关系<br>    $\qquad$                 4、品质或性格<br>    $\qquad$                 5、有生命的名词所有格形式也可以用‘of+名词’的形式。如the car of John<br>        $\qquad$             6、时间的所有格形式用’s。如a day’s work<br>    $\qquad$                 7、定冠词the加店铺名、餐馆名或职位名再加’s表示相应的名称。如the doctor’s 医院</p><h4 id="II-根据可数性分为可数名词和不可数名词"><a href="#II-根据可数性分为可数名词和不可数名词" class="headerlink" title="II. 根据可数性分为可数名词和不可数名词"></a>II. 根据可数性分为可数名词和不可数名词</h4><h5 id="1、可数名词"><a href="#1、可数名词" class="headerlink" title="1、可数名词"></a>1、可数名词</h5><p>1、单数形式需要在前面加a、an、the来修饰<br>                2、可数名词是可以量化可数的名词<br>                3、可数名词有单数和复数之分<br>                4、可数名词可以用many修饰<br>                5、可数名词的复数变化<br>$\qquad$                     1、一般情况下单词变复数形式在末尾加s<br>$\qquad$                     2、单词以s/ch/x/sh结尾、变复数时加es<br>$\qquad$                     3、单词以y结尾、且y的前面的字母是辅音字母、要把y变i再加es<br>$\qquad$                     4、单词以o结尾、加es<br>$\qquad$                     5、单词以f或fe结尾、把f或fe变v再加es<br>    $\qquad$                 6、特殊变形<br>$\qquad$ $\qquad$                         1、把词尾的is变成es<br>$\qquad$ $\qquad$                         2、元音发生变化，oo变es、an变en<br>$\qquad$ $\qquad$                         3、ous变ic<br>$\qquad$ $\qquad$                         4、其他特殊变形<br>$\qquad$                     7、单复同形的名词</p><h5 id="2、不可数名词"><a href="#2、不可数名词" class="headerlink" title="2、不可数名词"></a>2、不可数名词</h5><p>1、不可数名词没有复数形式<br>                2、不可数名词是由量而不是数来量化的<br>                3、不可数名词前面不加限定词a、an或者其他表示数字的词<br>                4、不可数名词可用much修饰</p><h5 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h5><p>1、much修饰不可数名词、many修饰可数名词<br>                2、little修饰不可数名词、few修饰可数名词<br>                3、a little of 只能修饰不可数名词<br>                4、有些词既可以修饰可数又可以修饰不可数<br>$\qquad$                     1、some/any<br>$\qquad$                     2、a lot of/lots of<br>$\qquad$                     3、enough<br>$\qquad$                     4、no<br>$\qquad$                     5、plenty of<br>                5、有些单词在不同含义时持有可数二义性<br>    $\qquad$                 1、Light   当为‘灯光、光亮’时，是不可数名词、当为‘灯泡’时，是可数名词<br>$\qquad$                     2、experience    当为‘经验’时，是不可数名词、当为‘经历’时，是可数名词<br>$\qquad$         3、用动词加上ing形式构成的名词叫做动名词<br>$\qquad$         4、由两个或两个以上的词复合而成的名词叫做复合名词</p><h5 id="4、复合名词"><a href="#4、复合名词" class="headerlink" title="4、复合名词"></a>4、复合名词</h5><p>1、形式<br>    $\qquad$                  1、由两个单词组成而成。如bedroom<br>$\qquad$                     2、通过连字符‘-’连接成复合词。如check-in<br>                2、注意事项<br>    $\qquad$                 1、大多数复合名词都是由名词与另外一个名词或者形容词复合而成的</p><h3 id="2、动词"><a href="#2、动词" class="headerlink" title="2、动词"></a>2、动词</h3><h4 id="1、动词按照其谓语的功能分为以下四类"><a href="#1、动词按照其谓语的功能分为以下四类" class="headerlink" title="1、动词按照其谓语的功能分为以下四类"></a>1、动词按照其谓语的功能分为以下四类</h4><h5 id="1、系动词"><a href="#1、系动词" class="headerlink" title="1、系动词"></a>1、系动词</h5><p>1、系动词be<br>                2、非be形式的系动词<br>                3、注意事项<br>    $\qquad$                 1、系动词后必须接表语才能完整表达主语的意思，不能单独作谓语使用<br>$\qquad$                      2、必须与名词或形容词连用来表示主语的性质、状态、特征等情况，与系动词连用的这些名词或形容词叫做主语补足语<br>$\qquad$                     3、系动词是用来表示主语的动词。如am、is<br>$\qquad$                     4、如何判断动词为系动词<br>    $\qquad$ $\qquad$                     1、用am/is/are代替该动词，若仍然读的通，则可判断其为系动词<br>$\qquad$                     5、系动词和副词连用的形式是错误的。如looked happily<br>$\qquad$                     6、连接主语和补语中间的动词叫做系动词。如She is…的is<br>$\qquad$                     7、系动词后面可以加宾语也可以不加宾语，主要看特定的系动词</p><h5 id="2、实意动词"><a href="#2、实意动词" class="headerlink" title="2、实意动词"></a>2、实意动词</h5><p>1、及物动词<br>$\qquad$                     1、动词后面需要接宾语的动词叫做及物动词<br>$\qquad$                     2、动词后面可以接直接宾语和间接宾语的动词叫做双及物动词<br>                2、不及物动词<br>$\qquad$                     1、动词后面不需要接宾语就能表达完整的意思的动词叫做不及物动词<br>                3、注意事项<br>    $\qquad$                 1、大多数动词既是及物动词又是不及物动词<br>    $\qquad$                 2、实意动词也叫行为动词，即表示行为动作的动词，它们是表示动态的动词，标志着某事正在发生</p><h5 id="3、助动词"><a href="#3、助动词" class="headerlink" title="3、助动词"></a>3、助动词</h5><p>1、助动词be<br>$\qquad$                     1、进行时态<br>$\qquad$         $\qquad$                 1、She is/was playing golf  现在/过去进行时<br>$\qquad$         $\qquad$                 2、She has/had been playing golf 现在/过去完成进行时<br>        $\qquad$             2、被动语态<br>$\qquad$     $\qquad$                     1、The house is/was built 一般现在/过去被动时<br>$\qquad$ $\qquad$                         2、The house has/had been bulit 现在/过去完成被动时<br>$\qquad$     $\qquad$                     3、The house will be built 将来被动时<br>    $\qquad$                 3、注意事项<br>$\qquad$     $\qquad$                     1、其后面必须接另一个动词<br>$\qquad$     $\qquad$             2、助动词have<br>$\qquad$ $\qquad$     $\qquad$                 1、使用方式<br>$\qquad$ $\qquad$ $\qquad$     $\qquad$                     1、He has/had played football 现在/过去完成时<br>$\qquad$ $\qquad$ $\qquad$     $\qquad$                     2、He has/had been playing football 现在/过去完成进行时<br>$\qquad$ $\qquad$ $\qquad$     $\qquad$                     3、The house has/had been built 现在/过去完成被动语态<br>$\qquad$ $\qquad$ $\qquad$                     2、注意事项<br>    $\qquad$ $\qquad$ $\qquad$     $\qquad$                 1、have可以用作助动词、也可以用作主要动词<br>$\qquad$ $\qquad$                 3、助动词will<br>    $\qquad$ $\qquad$ $\qquad$                 1、使用方式<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$                         1、He will not play football 将来时<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$                         2、He will have played football 将来完成时<br>$\qquad$ $\qquad$ $\qquad$                     2、注意事项<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$                         1、will只能用作助动词、构成将来时态<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$                         2、否定句中will not=won’t<br>    $\qquad$ $\qquad$             4、助动词do<br>$\qquad$ $\qquad$ $\qquad$                     1、使用方式<br>    $\qquad$ $\qquad$ $\qquad$ $\qquad$                     1、否定句<br>    $\qquad$ $\qquad$ $\qquad$ $\qquad$ $\qquad$                         1、He does/did not play football 一般现在/过去时<br>    $\qquad$ $\qquad$ $\qquad$ $\qquad$                     2、疑问句<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$ $\qquad$                             1、Does/Did he play football 一般现在/过去时<br>    $\qquad$ $\qquad$ $\qquad$                 2、注意事项<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$                         1、do可以用作助动词、也可以用作主要动词<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$                         2、作助动词时只能用于一般现在时和一般过去时的否定句和疑问句中<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$                         3、如果我们在否定句或者疑问句中需要用do来做主要动词、那么就需要另外一个do来做助动词。如<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$ $\qquad$                                     1、She doesn’t do her homework every day<br>$\qquad$ $\qquad$ $\qquad$ $\qquad$ $\qquad$                             2、Does she do her homework every day?<br>$\qquad$ $\qquad$             5、注意事项<br>$\qquad$$\qquad$     $\qquad$                              1、助动词是指用来帮助主要动词共同表示谓语的动词，不可单独使用<br>$\qquad$     $\qquad$     $\qquad$                         2、助动词主要用来构成动词的时态和语态，如be、have、shall</p><h5 id="4、情态动词"><a href="#4、情态动词" class="headerlink" title="4、情态动词"></a>4、情态动词</h5><p>1、指形容说话人的情绪、看法或语气的动词。如can、could、must、may<br>                2、情态动词不能单独使用，必须后接动词原形<br>                3、情态动词的用法<br>$\qquad$                         1、must=have to    必须<br>$\qquad$                         2、must not=not allowed to    不必<br>$\qquad$                         3、can=be able to    可能<br>$\qquad$                         4、may=be allowed to    可能<br>$\qquad$                         5、need=have to    需要<br>$\qquad$                         6、need not=not have to    不需要<br>$\qquad$                         7、情态动词的表推测：用于表达某种可能或不可能的情况<br>    $\qquad$                     8、can和could表示能力<br>    $\qquad$                     9、must用来表示某事极其的重要或对某事的肯定，汉语翻译为‘准是，必须’；should用来表示一种劝告或建议，译为‘应该’<br>$\qquad$                         10、can、could、may用来表示某种请求、允许和拒绝<br>    $\qquad$                     11、will、would用来表示某种习惯或倾向<br>                4、注意事项<br>$\qquad$                         1、在英语中总共有10个情态动词,常用的有8个动词，如can(could),may(might),will(would),need,must,dare,shall(should),ought<br>    $\qquad$                     2、情态动词没有人称和数的变化，在与第三人称单数连用时不需要加s。<br>$\qquad$                         3、在任何句型中，后面都必须加动词原形</p><h4 id="2、动词按照在句中的作用分为谓语动词和非谓语动词"><a href="#2、动词按照在句中的作用分为谓语动词和非谓语动词" class="headerlink" title="2、动词按照在句中的作用分为谓语动词和非谓语动词"></a>2、动词按照在句中的作用分为谓语动词和非谓语动词</h4><h5 id="1、这类动词可以在句子中做主要动词或者充当形容词或名词"><a href="#1、这类动词可以在句子中做主要动词或者充当形容词或名词" class="headerlink" title="1、这类动词可以在句子中做主要动词或者充当形容词或名词"></a>1、这类动词可以在句子中做主要动词或者充当形容词或名词</h5><h5 id="2、谓语动词"><a href="#2、谓语动词" class="headerlink" title="2、谓语动词"></a>2、谓语动词</h5><p>1、可以在句子中做主要动词、它的形式由主语人称与数的变化而决定</p><h5 id="3、非谓语动词"><a href="#3、非谓语动词" class="headerlink" title="3、非谓语动词"></a>3、非谓语动词</h5><p>1、不定式<br>$\qquad$                         1、是由动词前面加上to构成的，可作名词、形容词或副词、具有动词的特性、有时态和语态的变化<br>$\qquad$                         2、使用方式<br>$\qquad$     $\qquad$                             1、不定式作主语<br>$\qquad$     $\qquad$     $\qquad$                                 1、To follow his advice seemed logical<br>$\qquad$     $\qquad$                             2、作定语<br>$\qquad$     $\qquad$     $\qquad$                                 1、Phil agreed to give me a ride<br>$\qquad$     $\qquad$                             3、作补语<br>$\qquad$     $\qquad$     $\qquad$                                 1、His ambition is to fly<br>$\qquad$     $\qquad$                             4、作形容词<br>$\qquad$     $\qquad$     $\qquad$                                 1、He lacked the strength to resist<br>    $\qquad$     $\qquad$                         5、作副词<br>$\qquad$     $\qquad$     $\qquad$                                 1、We must study to learn<br>                2、动名词<br>$\qquad$                         1、是指动词+ing形式构成的名词，可以作主语、直接宾语、主语补足语和介词宾语<br>    $\qquad$                     2、动词的特性<br>$\qquad$     $\qquad$                             1、动名词以ing形式结尾，作名词使用<br>$\qquad$     $\qquad$                             2、动名词短语由动名词+修饰词、宾语或补语组成<br>$\qquad$                         3、使用方式<br>$\qquad$     $\qquad$                             1、动名词作主语<br>$\qquad$     $\qquad$                             2、作直接宾语<br>    $\qquad$     $\qquad$                         3、作主语补足语<br>    $\qquad$     $\qquad$                         4、作介词宾语<br>                3、分词<br>$\qquad$                         1、动词的过去分词<br>    $\qquad$     $\qquad$                         1、用在完成时态中。如I have spoken<br>    $\qquad$     $\qquad$                         2、用在被动语态中。如The letter was written<br>$\qquad$     $\qquad$                             3、用作形容词形式。如I was bored to death<br>$\qquad$                         2、动词的现在分词<br>$\qquad$     $\qquad$                             1、在进行时态中。如I am speaking<br>$\qquad$     $\qquad$                             2、作动名词。如He is afraid of flying<br>$\qquad$     $\qquad$                             3、作形容词。如The film is interesting<br>    $\qquad$                     3、分词短语中逗号的使用<br>$\qquad$     $\qquad$                             1、当分词短语放在句首时，必须使用逗号与主句隔开<br>$\qquad$     $\qquad$                             2、当分词放在句中，在句中不充当重要成分时必须前后都用逗号隔开<br>$\qquad$                         4、注意事项<br>$\qquad$     $\qquad$                             1、分词的作用是在句子充当形容词使用，因此可以修饰名词或代词<br>    $\qquad$     $\qquad$                         2、过去分词以ed结尾、现在分词以ing结尾<br>    $\qquad$     $\qquad$                         3、分词短语包括分词和修饰词，包括修饰名词或代词<br>    $\qquad$     $\qquad$                         4、分词和分词短语必须紧跟名词或代词，这些名词或代词必须明确</p><h5 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h5><p>1、不可以在句子中做主要动词、不受主语的变化影响，也不能决定时态的变化<br>$\qquad$                             1、Arriving at the store,I found that it had been closed<br>                    2、一般在句子充当名词、副词或形容词的作用<br>$\qquad$                             1、Sid,watching an old movie,drifted in and out of sleep</p><h4 id="3、按照动词时态变形的规则可分为规则动词和不规则动词"><a href="#3、按照动词时态变形的规则可分为规则动词和不规则动词" class="headerlink" title="3、按照动词时态变形的规则可分为规则动词和不规则动词"></a>3、按照动词时态变形的规则可分为规则动词和不规则动词</h4><h5 id="1、规则动词"><a href="#1、规则动词" class="headerlink" title="1、规则动词"></a>1、规则动词</h5><p>1、是指过去式和过去分词一致，且都是由动词加上-d（动词结尾是e）或-ed形式构成的词</p><h5 id="2、不规则动词"><a href="#2、不规则动词" class="headerlink" title="2、不规则动词"></a>2、不规则动词</h5><h5 id="3、代词"><a href="#3、代词" class="headerlink" title="3、代词"></a>3、代词</h5><hr><pre><code>    -------------------------------------------------------      人称代词        物主代词           反身代词    主格  宾格   形容词性  名词性      -------------------------------------------------------    I     me       my      mine        myself    you  you      your     yours       yourself    he   him      his      his         himself    she  her      her      hers        herself    it   it       its      its         itself    we   us       our      ours        ourselves    you  you      your     yours       yourselves    they them     their    theirs      themselves    -------------------------------------------------------</code></pre><hr><hr><pre><code>          关系代词          指示代词   疑问代词  不定代词    指人  指物  指人或指物    this       what     some     ----------------------    who   which  that        that       who       any    whom  that   that        these      whose     something    whose whose  of which   those       which     anything          of which whose    --------------------------------------------------------</code></pre><hr><p>1、人称代词<br>    $\qquad$             1、主格<br>    $\qquad$             2、宾格<br>    $\qquad$             3、注意事项<br>    $\qquad$     $\qquad$                 1、在数的变化上与名词保持一致<br>    $\qquad$     $\qquad$                 2、在人称上与名词保持一致<br>    $\qquad$     $\qquad$                 3、清楚地指代具体的名词<br>$\qquad$     $\qquad$                     4、单词everyday、anybody、anyone、each、neither、nobody、someone只能用单数代词<br>        2、指示代词<br>$\qquad$                 1、是用来指代一个或多个名词，基本的指示代词有四个：this、that、these和those<br>$\qquad$                 2、注意事项<br>$\qquad$     $\qquad$                     1、指示代词可以指示时间或日期<br>        3、物主代词<br>$\qquad$                 1、形容词性物主代词<br>$\qquad$                 2、名词性物主代词<br>$\qquad$                 3、注意事项<br>$\qquad$     $\qquad$                     1、 是指事物的属性、有所属关系、具有指代作用<br>        4、反身代词<br>$\qquad$                 1、是指自身动作对自身的影响，反应的是当某人或某事受一个动作影响时，动作的实施者就是它本身。<br>$\qquad$                 2、用作加强所指代词，用在居中加强前面代词的语气<br>        5、关系代词<br>$\qquad$                 1、指人<br>$\qquad$                 2、指物<br>$\qquad$                 3、指人或指物<br>$\qquad$                 4、限定性关系从句<br>$\qquad$     $\qquad$                     1、关系代词在句中修饰主语<br>$\qquad$     $\qquad$                     2、修饰宾语<br>$\qquad$     $\qquad$ $\qquad$     1、在指代宾语的人或物时，关系代词可以省略<br>$\qquad$     $\qquad$                 3、关系代词在句中作所有格形式<br>$\qquad$     $\qquad$     $\qquad$                         1、whose是英语中唯一的一个所有格关系代词，whose的先行词可以是人也可以是物<br>$\qquad$                 5、非限定性关系从句<br>$\qquad$     $\qquad$                     1、关系代词在句中修饰主语<br>$\qquad$     $\qquad$                     2、修饰宾语<br>    $\qquad$         6、常见关系代词的使用<br>$\qquad$     $\qquad$                     1、that与who/which<br>$\qquad$     $\qquad$     $\qquad$                         1、that只能用在限定性关系从句中，在指代人时可以被who代替；在指代物时可以被which代替。that常用在口语中，who/which常用在书面语中<br>$\qquad$     $\qquad$                     2、that/who<br>    $\qquad$     $\qquad$     $\qquad$                     1、在指代人时，that与who可以互换<br>$\qquad$     $\qquad$     $\qquad$                         2、在指代特定的人时，要用who<br>$\qquad$     $\qquad$                     3、that/which<br>    $\qquad$     $\qquad$     $\qquad$                     1、 在一些情况下，常用that而不用which<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                             1、在不定代词all,any(anything),every(everything),few,little,many,much,no(nothing),none,some(something)之后<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                             2、放在被形容词的最高级修饰的名词之后<br>$\qquad$     $\qquad$                     4、在most,many,some,both,none之后用of whom指代人，用of which指代物<br>    $\qquad$             7、注意事项<br>$\qquad$     $\qquad$                     1、关系代词引导关系从句，而关系从句是一种独立的从句，修饰一个单词、词组或者主句的中心词，被修饰的部分被称为先行词。<br>$\qquad$     $\qquad$                     2、关系代词在限定性关系从句中不用逗号隔开。限定性关系从句在主句中增加先行词的基本信息，基本信息对正确理解句子至关重要，不能省略。也就是                    说，没有限制性关系从句，句子就没有意义。<br>$\qquad$     $\qquad$                     3、关系代词在非限定性关系从句中需要用逗号隔开。<br>$\qquad$     $\qquad$                     4、that不能用于非限定性关系从句中，可以用who/which代替<br>$\qquad$     $\qquad$                     5、用who指代人；which指代物或者在非限定性从句中指代前面的整个主句<br>    $\qquad$     $\qquad$                 6、that前面不能加逗号<br>        6、疑问代词<br>$\qquad$                 1、被用作提问我们不知道的人或物<br>$\qquad$                 2、who/whom<br>$\qquad$     $\qquad$                     1、who用于提问人的主语，用于提问动作的实施者<br>$\qquad$     $\qquad$                     2、whom用于提问人的宾语，也就是提问动作的接受者<br>        7、不定代词<br>$\qquad$                 1、指代的不是具体的人或物，可以是单数也可以是复数<br>$\qquad$                 2、单数<br>                another、anybody、anyone、anything、each、either、everybody、everyone、everything、little、much、neither、nobody、no one、nothing、<br>                one、other、somebody、someone、something<br>$\qquad$                 3、复数<br>                both、few、many、others、several<br>$\qquad$                 4、单复数都可以用<br>                all、any、more、most、none、some<br>        8、注意事项<br>            1、代词是指在句子中可以代替名词的词</p><h5 id="4、数词"><a href="#4、数词" class="headerlink" title="4、数词"></a>4、数词</h5><p>1、基数词<br>$\qquad$                 1、主要表示数目的多少<br>$\qquad$                 2、基数词的表示方法<br>$\qquad$     $\qquad$                     1、表示1-12的基数词。如<br>$\qquad$     $\qquad$ $\qquad$                             1、eleven    twelve<br>$\qquad$     $\qquad$                     2、数词13-19以teen结尾。特殊的<br>$\qquad$     $\qquad$     $\qquad$                         1、thirteen     fifteen     eighteen<br>$\qquad$     $\qquad$                     3、十位数之内的整数以ty结尾。特殊的<br>$\qquad$     $\qquad$     $\qquad$                         1、twenty    thirty         forty<br>$\qquad$     $\qquad$                     4、几十几的数词要加连字符“-”如<br>    $\qquad$     $\qquad$     $\qquad$                     1、thirty-two<br>$\qquad$     $\qquad$                     5、百位以上的数词，用hundred和thousand。包含十位数及以下的数字用and连接。如<br>$\qquad$     $\qquad$     $\qquad$                         1、two thousand        one hundred and twenty-three<br>$\qquad$     $\qquad$                     6、英语中没有“万”的概念，常常用thousand来表示。如<br>    $\qquad$     $\qquad$     $\qquad$                     1、ten thousand<br>$\qquad$     $\qquad$                     7、百万以上用million/billion<br>    $\qquad$             3、注意事项<br>$\qquad$     $\qquad$                     1、表示确切的数目时用单数，表示不确切的数目时用复数+of的形式。如<br>$\qquad$     $\qquad$     $\qquad$                         1、tens of thousands of 成千上百</p><p>2、序数词<br>$\qquad$                 1、主要表示数目的先后顺序<br>$\qquad$                 2、第一、第二、第三的序数词形式特殊记。如 first second third，可以缩写为1st 2nd 3rd<br>$\qquad$                 3、20以内的序数词由“基数词+th”构成。特殊的<br>    $\qquad$     $\qquad$                 1、fifth 5th    eighth 8th    ninth 9th    twelfth 12th<br>    $\qquad$             4、整十的基数变序数：把词尾y变i再加eth。如<br>    $\qquad$     $\qquad$                 1、twentieth 20th<br>$\qquad$                 5、表达第几十几的序数词，用连字符“-”，前面用基数词、后面用序数词。如<br>    $\qquad$     $\qquad$                 1、twenty-first 21th<br>    $\qquad$             6、百位以上的序数词，在词尾直接加th。如<br>$\qquad$     $\qquad$                     1、one hundredth 100th        one thousandth 1000th    注：这里的one不能用a代替<br>        3、数词的读法<br>$\qquad$                 1、序数词的读法<br>$\qquad$     $\qquad$                     1、在读序数词时、在序数词前面要加上the。如<br>$\qquad$     $\qquad$     $\qquad$                         1、the first 1st<br>$\qquad$                 2、分数的读法<br>$\qquad$     $\qquad$                     1、分子用基数词，分母用序数词。如<br>$\qquad$     $\qquad$     $\qquad$                         1、1/3 one third、1/4 one quarter、1/2 one half<br>$\qquad$     $\qquad$                     2、五又二分之一的表示方法<br>$\qquad$     $\qquad$     $\qquad$                         1、在整数与分数之间加and。如<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                             1、five and a half<br>$\qquad$                 3、小数的读法<br>$\qquad$     $\qquad$                     1、需用到point且小数点后面的数字都是各发各音。如<br>$\qquad$     $\qquad$     $\qquad$                         1、one point two five 1.25<br>$\qquad$                 4、日期的读法<br>    $\qquad$     $\qquad$                 1、按照月、日、年的顺序表示，这是美式英语的表达。如<br>    $\qquad$     $\qquad$     $\qquad$                     1、March 6, 2008读作March sixth two thousand and eight<br>$\qquad$     $\qquad$                     2、按照日、月、年的顺序表示、这是英式英语的表达。如<br>$\qquad$     $\qquad$     $\qquad$                         1、6th March, 2008读作the sixth of March,two thousand and eight<br>        4、数词的用法<br>$\qquad$                 1、表示日期<br>$\qquad$     $\qquad$                     1、年<br>$\qquad$     $\qquad$     $\qquad$                         1、世纪的表达<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                             1、用序数词，并在前面加the。如<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$     $\qquad$                                 1、the twentieth century 公元20世纪<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                             2、用定冠词the加表示世纪的基数词加’s。如<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$     $\qquad$                                 1、the 1880’s 19世纪80年代<br>$\qquad$     $\qquad$                     2、日<br>$\qquad$     $\qquad$     $\qquad$                         1、表达日期要用序数词、也可以直接写成基数词，但是读法要读成序数词。如<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                         1、March 6 三月六日,读作March sixth<br>    $\qquad$             2、表示时间<br>$\qquad$     $\qquad$                         1、整点的时间<br>$\qquad$     $\qquad$     $\qquad$                             1、用基数词-o’clock来表示。如<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                                 1、three o’clock 三点<br>$\qquad$     $\qquad$                         2、具体的时间<br>$\qquad$     $\qquad$     $\qquad$                             1、用to或past来表示。如<br>$\qquad$     $\qquad$     $\qquad$         $\qquad$                             1、7:15 a quarter past seven 或 seven fifteen<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                                 2、7:30 half past seven 或 seven thirty<br>$\qquad$     $\qquad$     $\qquad$     $\qquad$                                 3、7：45 a quarter to eight 或 seven forty-five</p><h5 id="5、形容词与副词"><a href="#5、形容词与副词" class="headerlink" title="5、形容词与副词"></a>5、形容词与副词</h5><p>1、形容词<br>$\qquad$                 1、表示性质的形容词。如honest、kind、large<br>$\qquad$                 2、表示数量的形容词（但不提供确切的数字、只是告诉名词相对数量或全部数量）。如all、half、many<br>$\qquad$                 3、表示数目的形容词<br>$\qquad$     $\qquad$                     1、具体的数字形容词。如基数词和序数词<br>$\qquad$     $\qquad$                     2、非具体的数字形容词。如some、many、few、any<br>$\qquad$     $\qquad$                     3、分配形容词。如either、neither、each、another、other<br>$\qquad$     $\qquad$     $\qquad$                         例:Taxes have to be paid by every employed citizen<br>$\qquad$                      4、指示形容词。如this、that、these、those<br>$\qquad$     $\qquad$                         例：I really like those shoes<br>$\qquad$                      5、表示疑问的形容词。如where、what、which、whose<br>$\qquad$     $\qquad$                      例：what assignment did I miss out on?<br>        2、并列形容词<br>$\qquad$                 1、指两个或以上的形容词可以随意排列、语法依然正确的一类形容词，中间需要用逗号隔开或者and连接<br>    $\qquad$     $\qquad$                 例：She was a lovin, kind and generous human being<br>        3、非并列形容词<br>$\qquad$                 1、指不能随意排列、只能放在固定位置，不需要用逗号隔开或用and连接的形容词<br>        4、副词<br>$\qquad$                 1、是指在句子中修饰动词、形容词或另一个副词的词，常被译为‘…地’<br>$\qquad$                 2、形容词至副词的变换<br>$\qquad$ $\qquad$                         1、以y结尾的形容词变副词时把y变i再加‘-ly’<br>$\qquad$     $\qquad$                     2、以e结尾的形容词变副词时去掉e再加‘-ly’<br>$\qquad$$\qquad$                          3、有些以ly结尾的形容词可作副词使用<br>$\qquad$                 3、副词的用法<br>$\qquad$     $\qquad$                     1、副词修饰形容词，放在形容词之前<br>$\qquad$     $\qquad$     $\qquad$                         例：That’s really nice<br>$\qquad$     $\qquad$                     2、副词修饰另一个副词时，也放在该副词之前<br>$\qquad$     $\qquad$     $\qquad$                         例：She did it really well<br>$\qquad$     $\qquad$                     3、副词修饰名词，表示时间或地点<br>$\qquad$     $\qquad$     $\qquad$                         例：The concert tomorrow<br>$\qquad$     $\qquad$                     4、一些表示程度的副词可以修饰名词短语<br>    $\qquad$     $\qquad$     $\qquad$                     例：We had quite a good time<br>    $\qquad$     $\qquad$                 5、副词修饰限定词、数词和代词<br>$\qquad$     $\qquad$     $\qquad$                         例：Nearly everyone,who was invited,came to the party<br>$\qquad$     $\qquad$                     6、副词修饰整个句子<br>$\qquad$     $\qquad$     $\qquad$                     例：Luckily the car stopped in time<br>$\qquad$                 4、副词的种类<br>$\qquad$     $\qquad$                     1、时间副词<br>$\qquad$     $\qquad$                     2、地点副词<br>$\qquad$     $\qquad$                     3、方式副词<br>    $\qquad$     $\qquad$                 4、频度副词<br>$\qquad$     $\qquad$                     5、程度副词<br>$\qquad$     $\qquad$                     6、表示肯定和否定的副词<br>$\qquad$     $\qquad$                     7、表示评论，如简单，困难等副词<br>$\qquad$     $\qquad$                     8、可作连词使用的副词。使用这类副词时要在它前面加上分号<br>$\qquad$     $\qquad$ $\qquad$                         例：He was going for an important interview;accordingly,he made sure he reached on time<br>$\qquad$$\qquad$$\qquad$                    1、该类副词还有：<br>$\qquad$$\qquad$$\qquad$$\qquad$                        1、表转折however/yet/on the other hand/in spite of<br>$\qquad$$\qquad$$\qquad$$\qquad$                                2、表结果consequently/as a result/resulting in<br>$\qquad$$\qquad$$\qquad$$\qquad$                                3、表递进moreover/beside/in addition<br>$\qquad$$\qquad$$\qquad$$\qquad$                                4、表对立conversely/opposite of/contrary to</p><h2 id="2、虚词"><a href="#2、虚词" class="headerlink" title="2、虚词"></a>2、虚词</h2><h3 id="1、冠词"><a href="#1、冠词" class="headerlink" title="1、冠词"></a>1、冠词</h3><p>1、是指用于名词前面说明名词是特指还是泛指，可数还是不可数的一种虚词<br>        2、一般而言、冠词就是形容词，用于修饰名词<br>        3、定冠词（the）<br>$\qquad$            1、the用来修饰特定的、具体的名词<br>$\qquad$            2、定冠词的用法<br>$\qquad$$\qquad$                1、用在之前已经有所提到的名词或客观存在的名词之前<br>$\qquad$$\qquad$                2、定冠词可以用单数和复数名词之前<br>        4、不定冠词(a/an)<br>$\qquad$            1、a/an用来修饰不明确的、泛指的名词<br>$\qquad$            2、不定冠词的用法<br>$\qquad$$\qquad$                1、a放在开头发辅音的单词之前，放在以h发音的单词之前<br>$\qquad$$\qquad$                2、an放在开头发元音的单词之前，放在以h开头不发音、但后跟的字母发元音的单词之前<br>$\qquad$$\qquad$                3、不定冠词修饰的都是可数名词单数，不能修饰复数名词或不可数名词<br>$\qquad$$\qquad$                4、首次谈到某事物时、用不定冠词<br>    $\qquad$$\qquad$            5、在询问某事是否存在时、用不定冠词<br>$\qquad$$\qquad$                6、在介绍谈论的事物类型的时候、也用不定冠词<br>        5、冠词的省略<br>$\qquad$            1、在一些类型的名词前面不加冠词<br>$\qquad$$\qquad$                1、语言和国籍的名称<br>$\qquad$$\qquad$                2、体育运动的名称<br>$\qquad$$\qquad$                3、学科的名称<br>$\qquad$$\qquad$                4、城市、城镇或政府的名称<br>$\qquad$$\qquad$                5、街道的名称<br>$\qquad$$\qquad$                6、湖泊的名称<br>$\qquad$$\qquad$                7、大陆的名称<br>$\qquad$            2、加the的情况<br>$\qquad$$\qquad$                1、河流、海洋的名字<br>$\qquad$$\qquad$                2、地理区域，如 the North Pole</p><h3 id="2、连词"><a href="#2、连词" class="headerlink" title="2、连词"></a>2、连词</h3><p>1、是指联系两个单词、短语或句子，并表示它们之间关系的单词<br>        2、并列连词<br>$\qquad$            1、连接句子的各个部分，可以是两个独立的句子、名词短语、形容词、副词等，被连接的两部分在句法上的地位平等<br>$\qquad$            2、常见的并列连词有：<br>$\qquad$$\qquad$                for and nor but or yet so 其中nor必须放在neither…nor结构中使用<br>        3、从属连词<br>$\qquad$            1、连接从属分句和主要动词，并表示他们之间的关系。从属连词主要引导名词性从句和状语从句<br>$\qquad$            2、常见的从属连词有：<br>$\qquad$$\qquad$                after although because before if therefore unless when while<br>        4、关联词<br>$\qquad$            1、指成对出现的连词<br>$\qquad$            2、并列连词中有：<br>$\qquad$$\qquad$                1、both…and     两者都….<br>$\qquad$$\qquad$                2、either…or     两者选其一<br>$\qquad$$\qquad$                3、neither…nor     两者都不<br>$\qquad$$\qquad$                4、not only…but also     不但…而且…<br>$\qquad$            3、从属连词中有：<br>$\qquad$$\qquad$                    1、if..then     如果…那么…<br>$\qquad$$\qquad$                    2、less…han     比…少<br>$\qquad$$\qquad$                    3、more…than    比…多<br>$\qquad$$\qquad$                    4、so…that    如此…以至…<br>$\qquad$$\qquad$                    5、whether…or    是…还是…；不管…还是…<br>$\qquad$$\qquad$                    6、just as…so    像…一样,所以…</p><h3 id="3、介词和感叹词"><a href="#3、介词和感叹词" class="headerlink" title="3、介词和感叹词"></a>3、介词和感叹词</h3><p>1、介词<br>$\qquad$            1、不能单独使用、大多数都放在名词之前，介词没有任何变形<br>    $\qquad$            2、方位介词<br>$\qquad$    $\qquad$                    1、指用来指代某物的具体位置的介词。有三个方位介词。如 at  in on<br>$\qquad$                3、时间介词<br>$\qquad$$\qquad$                        1、at 表示精准的时间<br>$\qquad$    $\qquad$                    2、in 用在表示年、月、世纪等日期之前<br>$\qquad$    $\qquad$                    3、on 用在日期之前<br>        $\qquad$        4、表运动的介词<br>$\qquad$    $\qquad$                    1、to 表地点<br>    $\qquad$    $\qquad$                2、towards 表朝着…方向<br>$\qquad$$\qquad$                        3、through 表通过…，从这边到那边<br>$\qquad$$\qquad$                        4、into 表示从外部进入内部<br>$\qquad$$\qquad$                        5、across 表示从一端运动到另一端<br>$\qquad$    $\qquad$                    6、over 表示在…之上<br>$\qquad$    $\qquad$                    7、along 表示沿着…运动<br>$\qquad$    $\qquad$                    8、in 表示在…内部<br>$\qquad$$\qquad$                        9、on 表示在…之上<br>        2、感叹词</p><h1 id="二、句法篇"><a href="#二、句法篇" class="headerlink" title="二、句法篇"></a>二、句法篇</h1><h2 id="1、句子分类"><a href="#1、句子分类" class="headerlink" title="1、句子分类"></a>1、句子分类</h2><p>1、陈述句<br>$\qquad$            1、肯定句<br>$\qquad$            2、否定句<br>    2、祈使句<br>$\qquad$            1、第一种是以动词原型开头，或者是在动词原型之前+do，否定形式则加don’t。如<br>$\qquad$    $\qquad$                1、Stand up！<br>$\qquad$    $\qquad$                2、Do study hard  一定要努力学习<br>$\qquad$    $\qquad$                3、Don’t stay up late  不要熬夜<br>$\qquad$            2、第二种是用let开头<br>$\qquad$    $\qquad$                1、有两种形式、let’s…和let us…。其区别主要体现在它们的反义疑问句和否定句中。<br>$\qquad$    $\qquad$                2、反义疑问句<br>$\qquad$    $\qquad$    $\qquad$                    1、Let’s have a rest,shall we? 我们休息一下吧，好吗？<br>$\qquad$    $\qquad$    $\qquad$                    2、Let us have a rest,will you?    你让我们休息一下吧，好吗？<br>$\qquad$    $\qquad$                3、否定句<br>$\qquad$$\qquad$    $\qquad$                        1、Let’s not play games all day.    我们不要整天打游戏了<br>$\qquad$    $\qquad$    $\qquad$                    2、Let us not play games all day.    你不要让我们整天打游戏了<br>    3、感叹句<br>$\qquad$            1、由how引导的感叹句<br>    $\qquad$    $\qquad$            1、how+形容词<br>    $\qquad$    $\qquad$    $\qquad$                1、how beautiful she is!<br>    $\qquad$    $\qquad$            2、how+副词<br>$\qquad$    $\qquad$    $\qquad$                    1、How quickly you did your homework!<br>$\qquad$    $\qquad$    $\qquad$                    1、How I want to see you again!<br>$\qquad$            2、由what引导的感叹句<br>$\qquad$    $\qquad$                1、what后面接可数名词单数，要用到不定冠词a,an<br>    $\qquad$    $\qquad$    $\qquad$                1、what a beautiful park it is!<br>    $\qquad$    $\qquad$            2、what后面接可数复数名词<br>$\qquad$    $\qquad$    $\qquad$                    1、What lovely children they are!<br>$\qquad$                3、what后面接不可数名词<br>$\qquad$    $\qquad$                    1、What cold water it is!<br>    $\qquad$            4、陈述句如何转化至感叹句<br>$\qquad$    $\qquad$                    1、原句：He is a very handsome boy.<br>$\qquad$    $\qquad$                    2、加词，在句首加上what或者how。 What he is a very handsome boy!<br>    $\qquad$    $\qquad$                3、换位，将主语和谓语he is调到后面。What a very handsome boy he is!<br>    $\qquad$    $\qquad$                4、去修饰，感叹句已经含有程度上的含义。What a handsome boy he is！<br>    4、疑问句<br>$\qquad$            1、一般疑问句<br>$\qquad$    $\qquad$                1、一般疑问句询问“是与否”。其语序一般是倒装，be动词、组动词和情态动词放在句子开头<br>$\qquad$            2、特殊疑问句<br>$\qquad$    $\qquad$                1、由特殊疑问词引导的疑问句叫作特殊疑问句。特殊疑问词有what,who,where,when,why,how。<br>$\qquad$    $\qquad$                2、特殊疑问词+一般疑问句<br>$\qquad$    $\qquad$    $\qquad$                    1、一般在特殊疑问词做句子的宾语、状语、表语时使用。<br>$\qquad$    $\qquad$    $\qquad$    $\qquad$                        1、What do you want?<br>$\qquad$    $\qquad$    $\qquad$    $\qquad$                        2、Where did you play with him?<br>$\qquad$    $\qquad$                3、陈述语序<br>$\qquad$    $\qquad$    $\qquad$                    1、当特殊疑问词做主语的时候，句子使用陈述语序<br>$\qquad$    $\qquad$    $\qquad$    $\qquad$                        1、Who finished homework?<br>$\qquad$            3、反意疑问句<br>$\qquad$    $\qquad$                1、用于说话者对某种情形没有足够的把握，需要有所证实。<br>$\qquad$    $\qquad$                2、反意疑问句前后由两部分组成，前面是陈述语序的句子，后面则是一般疑问句。一般情况，其前后肯定与否定相反。<br>$\qquad$    $\qquad$            3、当疑问词作为否定反问时、要使用简写。<br>$\qquad$    $\qquad$    $\qquad$                    1、Tom is a good student,isn’t he?<br>$\qquad$            4、选择疑问句<br>$\qquad$    $\qquad$                1、指在问句中给出两个部分让听者选择。听者的答案一般是用完整的句子表示，不能简单用yes或no。<br>$\qquad$    $\qquad$    $\qquad$                    1、Is he a student or a teacher? He is a teacher<br>    5、反问句<br>$\qquad$            1、反问句是把动词或者组动词的否定形式放在句子开头。<br>$\qquad$    $\qquad$                1、Can’t you go out with me?<br>$\qquad$            2、除了表示疑问以外，反问句还可以表达建议或者邀请。<br>$\qquad$    $\qquad$                1、Won’t you…?<br>$\qquad$    $\qquad$                2、Isn’t it better to…?<br>$\qquad$    $\qquad$                3、Why don’t…?</p><h2 id="2、句子成分"><a href="#2、句子成分" class="headerlink" title="2、句子成分"></a>2、句子成分</h2><h3 id="1、主语"><a href="#1、主语" class="headerlink" title="1、主语"></a>1、主语</h3><p>1、简单主语<br>        2、完全主语<br>$\qquad$                1、包括简单主语和修饰词<br>        3、复合主语<br>$\qquad$                1、由两个或多个主语组成，拥有一个谓语，相互之间用and或者or连接</p><h3 id="2、谓语"><a href="#2、谓语" class="headerlink" title="2、谓语"></a>2、谓语</h3><p>1、简单谓语<br>        2、完全谓语<br>$\qquad$                1、简单谓语和修饰词<br>        3、复合谓语<br>$\qquad$                1、相互之间用and或者or连接。如<br>$\qquad$    $\qquad$                    I came in,sat down and sighed</p><h3 id="3、宾语"><a href="#3、宾语" class="headerlink" title="3、宾语"></a>3、宾语</h3><p>1、指的是谓语动词的动作执行对象<br>        2、双宾语<br>$\qquad$                1、Pass me the box,please<br>$\qquad$                2、Pass the box to me,please 在间接宾语前添加介词的用法更加通用<br>        3、复合宾语</p><h3 id="4、表语"><a href="#4、表语" class="headerlink" title="4、表语"></a>4、表语</h3><p>1、一般用于系动词之后<br>        2、正常语序<br>$\qquad$                1、He feels cold<br>        3、倒装语序<br>$\qquad$                1、在what和how引导的感叹句中，表语要前置。如<br>$\qquad$    $\qquad$                    1、What an intersting story it is！<br>$\qquad$ 2、当as引导让步状语从句时，表语要前置。如<br>$\qquad$    $\qquad$                    1、Famous as the book is, he never read it 尽管这本书很有名，他却从没有读过<br>$\qquad$                3、表示强调时。如<br>$\qquad$    $\qquad$                    1、Inside the house is a stranger<br>$\qquad$                4、保持句子平衡，主语较长时。如<br>$\qquad$    $\qquad$                    1、Such is the man who was a murder</p><h3 id="5、定语"><a href="#5、定语" class="headerlink" title="5、定语"></a>5、定语</h3><p>1、是用来修饰名词或者代词的句子成分</p><h3 id="6、状语"><a href="#6、状语" class="headerlink" title="6、状语"></a>6、状语</h3><p>1、时间状语<br>        2、地点状语<br>        3、原因状语<br>        4、结果状语<br>        5、目的状语<br>        6、条件状语<br>        7、让步状语<br>        8、伴随状语</p><h3 id="7、补语"><a href="#7、补语" class="headerlink" title="7、补语"></a>7、补语</h3><p>1、放在句子后面使句子变得完整的单词或者短语叫做补语。如She is…</p><h2 id="3、句型"><a href="#3、句型" class="headerlink" title="3、句型"></a>3、句型</h2><h3 id="1、主语-谓语"><a href="#1、主语-谓语" class="headerlink" title="1、主语+谓语"></a>1、主语+谓语</h3><p>1、主谓一致的用法<br>$\qquad$                1、当句子的主语包括两个或两个以上用and连接的名词或代词时，谓语动词用复数。如<br>$\qquad$    $\qquad$                    1、You and I are good friends<br>$\qquad$    $\qquad$                    2、注：用and连接主语时，不可以把I放在前面<br>$\qquad$                2、当两个或两个以上单数名词或代词用or或者nor连接作主语时，谓语动词用单数。如<br>$\qquad$    $\qquad$                    1、The book or the pen is in the drawer<br>$\qquad$                3、do（don’t）和does（doesn’t）的用法<br>$\qquad$                4、谓语必须与主语保持一致，与句子中的短语无关<br>$\qquad$                5、each,each one,either,neither,everyone,everybody,anybody,anyone,nobody,somebody,someone,no one等表示单数的名词，后面用谓语单数<br>$\qquad$                6、civics,mathematics,dollars,measles,news等像复数但是单数的名词，谓语动词用单数形式<br>$\qquad$                7、scissors,gloves,tweezers,trousers,shears等表达的事物本身由多部分组成的单词，用复数<br>$\qquad$                8、these is或these are位于句首，is/are和其后面的主语保持一致<br>$\qquad$                9、group,team,committee,class,family等集体名词，谓语动词用单数形式<br>$\qquad$                10、with,together with,including,accompanied by,in addition to,as well等词在句中修饰名词，谓语必须与主语保持一致</p><h3 id="2、主语-系动词-表语"><a href="#2、主语-系动词-表语" class="headerlink" title="2、主语+系动词+表语"></a>2、主语+系动词+表语</h3><p>1、The tree looks very high<br>        2、表示主语状态的系动词。如be、look、sound<br>        3、表示主语状态变化的系动词。如become、get、go、turn</p><h3 id="3、主语-谓语-宾语"><a href="#3、主语-谓语-宾语" class="headerlink" title="3、主语+谓语+宾语"></a>3、主语+谓语+宾语</h3><p>1、宾语为名词时。如    He grabbed the purse and run away<br>        2、宾语为代词时。如    He helps me when I have difficulties<br>        3、宾语为不定式时。如    I intend to go out for a while<br>        4、宾语为从句时。如    I never know who he is</p><h3 id="4、主语-谓语-宾语-宾语补足语"><a href="#4、主语-谓语-宾语-宾语补足语" class="headerlink" title="4、主语+谓语+宾语+宾语补足语"></a>4、主语+谓语+宾语+宾语补足语</h3><p>1、He made me feel uncomfortable<br>        2、I have my sister play outside</p><h3 id="5、主语-谓语-间接宾语-直接宾语"><a href="#5、主语-谓语-间接宾语-直接宾语" class="headerlink" title="5、主语+谓语+间接宾语+直接宾语"></a>5、主语+谓语+间接宾语+直接宾语</h3><p>1、My father bought me some toys<br>        2、My father bought some toys for me</p><h3 id="6、there-be句型"><a href="#6、there-be句型" class="headerlink" title="6、there be句型"></a>6、there be句型</h3><p>1、there be句型的构成：there + be动词的各种形式（is，are）+名词+地点状语。<br>        2、there be句型中be动词的形式要遵循“就近原则”。如<br>$\qquad$                1、There is a little girl and five little boys on the playground<br>$\qquad$                2、There are five little boys and little girl on the playground<br>        3、there和be之间经常插入一些情态动词或短语。如<br>$\qquad$                1、There must be some salt leftin the bottle<br>$\qquad$                2、There is going to be a birthday party this evening<br>        4、there be，has或have表示“有”时的区别<br>$\qquad$                1、there be 表示“存在”<br>$\qquad$                2、has/have 表示“拥有”<br>        5、there be+主语+动名词+介词短语表示某人或某物正在呈现某种状态或者动作。如<br>    $\qquad$            1、There is a bird singing in the sky</p><h3 id="7、省略句"><a href="#7、省略句" class="headerlink" title="7、省略句"></a>7、省略句</h3><p>1、语篇省略<br>$\qquad$                1、He is one of the richest man in the city,if not the richest (man)<br>        2、情景省略<br>$\qquad$                1、(You) Sit down,please<br>        3、简单省略<br>$\qquad$                1、不定式的省略，为了避免重复，往往会省略不定式的动词原型，剩下to。如<br>$\qquad$    $\qquad$                    1、He wanted to go out for a while but his mother told him not to<br>$\qquad$                2、介词的省略。如<br>$\qquad$    $\qquad$                    1、They have lived there （for）five years<br>$\qquad$    $\qquad$                    2、注意事项<br>$\qquad$    $\qquad$    $\qquad$                        1、当句子为否定句时，表示时间的for不能省略<br>$\qquad$    $\qquad$    $\qquad$                        2、It’s no use (in) doing sth 做某事没有用<br>    $\qquad$    $\qquad$    $\qquad$                    3、spend…(in/on) doing sth<br>        4、并列省略<br>$\qquad$                1、They learn English and we German    省略谓语<br>$\qquad$                2、He planned and acted        省略主语<br>$\qquad$                3、I eat an apple and Jim eats two    省略宾语<br>        5、复合句省略<br>    $\qquad$            1、状语从句中的省略<br>    $\qquad$    $\qquad$                1、当主句的主语与从句的主语一致时，从句的主语和谓语可以省略。如<br>    $\qquad$    $\qquad$    $\qquad$                    1、When permitted to enter the room,we will be too glad<br>$\qquad$    $\qquad$    $\qquad$                        2、If not happy,you can listen to many pieces of beautiful songs<br>$\qquad$                2、定语从句中的省略<br>$\qquad$    $\qquad$                    1、关系代词做宾语时，关系代词是可以省略的。如<br>$\qquad$    $\qquad$    $\qquad$                        1、It is the question (which) we are going to ask<br>$\qquad$    $\qquad$    $\qquad$                        2、The child (whom) you are looking for is onthe way home<br>$\qquad$                3、宾语从句中的省略<br>$\qquad$    $\qquad$                    1、若由that引导的宾语从句不长，that可以省略，如果较长，不可省略。<br>    $\qquad$    $\qquad$    $\qquad$                    1、I hope (that) he will come here</p><h3 id="8、倒装句"><a href="#8、倒装句" class="headerlink" title="8、倒装句"></a>8、倒装句</h3><p>1、是为了突出强调作用则将谓语动词移到主语的前面。<br>        2、完全倒装<br>$\qquad$                1、是谓语动词全部谓语主语之前<br>$\qquad$    $\qquad$                    1、通常以here、there等副词开头的句子，其语序为完全倒转。如<br>$\qquad$    $\qquad$    $\qquad$                        1、There is a table in the room<br>$\qquad$                    2、谓语句首的介词短语表示地点，语序也是完全倒装。如<br>$\qquad$    $\qquad$                        1、At the end of the road stands a person<br>        3、部分倒装<br>$\qquad$                1、只是助动词或者情态动词放在主语之前，谓语动词没有变动。<br>$\qquad$                2、当only修饰主语之外的成分做句子的状语时，句子要用部分倒装。如<br>$\qquad$    $\qquad$                    1、Only in this way can he overcome this difficulty<br>$\qquad$                3、little,seldom,never,not only,not until等具有否定含义的词语位于语句首时，句子应该使用部分倒装<br>$\qquad$    $\qquad$                    1、Seldom does he go to school<br>$\qquad$    $\qquad$                    2、Not until midnight did I feel asleep<br>    $\qquad$            4、as/though引导的让步状语从句有时也会用到部分倒装。如<br>$\qquad$$\qquad$                        1、Though the boy is young，he is talented<br>$\qquad$    $\qquad$                    2、Young as the boy is，he is talented<br>    $\qquad$            5、为了避免重复，往往会使用“so/neither/nor+be动词或者助动词、情态动词+主语”。如<br>$\qquad$        $\qquad$                1、Tom wants to read this novel.So do I<br>$\qquad$        $\qquad$                2、Tom doesn’t want to read this novel.Neither do I<br>$\qquad$                6、当if虚拟条件从句中含有were、had、should时，省略if，可以使用部分倒装。如<br>$\qquad$    $\qquad$                    1、If I were you,I would tell her my love  —&gt;   Were I you,I would tell her my love<br>$\qquad$                7、may在句首时，表示祝福和祝愿。如<br>$\qquad$    $\qquad$                    1、May you succeed  祝你成功</p><h3 id="9、强调句"><a href="#9、强调句" class="headerlink" title="9、强调句"></a>9、强调句</h3><p>1、加强语气的作用。一般使用it is/was…that…来表示<br>    $\qquad$            1、Jim lost the purse in the street yesterday<br>    $\qquad$            2、It was Jim that  (who) lost the purse in the street yesterday    强调主语<br>    $\qquad$            3、It was the purse that Jim lost in the street yesterday    强调宾语<br>    $\qquad$            4、It was in the street that Jim lost the purse yesterday    强调状语<br>        2、It is/was…that…不能强调谓语动词，但可以使用do，does或did来强调。如<br>$\qquad$                1、I do remember your words<br>    $\qquad$            2、He does work hard<br>        3、还有另一个常用到的强调句型not…until…<br>    $\qquad$            1、原句：She didn’t find her bag until her father told her<br>    $\qquad$            2、强调句：It was not until her father told her that she find her bag<br>    $\qquad$            3、注意事项<br>        $\qquad$    $\qquad$            1、在强调句中didn’t后面的动词在强调句中不使用原形</p><h3 id="10、祈使句"><a href="#10、祈使句" class="headerlink" title="10、祈使句"></a>10、祈使句</h3><p>1、祈使句+and+陈述句<br>$\qquad$                1、Keep on and you will succeed<br>        2、祈使句+or+陈述句<br>$\qquad$                1、Keep on,or you won’t succeed<br>        3、他人的言语的引用<br>$\qquad$                1、直接引语<br>$\qquad$    $\qquad$                    1、”Don’t move!” the robber said to me<br>$\qquad$                2、间接引语<br>$\qquad$    $\qquad$                    1、The robber asked me not to move</p><h2 id="4、从句"><a href="#4、从句" class="headerlink" title="4、从句"></a>4、从句</h2><h3 id="1、名词性从句"><a href="#1、名词性从句" class="headerlink" title="1、名词性从句"></a>1、名词性从句</h3><p>1、主语从句<br>$\qquad$                1、指从句在句子中作主语。一般由that,whether,关系代词，连接代词或者连接副词引导。<br>$\qquad$                2、that：That you have passed the exam is not true<br>$\qquad$                3、whether：Whether he can succeed is not certain<br>$\qquad$                4、关系代词：What you did is wrong    你做的事情是错误的<br>$\qquad$                5、连接代词：Whatever you want is beyond my reach    你想要的任何东西我都无法得到<br>$\qquad$                6、连接副词：Why she weeps is a secret    她为什么哭泣没人知道</p><h3 id="2、宾语从句"><a href="#2、宾语从句" class="headerlink" title="2、宾语从句"></a>2、宾语从句</h3><p>1、指从句在句子中作宾语。一般由that,whether,if,关系代词，连接代词或者连接副词引导。<br>            2、that在引导宾语从句时一般可以省略，而且that在句子中不充当句子成分，只是用于连接主语和从句。如<br>$\qquad$                    1、I don’t know (that) he is a student<br>$\qquad$                    2、注意事项<br>$\qquad$    $\qquad$                        1、句子中包含不止一个宾语从句的时候，第一个that可以省略，但后面的就不能省略。如<br>$\qquad$    $\qquad$    $\qquad$                            1、He says (that) he wants to be a scientist and that he is going to study hard<br>$\qquad$    $\qquad$                        2、当that前面有插入语时，that不能省略。如<br>$\qquad$    $\qquad$    $\qquad$                            1、I know, for the first time, that the game is so exciting    我第一次知道游戏是如此地令人兴奋<br>$\qquad$    $\qquad$                        3、当that引导的宾语从句位于双宾语结构中时，that不能省略。如<br>$\qquad$    $\qquad$    $\qquad$                            1、I want to tell you that he doestn’t he doesn’t like you<br>$\qquad$    $\qquad$                        4、如果that引导的宾语从句之前的主句谓语是think，believe等词语，其否定形式要转移到主句。如<br>$\qquad$    $\qquad$    $\qquad$                            1、I don’t think he loves you<br>            3、whether和if在引导宾语从句时，译为“是否”，一般whether通用些而if在特定情况不能使用。<br>$\qquad$                    1、当从句中有or not时。如<br>$\qquad$    $\qquad$                        1、I don’t know whether he is in or not<br>$\qquad$                    2、在介词后面时<br>$\qquad$    $\qquad$                        1、I take no interest in whether he is in<br>    $\qquad$                3、在带to的不定式之前时<br>    $\qquad$    $\qquad$                    1、I decided whether to his company<br>    $\qquad$                4、当使用if容易产生歧义时<br>    $\qquad$    $\qquad$                    1、Please let me know if you want to buy it<br>        $\qquad$            5、当宾语从句是否定含义时，只能由if引导<br>    $\qquad$    $\qquad$                    1、He asked if his girlfriend didn’t go home<br>            4、关系代词和连接代词、连接副词引导时可以从当许多种类成分。如<br>$\qquad$                    1、Do you know who he is?    做表语<br>$\qquad$                    2、I know what you are looking for    做宾语<br>$\qquad$                    3、I finally knew who came into my room    作主语<br>$\qquad$                    4、Can you tell me where I can buy these books？    做状语<br>            5、宾语从句的时态问题<br>$\qquad$                    1、若主句是现在时，宾语从句时态不受主句限制，但若主句为过去时，便需要分情况看待。如<br>$\qquad$    $\qquad$                        1、如果从句中含有过去意义上的时间词语，从句要使用一般过去时。如<br>$\qquad$    $\qquad$    $\qquad$                            1、I found that he came to her room yesterday<br>$\qquad$                        2、如果主句的动作和从句的动作同时发生，从句要用一般过去时或者过去进行时。如<br>$\qquad$    $\qquad$                            1、I found that he was a teacher<br>$\qquad$    $\qquad$                            2、I saw that she was playing with a toy<br>$\qquad$                        3、如果从句的动作已经在主句的动作之前完成，从句要用过去完成时。如<br>$\qquad$    $\qquad$                            1、I knew that he had left home<br>$\qquad$                        4、如果宾语从句中讲述的是可观事实，从句的时态通常是一般现在时，不受主语的时态限制。如<br>$\qquad$    $\qquad$                            1、My teacher told us that light travels faster than sound</p><h3 id="3、表语从句"><a href="#3、表语从句" class="headerlink" title="3、表语从句"></a>3、表语从句</h3><p>1、从属连词<br>$\qquad$                    1、that引导表语从句<br>$\qquad$    $\qquad$                        1、that在这里只起到连接主句和从句的作用，不作任何成分，但不能省略。如<br>    $\qquad$    $\qquad$    $\qquad$                        1、What I know is that you don’t like to read his books<br>    $\qquad$$\qquad$                        2、当主句中的动词是do时，that是可以省略的。如<br>        $\qquad$    $\qquad$    $\qquad$                    1、What I want to do is (that) I enter this room and sit for a while<br>$\qquad$                    2、whether引导表语从句<br>        $\qquad$    $\qquad$                1、What I want to know is whether you want to read his book<br>    $\qquad$    $\qquad$                    2、if虽然与whether意思相同，但不能引导表语从句<br>    $\qquad$                3、as引导表语从句<br>    $\qquad$$\qquad$                        1、He looked as he had looked many years ago<br>    $\qquad$                4、as if/as though引导表语从句<br>$\qquad$    $\qquad$                        1、使用时要注意语态问题。<br>$\qquad$    $\qquad$    $\qquad$                            1、当从句中的含义与现在事实相反时，从句中的谓语要用一般过去时<br>    $\qquad$    $\qquad$    $\qquad$    $\qquad$                            1、It looks as if he were dead    与现在事实相反<br>    $\qquad$    $\qquad$    $\qquad$                        2、当从句表示的含义与过去事实相反时，谓语要过去完成时<br>    $\qquad$    $\qquad$    $\qquad$    $\qquad$                            1、The man told me the truth.It seemed as if he had escaped from the prison many times<br>$\qquad$    $\qquad$    $\qquad$                            3、当从句表示将来发生的可能性比较小时，谓语要用would等情态动词+动词原形<br>$\qquad$    $\qquad$    $\qquad$    $\qquad$                                1、The man smiles.It seems as if he would let me go<br>$\qquad$                    5、beacause引导表语从句<br>$\qquad$    $\qquad$                        1、That is because we don’t like to attend that meeting<br>                    2、连接代词和连接副词引导表语从句<br>$\qquad$                        1、He didn’t become what wanted to be    what做表语<br>$\qquad$        2、The problem is where he went    where做状语<br>$\qquad$                    3、What she worries is who will borrow her money    who做主语<br>                3、reason做主语，若表语从句表原因要用that，不用because；why引导主语从句，表语从句用that<br>    $\qquad$                1、The reason is that I don’t know his name<br>$\qquad$                    2、Why he doesn’t talk me is that he doesn’t know me                    </p><h3 id="4、同位语从句"><a href="#4、同位语从句" class="headerlink" title="4、同位语从句"></a>4、同位语从句</h3><p>1、同位语<br>$\qquad$                    1、是对所修饰的名词进行具体的说明，在内容是同一关系。引导同位语的词语有that、whether、what、which和who等<br>$\qquad$                    2、如果同位语从句的意义完整，不用再添加任何成分，就使用that引导。如<br>$\qquad$    $\qquad$                        1、We heard the news that my father would return<br>    $\qquad$                3、如果同位语从句之前是demand、suggestion等词语时、同位语使用虚拟语气、从句的谓语部分用should+动词原形，should可以省略。如<br>$\qquad$    $\qquad$                        1、The suggestion that the tooth (should) be pulled out was right<br>$\qquad$                    4、如果同位语从句意义不完整，需要添加“是否”时，就要使用whether引导同位语从句，但if不能引导同位语从句。如<br>$\qquad$    $\qquad$                        1、I have a question whether he will come<br>$\qquad$                    5、连接代词或者连接副词引导同位语。如<br>$\qquad$    $\qquad$                        1、I have no idea what it is<br>$\qquad$    $\qquad$                        2、It is a question when he starts<br>$\qquad$                    6、同位语从句和定语从句的区别<br>$\qquad$    $\qquad$                        1、同位语从句属于名词性从句，用于说明名词的内容。而定语从句属于形容词性从句，用于突出名词的不同。如<br>    $\qquad$    $\qquad$    $\qquad$                        1、We heard the news that my father would return    同位语从句<br>$\qquad$    $\qquad$    $\qquad$                            2、The news that my father told me excited me        定语从句<br>$\qquad$    $\qquad$                        2、what、how、whatever等词语只能引导同位语从句，不能引导定语从句<br>$\qquad$    $\qquad$                        3、that在引导同位语从句时，不作任何成分，但是在引导定语从句时则要充当成分<br>    $\qquad$    $\qquad$                    4、被修饰词语也有所不同。<br>    $\qquad$    $\qquad$    $\qquad$                        1、同位语从句修饰词语有限，一般是hope、suggestion、idea、news、truth等具有内涵的名词<br>    2、宾语从句<br>$\qquad$    1、在句子中作定语，用来修饰某个名词或者代词，甚至整个主句的从句。定语从句修饰的词语叫先行词，一般定语从句置于先行词之后，由关系词引导。<br>$\qquad$    2、<br>    3、状语从句</p><p>$\qquad$    1、时间状语从句<br>$\qquad$            2、地点状语从句<br>$\qquad$            3、原因状语从句<br>$\qquad$            4、结果状语从句<br>$\qquad$            5、目的状语从句<br>$\qquad$            6、让步状语从句<br>$\qquad$            7、条件状语从句<br>$\qquad$            8、方式状语从句<br>$\qquad$            9、比较状语从句</p><h1 id="三、时态语态语气篇"><a href="#三、时态语态语气篇" class="headerlink" title="三、时态语态语气篇"></a>三、时态语态语气篇</h1><h2 id="1、常用的时态"><a href="#1、常用的时态" class="headerlink" title="1、常用的时态"></a>1、常用的时态</h2><p>1、现在时态<br>    2、过去时态<br>    3、将来时态</p><h2 id="2、语态"><a href="#2、语态" class="headerlink" title="2、语态"></a>2、语态</h2><p>1、被动语态的构成<br>    2、主动语态变被动语态</p><h2 id="3、虚拟语气"><a href="#3、虚拟语气" class="headerlink" title="3、虚拟语气"></a>3、虚拟语气</h2><p>1、虚拟语气的类别<br>    2、虚拟语气的用法</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语口语发音技巧</title>
      <link href="/2020/04/02/ying-yu-kou-yu-fa-yin-ji-qiao/"/>
      <url>/2020/04/02/ying-yu-kou-yu-fa-yin-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：百度文库的《英语发音中的失音、连读、浊化、弱化、英音和美音的差异、节奏6个问题解析》"><a href="#参考资料：百度文库的《英语发音中的失音、连读、浊化、弱化、英音和美音的差异、节奏6个问题解析》" class="headerlink" title="参考资料：百度文库的《英语发音中的失音、连读、浊化、弱化、英音和美音的差异、节奏6个问题解析》"></a>参考资料：百度文库的《英语发音中的失音、连读、浊化、弱化、英音和美音的差异、节奏6个问题解析》</h1><h2 id="一、发音基础"><a href="#一、发音基础" class="headerlink" title="一、发音基础"></a>一、发音基础</h2><h3 id="1、紧音大集合"><a href="#1、紧音大集合" class="headerlink" title="1、紧音大集合"></a>1、紧音大集合</h3><p>/i/：张嘴露齿，左右极致，高音调<br>/ɛ/: 张嘴露齿，左右半极致，半高音调<br>/æ/: 张嘴露齿，左右半极致，下拉极致，高音调<br>/a/：张嘴露齿，四角拓展，⾼⾳调<br>/ɔ/：张嘴露齿，上下极致，⾼音调<br>/u/：嘟嘴开齿，前伸极致，⾼音调</p><h3 id="2、其他音"><a href="#2、其他音" class="headerlink" title="2、其他音"></a>2、其他音</h3><p>/I/：张嘴开齿，音调低<br>/ə/：张嘴露齿，音调低<br>/ʊ/：张嘴开齿，音调低</p><p>/əu/：一个松音+ 第六阶段的紧音。张嘴露齿，音调低 + 嘟嘴开齿，前伸极致，高音调<br>/au/：张嘴露齿，四角拓展，⾼⾳调 + 嘟嘴开齿，前伸极致，⾼音调<br>/ɛi/：张嘴露齿，左右半极致，半高音调 + 张嘴露齿，左右极致，高音调<br>/ai/：张嘴露齿，四角拓展，⾼⾳调 + 张嘴露齿，左右极致，高音调<br>/ɔi/：张嘴露齿，上下极致，⾼音调 + 张嘴露齿，左右极致，高音调</p><p>/r/：嘟嘴开齿，前伸极致，舌尖上卷<br>/l/：元音前，舌尖上齿龈，舌一弹；元音后，舌尖从下到上齿龈<br>/f/：一个都不能少 + 门牙轻碰下唇，出气<br>/v/：门牙贴下唇，不出气，声带振<br>/p/：双唇紧闭，弹开，出气<br>/b/：双唇紧闭，弹开，阻气声带振<br>/z/：上下微开齿，舌尖近上齿龈，阻气声带振<br>/k/：上下张嘴露齿，舌后缩，舌下降出气<br>/g/：上下张嘴露齿，舌后缩（大力），舌下降，不出气，声带振<br>/d/：张嘴开齿，舌尖顶上龈，舌尖松，阻气声带振<br>/t/：张嘴开齿，舌尖顶上齿根，舌尖松气出<br>/θ/：舌尖轻碰上齿底，出气<br>/ð/：舌尖轻碰上齿底，阻气声带振<br>/m/：闭嘴，鼻孔出气，声带振动<br>/n/：张嘴开齿，舌尖顶上齿根，鼻孔出气，声带振动<br>/ŋ/：舌不动，下巴下拉，鼻孔出气，声带振动<br>/j/：微开嘴，舌尖顶下齿，声带振<br>/w/：嘟嘴开齿，前伸极致，声带振<br>/h/：半开嘴，舌不动，出气<br>/ʃ/：双唇前伸，舌成凹，两边碰上齿，中出气<br>/ʒ/：双唇前伸，舌成凹，两边碰上齿，上下齿微闭，无气出，声带振</p><h3 id="3、美英发音差异："><a href="#3、美英发音差异：" class="headerlink" title="3、美英发音差异："></a>3、美英发音差异：</h3><p>1、字母 r：美式要卷舌，英式不卷舌。</p><p><img src="https://img-blog.csdnimg.cn/20200404175543894.png" alt><br>2、字母 a：美式发成 /æ/，英式发成 /a:/。</p><p><img src="https://img-blog.csdnimg.cn/20200404175556986.png" alt><br>3、字母 o：美式发成 /a:/，英式发成 /ɔ/。</p><p><img src="https://img-blog.csdnimg.cn/20200404175518582.png" alt><br>4、字母组合 ary：美式发成 /eri/，英式发成 /əri/<br><img src="https://img-blog.csdnimg.cn/20200404175625353.png" alt></p><h2 id="二、音变"><a href="#二、音变" class="headerlink" title="二、音变"></a>二、音变</h2><p>注意的是，在本篇中未标明为字母的字符，均代表音素，括号代表省略。</p><h3 id="1、失音"><a href="#1、失音" class="headerlink" title="1、失音"></a>1、失音</h3><p>某一个或者几个音脱落，把单词短语和句子快速连缀成串。</p><h4 id="I-相似或相同音素相邻【可词内】"><a href="#I-相似或相同音素相邻【可词内】" class="headerlink" title="I. 相似或相同音素相邻【可词内】"></a>I. 相似或相同音素相邻【可词内】</h4><p>相同或相似的两个音素以及发音部位相同的音素相邻时（包括在一个单词内的情况），前一个音素不读出声。<br>比如，前一词以[t]结束，后一词以[t]或[d]开头，则<b>前面的[t]往往失音</b>。<br>I’ve got to go. <br>What do you want? <br>What does the man mean?     [wɔ(t) də(z) ðə mæ (n) mi:n] </p><h4 id="II-两个爆破音相邻-一个爆破音-辅音【可词内】"><a href="#II-两个爆破音相邻-一个爆破音-辅音【可词内】" class="headerlink" title="II. 两个爆破音相邻/一个爆破音+辅音【可词内】"></a>II. 两个爆破音相邻/一个爆破音+辅音【可词内】</h4><p>如有两个爆破音[p]，[b]，[t]，[d]，[k]，[g]     连贯出现在同一单词内部或连贯出现在前一单词结尾与后一单词开头，     前一辅音音素只按其发音部位形成阻碍，但不爆破，或者说<b>前一音保留口型和发音时间却并不发音</b>，但是听者能感到这个音的存在，稍作间息后     立即过渡到后一个音的发音部位并爆破，这种现象称为失去爆破。<br>sit down → si(t)down<br>cut down  $\qquad$     step down  $\qquad$     slab glass</p><p>有时后一单词开头不一定是爆破音素，而是其他的辅音也同样可以造成前一单词尾爆破音素的失掉。<br>Good night →Goo (d) night,<br>contact lens →conta (ct) lens</p><p> 失去爆破现象不仅仅发生在两个单词之间,也可以发生在同一个单词的内部.<br> English→En(g)lish, $\qquad$  friendly→frien (d)ly$\qquad$   handbag</p><h4 id="III-持续音-t-d-辅音"><a href="#III-持续音-t-d-辅音" class="headerlink" title="III. 持续音+t/d+辅音"></a>III. 持续音+t/d+辅音</h4><p>前一词以持续音+[t][d]结尾，后一词以辅音开头，则其中<b>[t][d]失音</b>.<br>  [st]+辅音 $\qquad$   [wt]+辅音  $\qquad$    [lt]+辅音   $\qquad$ $\qquad$ $\qquad$  $\qquad$ [ft]+辅音<br> [zd]+辅音 $\qquad$   [vd]+辅音  $\qquad$   [ld]+辅音  $\qquad$   [nd]+辅音 $\qquad$     [md]+辅音 $\qquad$   [td]+辅音<br>  last class   $\qquad$  next day  $\qquad$   bend back</p><h4 id="IV-破音-擦音-t-d-辅音"><a href="#IV-破音-擦音-t-d-辅音" class="headerlink" title="IV. 破音/擦音+t/d+辅音"></a>IV. 破音/擦音+t/d+辅音</h4><p>前一词以破音/擦音+[t][d]结束，后一词以辅音开头，则其中<b>[t][d]失音</b>.<br>[pt]+辅音$\qquad$     [tft]+辅音 $\qquad$    [kt]+辅音（如完结于skt则脱k而不是t）<br> [bd]+辅音 $\qquad$    [gd]+辅音 $\qquad$    [dvd]+辅音 $\qquad$    [vd]+辅音<br>kept quiet   $\qquad$  swept valley   $\qquad$  rubbed gently<br><b>若后一词始于h则[t][d]很少脱落</b><br>kept her waiting    </p><h4 id="V-句末词尾辅音"><a href="#V-句末词尾辅音" class="headerlink" title="V. 句末词尾辅音"></a>V. 句末词尾辅音</h4><p>位于句末单词的词尾的辅音音素读的一般较轻或<b>不读出声</b>.</p><h4 id="VI-缩略词"><a href="#VI-缩略词" class="headerlink" title="VI. 缩略词"></a>VI. 缩略词</h4><p>缩略即在书写时将两个或多个相邻的单词省略某些字母而连接起来，在口头说出时则省略相应的某些音素后读做一个单词。我们把缩略的书写形式称为缩略式，把缩略产生的音变称为缩略音.<br>I am [ai æ m] → I’m [aim]   $\qquad$     you have [ju: hæ v] →[ju:v]<br> how is [hau iz] → how’s [hauz]   $\qquad$     that would [ðæ t wud]→that’d [ ðæ (t)d]<br>动词否定结尾的缩写形式n’t中的<b>[t]失音</b>，无论后一词以元音还是辅音开头。<br>You mustn’t lose it.<br>Doesn’t she know?<br>He wouldn’t overeat.</p><h3 id="2、连读"><a href="#2、连读" class="headerlink" title="2、连读"></a>2、连读</h3><p>连读即连在一起读，就是两个或多个分属不同单词的音素因为相邻或语速较快等原因而连在一起读出的现象。</p><h4 id="I-前提条件"><a href="#I-前提条件" class="headerlink" title="I. 前提条件"></a>I. 前提条件</h4><p>1.连读只发生在句子中的同一个意群中。比如There is a book in it.一句中book与in往往不连读，因为book与in分别在两个不同的意群中。<br>2.在个别情况下，为了避免误会，在允许连读的地方也不宜连读。比如 than ever 如果连读则可能被误解为 than never。</p><h4 id="II-辅音-元音"><a href="#II-辅音-元音" class="headerlink" title="II.辅音+元音"></a>II.辅音+元音</h4><p>前一个单词以辅音<b>音素</b>结尾，后一个单词以元音音素开头，并且两个词处于同一个意群或者说话者语速较快时，两词发生连读。<br>as it is →[e si tiz ]   三个单词因连读而分割,重组为三个不同的发音组合。<br>half an hour → [hɑ:fu æ nauə]    因连读,单词被肢解重组,变得面目全非。<br>My pen`s out of ink again. → [mai pə:n zau tə vinkə gein]<br>not at all → [nɔ tæ tɔ:l]   这个词组的发音和三个独立单词的发音相去甚远。<br>902 5050 → [nai•no•too fai•vo•fai•vo]<br> hold on → [hol don]<br> tell her I miss her → [teller I misser]</p><h4 id="III-辅音-h"><a href="#III-辅音-h" class="headerlink" title="III.辅音+h"></a>III.辅音+h</h4><p>如果前一个单词以辅音音素结尾,后一个单词的读音以轻辅音音素[h]开头，语速较快时，直接与[h]后面的元音音素发生<b>击穿轻辅音[h]</b>的连读。<br>isn’t he→[izn ti]<br>the rent here→[ðə ren tiə]<br>don’t have→[dəun tæ v]<br>for him → [fə rim],[fə rəm],[frəm]<br>sell her books →[se lə buks]<br>I lent him a book.→[ai lən ti mə buk]<br>Ha(s he) done it before?<br>    Mus(t he) [ti] go? </p><h4 id="IV-元音-元音"><a href="#IV-元音-元音" class="headerlink" title="IV.元音+元音"></a>IV.元音+元音</h4><p>相邻的前一个词的词尾和后一个词的词首是元音时，常连读，即中间不能    停顿，听起来好像一个词。元音音素与元音音素的连读发生的情况比较少,一般是[i:]或[u:]和其它元音音素的连读，同时伴随着音变。<br>如果前一个词是由<b>元音[u]结尾</b>，下一个词由元音开头，那么，在[u]后面<b>加上一个辅音[w]</b>；如果前一个词是由<b>元音[i]结尾</b>，下一个词由元音开头，那么，在[i]后面<b>加上一个辅音[y]</b>。<br>Go away. → [Go(w)away]<br>I also need the other one. → [I(y)also need thee(y)other one]<br>go anywhere → [go(w)anywhere]<br>through our → [through(w)our]<br>do I? → [do(w)I?]<br>I asked → [I(y)asked]<br>she always → [she(y)always]</p><h4 id="V-相同的辅音相邻"><a href="#V-相同的辅音相邻" class="headerlink" title="V.相同的辅音相邻"></a>V.相同的辅音相邻</h4><p>单词词尾是辅音，之后单词的词首也是相同的辅音时，通常<b>前者的辅音可以省略</b>，只念后者的辅音。这种情况常发生在[p] [t] [k] [d] [g]等辅音出现的时候。<br>deep pond   $\qquad$  stop playing $\qquad$    keep pace $\qquad$hot tea  $\qquad$   part time  $\qquad$   at two<br>辅音音素与辅音音素的连读发生的情况比较少,一般是[t][d]和[r][w][j]等的连读，注意发生的音变。<br>Part one.  →     [pa: twʌn]<br>You must remain in bed for two days.  →    [ju: mʌs tri`mei nin be(d) fɔ: tu: deiz]<br>David read the letter again and again.  →    [`deivi dre(d) ðə`letə ə`gei næ n də`gen]</p><h4 id="VI-字母re-r-元音"><a href="#VI-字母re-r-元音" class="headerlink" title="VI. 字母re/r+元音"></a>VI. 字母re/r+元音</h4><p>相邻的前一个词以 re 或 r（在英音中，它们不发音；在美音中，读[r]）     结尾，后一个词以元音音素开头，这时<b>[r]要读出来，并与这个元音连读</b>。<br>There is an old man under the tree.  →    [ ðɛə ri zə nəul(d) mæ n `ʌndə ðə tri:]<br>I lent her a pen.  →     [ai len tə rə pen]<br>You should buy a bicycle for him.   →   [ju ʃud bai ə `baisikl fɔ rim]<br>here are$\qquad$        four eggs    $\qquad$        for example</p><h4 id="VII-字母ng-元音"><a href="#VII-字母ng-元音" class="headerlink" title="VII. 字母ng+元音"></a>VII. 字母ng+元音</h4><p>以 ng 结尾读[ŋ]的单词，如果后面紧跟以元音音素开头的单词，发生连读时，<b>中间加一个音素[g]</b>。<br>ring him  →    [riŋ gim]</p><h4 id="VIII-字母t-d-s-z-字母y"><a href="#VIII-字母t-d-s-z-字母y" class="headerlink" title="VIII. 字母t/d/s/z+字母y"></a>VIII. 字母t/d/s/z+字母y</h4><p>如果前面的单词是以t/d/s/z结尾，后面的单词是以Y开头(一般是you这个词)，    那么有如下的连读规则可以使用。<br>连读时发生的四个常见的<b>音变</b>:<br>        [t]+[j] == [tʃ]     $\qquad$        [d]+[j] == [dʒ]     $\qquad$        [s]+[j] == [ʃ]     $\qquad$        [z]+[j] == [ʒ],<br>wouldn’t you  →       [`wudn tʃu:]<br>last year  →       [la:s tʃə:]<br>and you  →       [æ n dʒu:]<br>duty  →       [`dʒu:ti]<br>miss you  →       [mi ʃu:]<br>Yes, you are.  →       [yeshu are]<br>because you  →       [bi `kɔ: ʒu:]<br>How’s your sister?      →   [hau ʒɔ:`sistə]</p><h3 id="3、浊化"><a href="#3、浊化" class="headerlink" title="3、浊化"></a>3、浊化</h3><p>在美音中， [p]和[b]、 [t]和[d]、 [k]和[g]以及[tʃ]和[dʒ]的读音经常互相转换。</p><h4 id="I-三对辅音之间的转换"><a href="#I-三对辅音之间的转换" class="headerlink" title="I. 三对辅音之间的转换"></a>I. 三对辅音之间的转换</h4><p>[S] 后的清辅音[k] [p] [t]要浊化成[g] [b] [d]。<br>sky skill discussion（c发k的音）： [k] 浊化成 [g]<br>       stop student stand： [t] 浊化成[d]<br>       space sport expression：[p] 浊化成 [b]</p><h4 id="II-词内的转化"><a href="#II-词内的转化" class="headerlink" title="II. 词内的转化"></a>II. 词内的转化</h4><p>美音中：[t] 在单词的中间被浊化成[d]<br>write，writer， 听起来和ride，rider 的发音几乎没有区别。$\qquad$ letter $\qquad$ out of </p><h3 id="4、弱化"><a href="#4、弱化" class="headerlink" title="4、弱化"></a>4、弱化</h3><p>一般来说：<br>实词<b>重读</b>，如动词、名词、副词等；<br>虚词<b>弱读</b>，如介词、代词等<br>弱读的规则一般是：元音音节弱化成 [E] （额）<br>why am I here？    wai em ai hie<br>            as much as possible.    ez … ez<br>            try to stop.     te<br>            the thing that annoys me.     e </p><h4 id="I-元音弱化的第一阶梯"><a href="#I-元音弱化的第一阶梯" class="headerlink" title="I.元音弱化的第一阶梯"></a>I.元音弱化的第一阶梯</h4><p>元音弱化的第一阶梯是，如果一个元音的弱化程度不太厉害，则它仅改变为比它<b>低一级</b>的元音发出。<br>[i:]可弱化为[i]。<br>如单词 he[hi:]在日常口语中最常发出的实际上是[hi]的音，而不是完完        全全的[hi:]。只要仔细听一下磁带或体会一下自己以自然速度说口语时的发音就会发现这一点。<br>同理，其他元音在第一阶梯的弱化形式为：<br> [u:]弱化为[u]， [ɔ:]弱化为[ɔ]，<br> [ə:]弱化为[ə]， [ei]弱化为[i]等</p><h4 id="II-元音弱化的第二阶梯"><a href="#II-元音弱化的第二阶梯" class="headerlink" title="II.元音弱化的第二阶梯"></a>II.元音弱化的第二阶梯</h4><p>弱化的第二阶梯是所有的元音经过一定程度弱化后都可以<b>变为[ə]音</b>,         这使元音发生了较大程度的弱化，是所有元音共有的弱化状态，所以弱音中表现形式最多的就是这[ə]音。<br>单词 for from to some am do have does<br> 强式 [fɔ:] [frɔ:m] [tu:] [sʌm] [æ m] [du:] [hæ v] [dʌz]<br> 弱式 [fə] [frəm] [tə] [səm] [əm] [də] [həv] [dəz]</p><h4 id="III-元音弱化的第三阶梯"><a href="#III-元音弱化的第三阶梯" class="headerlink" title="III.元音弱化的第三阶梯"></a>III.元音弱化的第三阶梯</h4><p>弱化的第三阶梯，是元音音素因过分弱化而<b>消失</b>。这一阶段的弱化可视为失音的一种。这往往在语速过快时，出现于长句子中被弱读的词上。</p><h3 id="5、节奏"><a href="#5、节奏" class="headerlink" title="5、节奏"></a>5、节奏</h3><p>节奏并不仅仅指说话的速度快慢，还包含了许多平时不被重视的小环节，比如语调的升降、词语的重音、句子在何处停顿。</p><h2 id="三、意群的划分"><a href="#三、意群的划分" class="headerlink" title="三、意群的划分"></a>三、意群的划分</h2><p>现将句子划分意群的一般原则归纳如下：<br>1．名词词组<br>1）冠词+名词，<br>例：a country<br>2）名词+名词，例：comrade Li<br>3）指示代词+名词，例：this book<br>4）形容词+名词，例：natural science<br>5）作形容词用的名词或分词+名词，例：New Year’s Day the working class<br> 6）数词+名词，例：thirty-two note-books<br>7）数词+数词，例：223–two hundred and twenty-three<br>8）不定代词+名词，例：some ink<br>2．介词短语，例：from now on with an effort<br> 3．副词短语，例：day and night first of all<br>4．副词+介词短语，例：early in the morning far into the night<br> 5．副词+动词，或动词+副词，例：quite understand study hard<br>6．一些固定的动词词组，例：to take a rest to have a meeting to get ready<br>7．联系动词+表语，例：be at school grow quite well<br>8．主语+谓语，这种句型用于简短语句时，一般划分为一个意群，例：He stands up．They are very happy．<br>9．主语+谓语+宾语，这种句型用于简短语句时，划分为一个意群，例：I can speak English．He gave me a book．<br>10．简短的名词性从句，包括主语从句、表语从句和宾语从句，例：That he will come here／is certain．（主语从句）This is／how he studies English．（表语从句）He told me／where I could find my book．（宾语从句）<br>11．简短的定语从句，例：This is a factory／that makes cloth．<br>12．简短的状语从句，状语从句可以放在句首或句末。放在句首时，从句后通常要用逗号；放在句末时，从句一般不用逗号，每个简短的状语从句分为一个意群，例：I waited／till he come back．He can’t come／because he is ill．We worked fast／so that we finish our plan．</p><p>实例：<br>1.They live in that large house / on the other side / of the bridge. //</p><p>2.In the morning / the boy goes to school early. // Sometimes / he was late, / because his mother was in poor health. //</p><p>3.It is very important for us / to take part in manual labour / from time to time. //</p><p>4.Do you remember all those years / when scientists argued that smoking would kill us / but the doubters insisted that we didn’t know for sure.</p><p>5.However, whether it comes from the common ancestor / that the species had 35 million years ago, / is, / as yet, /an unanswered question.//</p><p>6.What is harder to establish / is whether the productivity revolution/ that businessmen assume they are presiding over/ is for real.//</p><p>7.She sells sea shells / by the sea shore. //The shells she sells / are surely seashells. // So / if she sells shells / on the seashore, I’m sure / she sells seashore shells.</p><p>8.I cannot bear to see a bear / bear down upon a hare. // When bare of hair / he strips the hare, / right there / I cry, / “Forbear!” //</p><p>9.There once was a man / who had a sister; /his name was Mr. Fister. // Mr. Fister’s sister sold sea shells / by the sea shore. Mr. Fister / didn’t sell sea shells；/he sold silk sheets.// Mr. Fister told his sister / that he sold six silk sheets to six shieks. The sister of Mr. Fister said / I sold six shells to six shieks too! //</p><p>10.How much wood / would a woodchuck chuck / if a woood chuck / could chuck wood？A woodchuck / would chuck all the wood / a woodchuck could chuck / if a woodchuck could chuck wood. // How many cookies / could /a good cook / cook？If a good cook / could cook cookies, a good cook / could cook / as much cookies / as a good cook / who could cook cookies.//</p><p>11.A snow-white swan / swam swiftly / to catch a slowly-swimming snake / in a lake. //</p><p>12.Once / two hunters went hunting / in the forest. One of them / suddenly fell down / by accident. He showed the whites of his eyes / and seemed to have ceased breathing. The other hunter / soon took out his mobile phone / to call the emergency center / for help.// The operator said calmly, /“First, / you should make sure /that he is already dead.” // Then / the operator / heard a gunshot / from the other end of the phone / and next he heard the hunter asking, /“What should I do next? “//</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语会话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入浅出统计学》总结</title>
      <link href="/2020/03/26/shen-ru-qian-chu-tong-ji-xue-zong-jie/"/>
      <url>/2020/03/26/shen-ru-qian-chu-tong-ji-xue-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：电子工业出版社的《深入浅出统计学》"><a href="#参考资料：电子工业出版社的《深入浅出统计学》" class="headerlink" title="参考资料：电子工业出版社的《深入浅出统计学》"></a>参考资料：电子工业出版社的《深入浅出统计学》</h1><h1 id="一、信息图形化"><a href="#一、信息图形化" class="headerlink" title="一、信息图形化"></a>一、信息图形化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>绘图软件可以减少繁重的工作，但无法代替我们思考，大多数图形模式使用没有明确的界限，但有着能够最好体现我们要给他人展示的主要事实的模式。尽管统计以事实为基础，但有时却具有误导性，学习统计亦是学会如何正确了解数据并避免被人愚弄的良方。</p><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、饼图"><a href="#一、饼图" class="headerlink" title="一、饼图"></a>一、饼图</h3><p>1、作用是将数据划分为互有明显区别的几个组，或者叫做几个类。<br>2、使用情景是在想对基本比例进行比较的时候采用，通过与其他组进行比较，可以很容易看出哪个组具有较高的频数。<br>3、缺点是当所有扇形块的大小相似时，饼图用处不大，因为此时无法根据扇形块尺寸的微小差别进行判别。<br><img src="https://img-blog.csdnimg.cn/20200326231016155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、条形图"><a href="#二、条形图" class="headerlink" title="二、条形图"></a>二、条形图</h3><p>在各个类的大小大致相同的情况，条形图是理解的图形，因为你能更精确地指出哪个类的频数最高，也更容易发现细小的差别。</p><h4 id="1、垂直条形图"><a href="#1、垂直条形图" class="headerlink" title="1、垂直条形图"></a>1、垂直条形图</h4><p><img src="https://img-blog.csdnimg.cn/20200326231549216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、水平条形图"><a href="#2、水平条形图" class="headerlink" title="2、水平条形图"></a>2、水平条形图</h4><p>垂直条形图更常用些，但若类名称过长，则可以尝试使用水平条形图。<br><img src="https://img-blog.csdnimg.cn/20200326231816886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="3、堆积条形图"><a href="#3、堆积条形图" class="headerlink" title="3、堆积条形图"></a>3、堆积条形图</h4><p>在进行比较频数时，可以使用堆积条形图，但通过这种图形难以看出比例和百分比。<br><img src="https://img-blog.csdnimg.cn/20200326232201768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="4、分段条形图"><a href="#4、分段条形图" class="headerlink" title="4、分段条形图"></a>4、分段条形图</h4><p>通过分段条形图，我们可以迅速看出每个类的总频数和类内的比例分布。<br><img src="https://img-blog.csdnimg.cn/20200326232334253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="三、直方图"><a href="#三、直方图" class="headerlink" title="三、直方图"></a>三、直方图</h3><p>1、当数据是被分区的数值型数据时，可以尝试使用直方图。<br>2、直方图和条形图外观形似，但有两个重要的区别。首先，每个长方形面积与频数成比例，其次，图上的长方形之间没有间隔。<br>3、可以直接观测出每个区间的频数密度水平。</p><h4 id="1、等宽直方图"><a href="#1、等宽直方图" class="headerlink" title="1、等宽直方图"></a>1、等宽直方图</h4><p>将频数作为高度即可。<br><img src="https://img-blog.csdnimg.cn/20200326233222266.png" alt><br><img src="https://img-blog.csdnimg.cn/20200326233203203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、不等宽直方图"><a href="#2、不等宽直方图" class="headerlink" title="2、不等宽直方图"></a>2、不等宽直方图</h4><p>此时应将频数作为面积并计算出高度。<br><img src="https://img-blog.csdnimg.cn/20200326233427348.png" alt><img src="https://img-blog.csdnimg.cn/20200326233454181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="四、累积频数图"><a href="#四、累积频数图" class="headerlink" title="四、累积频数图"></a>四、累积频数图</h3><p>在希望显示某个特定值以内的频数之和，如5小时内所有的人数。<br><img src="https://img-blog.csdnimg.cn/20200326234059339.png" alt><img src="https://img-blog.csdnimg.cn/20200326234122756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="五、折线图"><a href="#五、折线图" class="headerlink" title="五、折线图"></a>五、折线图</h3><p>1、折线图能很好地体现数据趋势，常用于显示随时间变化的数值。<br>2、像其他图形一样，在纵轴上显示频数还是百分数，主要取决于想凸显的主要事实<img src="https://img-blog.csdnimg.cn/20200326234411857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="六、标度的选择"><a href="#六、标度的选择" class="headerlink" title="六、标度的选择"></a>六、标度的选择</h3><p>使用百分比而不显示频数，则会使人忽略样本集本身的大小，使特定的抽样结果误认为普遍的结论。<br>使用频数而不显示百分比，则会使人看到数据更加片面，难以从整体情况进行分析。</p><h1 id="二、集中趋势的度量"><a href="#二、集中趋势的度量" class="headerlink" title="二、集中趋势的度量"></a>二、集中趋势的度量</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>从一大堆数字中察觉出模式和趋势颇为不易，而求出平均数往往是把握全局的第一步。当我们有了平均数时就能迅速得找出数据中最具代表性的数值——典型值，得出重要的结论。</p><h2 id="具体内容-1"><a href="#具体内容-1" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、均值"><a href="#一、均值" class="headerlink" title="一、均值"></a>一、均值</h3><p>1、计算方法是将所有样本值之和除以总样本数。<br>2、优点是对于抽样数据而言更加稳定，不会因为添加一些样本而导致结果剧烈波动。<br>3、缺点是当出现与其他数据格格不入的极高或极低的异常值时，异常值会将数据向左或向右拉，从而产生偏移数据，换句话说，异常值的出现会将均值的算法进行扭曲，从而难以实现本应表达的主要事实。<br><img src="https://img-blog.csdnimg.cn/20200327151221457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="1、向左偏斜"><a href="#1、向左偏斜" class="headerlink" title="1、向左偏斜"></a>1、向左偏斜</h4><p>当异常值位于低端时，会把均值向左拉伸，显出一条尾部，此时均值将小于大部分的值。<br><img src="https://img-blog.csdnimg.cn/20200327151543143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、向右偏斜"><a href="#2、向右偏斜" class="headerlink" title="2、向右偏斜"></a>2、向右偏斜</h4><p>此时，均值将大于大部分的值。<br><img src="https://img-blog.csdnimg.cn/20200327151946661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="3、对称数据"><a href="#3、对称数据" class="headerlink" title="3、对称数据"></a>3、对称数据</h4><p>使用均值时最理想的数据分布。<br><img src="https://img-blog.csdnimg.cn/20200327152047922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、中位数"><a href="#二、中位数" class="headerlink" title="二、中位数"></a>二、中位数</h3><p>1、计算方法是按样本值按升序排列，此时若数值总个数为奇数时，则选取最中间的数值，若数值总个数为偶数时，则选取最中间的两个值的均值。<br>2、优点是不会受到异常值的影响，更容易获取位于数据集中区的值。<br>3、缺点是当一批数据集中包含两组数据时，此时添加一些样本，可能会使中位数出现巨大的波动，从而产生误导性。<img src="https://img-blog.csdnimg.cn/20200327154455705.png" alt></p><h3 id="三、众数"><a href="#三、众数" class="headerlink" title="三、众数"></a>三、众数</h3><p>1、计算方法是从数据集中选取频数最大的数值，也就是最常见的数值，并且众数可以同时有多个，比如一批数据集中多个组具有相同的最高频数。<br>2、优点是是众多平均数之中唯一可以用于类别数据的算法，同时也适用于数值数据的使用。<br>3、缺点是当一批数据集中众数个数过多时，将没有很大的作用。<img src="https://img-blog.csdnimg.cn/20200327155132490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="四、三种平均数的共性"><a href="#四、三种平均数的共性" class="headerlink" title="四、三种平均数的共性"></a>四、三种平均数的共性</h3><p>对于同一批数据集，对每个样本值同时添加2000或增长10%，那么三种平均数也会一同添加2000或增长10%，无法因为这种操作而厚此薄彼。</p><h3 id="五、平均数的选取可能产生人为的误导"><a href="#五、平均数的选取可能产生人为的误导" class="headerlink" title="五、平均数的选取可能产生人为的误导"></a>五、平均数的选取可能产生人为的误导</h3><p><img src="https://img-blog.csdnimg.cn/2020032715571267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200327155627786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="三、分散性和变异性的量度"><a href="#三、分散性和变异性的量度" class="headerlink" title="三、分散性和变异性的量度"></a>三、分散性和变异性的量度</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><p>平均数能让我们知道数据集典型值——数据中心所在处，但若要给数据下具体的结论，则还是缺少足够的信息。通过分析各种距和差，来判断数据集离平均值的波动程度。</p><h2 id="具体内容-2"><a href="#具体内容-2" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、全距"><a href="#一、全距" class="headerlink" title="一、全距"></a>一、全距</h3><p>1、通过计算全距，我们可以轻易获知数据分散情况。全距可以指出数据的扩展范围，类似于测量数据的宽度。<br>2、计算方法是通过用数据集中的最大数减去数据集中的最小数。其中最小值称为下界，最小值称为上界。<br>3、优点是计算十分简单。<br>4、缺点是仅仅描述了数据的宽度，没有描述数据在上下界之间的分布形态，难以得出数据的真实分布形态。当存在异常值时，可能导致全距过大，即易受异常值的影响。<br><img src="https://img-blog.csdnimg.cn/20200328220717698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、迷你距"><a href="#二、迷你距" class="headerlink" title="二、迷你距"></a>二、迷你距</h3><p>不再度量整个数据集的全距，而是度量中央部分数据集的全距，通过迷你距可以有效忽略异常值的存在。而通过一个统一的方法来对数据集进行划分，将有助于我们确保多批数据集处理时所有都是以相同的方式忽略了异常值。<br><img src="https://img-blog.csdnimg.cn/20200328221615168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="1、四分位距"><a href="#1、四分位距" class="headerlink" title="1、四分位距"></a>1、四分位距</h4><p>1、计算步骤是通过将数据进行升序排列，选取其中三个特定位置的数据点来四等份数量划分数据集，并从左到右的称三个点叫作下四分位数、中位数和上四分位数，而四分位距的值便是上四分位数减去下四分位数的差。<br>2、优点是由于剔除掉头尾各1/4的数据——较小和较大的那一批数据，因此自然而然得把作为极大值或极小值的异常值也一同排除在外了。<br>3、意义是可以对几个数据集进行比较且比较结果不会被异常值扭曲。<br><img src="https://img-blog.csdnimg.cn/2020032822281443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>4、下、上四分位数的位置的快速计算方法如下<br><img src="https://img-blog.csdnimg.cn/20200328223010994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200328223020536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、百分位距"><a href="#2、百分位距" class="headerlink" title="2、百分位距"></a>2、百分位距</h4><p>1、如果我们将一批数据分成一百份的话，那么起分割作用数值就被称作百分位数，通常，第K百分位数就是位于数据范围K%处的数值，常用Pk表示。<br>2、百分位距不太常用，但对于划分名次、排行却很用有，比如一场考试中第90百分位数是50分，那么可以推测出50分高于等于其他90%的人的分数。<br><img src="https://img-blog.csdnimg.cn/20200328223942991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>3、计算步骤如下<br><img src="https://img-blog.csdnimg.cn/20200328224009805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="三、箱线图"><a href="#三、箱线图" class="headerlink" title="三、箱线图"></a>三、箱线图</h3><p>1、箱线图是一种专门显示各种各样的距的图形，它可以用直观的方法比较多批数据的全局、四分位距和中位数。<br>2、计算步骤如下<br><img src="https://img-blog.csdnimg.cn/20200329093058414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200329093350352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="四、方差和标准差"><a href="#四、方差和标准差" class="headerlink" title="四、方差和标准差"></a>四、方差和标准差</h3><p>1、方差是量度数据分散性的一种方法，是数值与均值的距离的平方数的平均值。${\delta}^2=\frac{\sum {(x-u)}^2}{n}$<br>2、标准差通过与均值的距离来指出分散性，比方差更加直观。$\delta =\sqrt{\frac{\sum {(x-u)}^2}{n}}$<br>3、标准差的计量单位与相应数据的单位一致，即若以“厘米”进行计量，当标准差为1时，表示在典型情况下，数值与均值相距1厘米。<br>4、当数据均相等时，标准差为0。</p><h3 id="五、标准分"><a href="#五、标准分" class="headerlink" title="五、标准分"></a>五、标准分</h3><p>1、通过标准分使多批数据集转化成一种统一通用的分布，进而可以对不同数据集的数据进行比较，而这些不同数据集特性可以互不相同，比如各均值和标准差各不相同。$z=\frac{x-u}{\delta}$<br>2、通过标准分来判断球员在自身历史数据中发挥的如何，是超长发挥还是发挥失利，同时可以判断两个球员的发挥进行比较。<img src="https://img-blog.csdnimg.cn/20200329095857596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="六、图形的鉴别"><a href="#六、图形的鉴别" class="headerlink" title="六、图形的鉴别"></a>六、图形的鉴别</h3><p>左图相较于右图而言更加宽阔，这表明其数据大多与均值相距甚远，左图对应的球员1发挥的稳定性不如球员2，具备更多的不可确定性，难以预测他在将来某一场球赛的发挥。<br><img src="https://img-blog.csdnimg.cn/20200329100252228.png" alt><img src="https://img-blog.csdnimg.cn/20200329100259631.png" alt="     "></p><h1 id="四、概率计算"><a href="#四、概率计算" class="headerlink" title="四、概率计算"></a>四、概率计算</h1><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><p>内容完全是《概率论》的基础知识，故不展开总结。需要指出的是，概率计算的重点应该根据现有的概率去推算出目标概率值。<br>@<a href="本篇目录">TOC</a></p><h2 id="具体内容-3"><a href="#具体内容-3" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、概率"><a href="#一、概率" class="headerlink" title="一、概率"></a>一、概率</h3><h3 id="二、条件概率"><a href="#二、条件概率" class="headerlink" title="二、条件概率"></a>二、条件概率</h3><p>$P(A|B)=\frac{P(A \cap B)}{P(B)}$</p><h3 id="三、全概率公式"><a href="#三、全概率公式" class="headerlink" title="三、全概率公式"></a>三、全概率公式</h3><p>$P(B)=P(A) \times P(B|A)+P(A’) \times P(B|A’)$</p><h3 id="四、贝叶斯公式"><a href="#四、贝叶斯公式" class="headerlink" title="四、贝叶斯公式"></a>四、贝叶斯公式</h3><p>$P(A|B)=\frac{P(A) \times P(B|A)}{P(A) \times P(B|A)+P(A’) \times P(B|A’)}$</p><h3 id="五、相交、互斥和独立事件"><a href="#五、相交、互斥和独立事件" class="headerlink" title="五、相交、互斥和独立事件"></a>五、相交、互斥和独立事件</h3><p>1、相交，$P(x_1)+P(x_2)&gt;1$。<br>2、互斥，$P(x_1)+P(x_2)=1$<br>3、独立，$P(x_1<em>x_2)=P(x_1)</em>P(x_2)$。</p><h3 id="六、绘图工具"><a href="#六、绘图工具" class="headerlink" title="六、绘图工具"></a>六、绘图工具</h3><h4 id="1、维恩图"><a href="#1、维恩图" class="headerlink" title="1、维恩图"></a>1、维恩图</h4><p>主要用于指出基本概率及各种关系。</p><p><img src="https://img-blog.csdnimg.cn/20200329122346463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、概率树"><a href="#2、概率树" class="headerlink" title="2、概率树"></a>2、概率树</h4><p>主要用于条件概率的计算。当忘了条件概率的公式时，通过勾画概率树也能轻松地解决。<br><img src="https://img-blog.csdnimg.cn/20200329121836526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="五、离散概率分布的运用"><a href="#五、离散概率分布的运用" class="headerlink" title="五、离散概率分布的运用"></a>五、离散概率分布的运用</h1><h2 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h2><p>概率可以得知发生事件的可能性，但无法指出所发生的的这些事情的整体影响，也无法指出这种整体影响对我们的具体影响，通过期望来预测长期结果，并利用方差来度量这些预测结果的确定性。</p><h2 id="具体内容-4"><a href="#具体内容-4" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、概率分布"><a href="#一、概率分布" class="headerlink" title="一、概率分布"></a>一、概率分布</h3><p>若有一台老虎机，只有三个窗口全部恰到好处时，才会有成堆的硬币滚滚而下，并且每局特定组合对应的客户收益规则和一台老虎机的每个窗口出现特定图像的概率如下<br><img src="https://img-blog.csdnimg.cn/20200330160409245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200330160421350.png" alt><br>那么通过对每一情况进行概率计算，    收益的概率分布应如下<img src="https://img-blog.csdnimg.cn/20200330160623833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、期望"><a href="#二、期望" class="headerlink" title="二、期望"></a>二、期望</h3><p>期望如常规数据的均值，只能给出位于中心的典型值。通过期望，来判断出在典型情况下可以期望每一局赢多少或赔多少。<img src="https://img-blog.csdnimg.cn/20200330161009593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>其意义是在多次拉杆后，我们能够期望每一局赔掉0.77美元，也就是说，如果玩100次老虎机，我们会期望赔掉77美元。</p><h3 id="三、方差"><a href="#三、方差" class="headerlink" title="三、方差"></a>三、方差</h3><p>方差用来全面体现出结果的分散性，换句话说是体现出每一局赌局有可能存在的收益变化。<br><img src="https://img-blog.csdnimg.cn/20200330161538617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="四、标准差"><a href="#四、标准差" class="headerlink" title="四、标准差"></a>四、标准差</h3><p>概率分布的标准差和数据集的标准差作用相似，是一种度量数据与数据中心的期望距离的方法。<br>如老虎机收益的标准差则是$\sqrt{2.6971}$，即1.642，这表示从平均情况来看，我们的每一局收益与期望收益-0.77之间的距离是1.642。一般而言，标准差高的老虎机表示整体收益变化大得多，整体上的赢钱数额更不可预期。</p><h3 id="五、单个随机变量的线性变换——Z-aX-b"><a href="#五、单个随机变量的线性变换——Z-aX-b" class="headerlink" title="五、单个随机变量的线性变换——Z=aX+b"></a>五、单个随机变量的线性变换——Z=aX+b</h3><p>现在假设老虎机每一局拉杆的赌本是1美元变成了2美元，而赢金翻了5倍。此时赢局新的概率分布应如下<br><img src="https://img-blog.csdnimg.cn/20200330162458853.png" alt><br>此时若要求出新随机变量Y的期望和方差，可以不需要再进行公式复杂的运算，可以直接借助与Y有线性关系的X的期望和方差，可以看出<b>Y=5X+3</b>。<br>值得注意地是，此时只是数值变成新值——收益，但基础概率仍保持不变。<br><img src="https://img-blog.csdnimg.cn/20200330163047347.png" alt></p><h3 id="六、多个随机变量的复合——Z-X1-X2"><a href="#六、多个随机变量的复合——Z-X1-X2" class="headerlink" title="六、多个随机变量的复合——Z=X1+X2"></a>六、多个随机变量的复合——Z=X1+X2</h3><p>当我们想在一台老虎机上玩两局时，那么我们仍需要重新计算概率分布，但需要注意地是此时不仅数值变成新值，同时基础概率也发生了变化。<br><img src="https://img-blog.csdnimg.cn/20200330163741490.png" alt><br>若记第一局的收益变量为X1，而第二局的收益变量为X2，那么<b>W=X1+X2</b>的期望和方差应为如下<br><img src="https://img-blog.csdnimg.cn/2020033016422075.png" alt><img src="https://img-blog.csdnimg.cn/20200330164144837.png" alt><br><b>需要注意的是，此时W是X1+X2，而非W=2X1，因为在这个背景下W的基础概率发生了变化。此类变化也可以引申至一共玩两局，每局玩不同的老虎机，此时两台老虎机对应的概率分布互不相同，W=X+Y。</b><br><img src="https://img-blog.csdnimg.cn/20200330164530867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="七、多个随机变量的复合的进阶——Z-aX-b-cY-d"><a href="#七、多个随机变量的复合的进阶——Z-aX-b-cY-d" class="headerlink" title="七、多个随机变量的复合的进阶——Z=aX+b+cY+d"></a>七、多个随机变量的复合的进阶——Z=aX+b+cY+d</h3><p>若一共玩两局，每一局用不同的老虎机，此时已求出W1=X+Y，当两台老虎机的本金和赢金规则均发生变化，即每一台数值变成新数值但基础概率都没有发生变化，对应的线性变换分别为aX+b，cY+d，那么两局对应的概率分布应为<b>W2=aX+b+cY+d</b>，此时W2的期望和方差可以通过EX、DX、EY和DY直接计算。</p><h3 id="八、比较特殊的复合——Z-X-Y"><a href="#八、比较特殊的复合——Z-X-Y" class="headerlink" title="八、比较特殊的复合——Z=X-Y"></a>八、比较特殊的复合——Z=X-Y</h3><p><img src="https://img-blog.csdnimg.cn/20200330165822969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200330165843292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="六、排列与组合"><a href="#六、排列与组合" class="headerlink" title="六、排列与组合"></a>六、排列与组合</h1><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><p>顺序是概率计算过程中不可避免的事情，通过学习简便方法来完成概率计算的进阶。</p><h2 id="具体内容-5"><a href="#具体内容-5" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、全排列"><a href="#一、全排列" class="headerlink" title="一、全排列"></a>一、全排列</h3><h4 id="1、个体排名"><a href="#1、个体排名" class="headerlink" title="1、个体排名"></a>1、个体排名</h4><h5 id="I、普通排位"><a href="#I、普通排位" class="headerlink" title="I、普通排位"></a>I、普通排位</h5><p>现有N匹赛马，那么它们所有可能的排列顺序为N！。</p><h5 id="II、圆形排位"><a href="#II、圆形排位" class="headerlink" title="II、圆形排位"></a>II、圆形排位</h5><p>现有N匹赛马，要求所有马匹围成一圈。<br>1、如果只考虑马匹的绝对位置的话，则所有可能排列顺序为N !。<br>2、如果需要考虑马匹之间的相对位置的话，则会出现排位不同，但实际上是同一样的，此时可任意选择一个马匹定位，其余N-1个马匹进行全排列，那么所有可能排列顺序则为(N-1)！。<img src="https://img-blog.csdnimg.cn/20200331142730905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>3、在2的基础上，进一步判定顺时针和逆时针排位是同一种情况来计算，那么所有可能的排位顺序为(N-1)！/2。</p><h4 id="2、类型排名"><a href="#2、类型排名" class="headerlink" title="2、类型排名"></a>2、类型排名</h4><p>如果要为N个对象排位，其中包括第一类对象K个，第二类对象J个，第三类对象M个…则排位方式数目的计算式为$\frac{N!}{J!K!M!…}$。<br>比如此时有3匹普通马、2匹斑马和5匹骆驼一同参加比赛，所有动物得冠军的可能性均相同，那么如果只对动物种类的排名感兴趣，所有的排名方式一共有$\frac{10!}{3!2!5!}$=252种。</p><h3 id="二、部分排列"><a href="#二、部分排列" class="headerlink" title="二、部分排列"></a>二、部分排列</h3><p>部分排列是指从给一个N个对象群体中取出R个对象进行排序，并得出排序方式总数目$\frac{N!}{(N-R)!}$。<br>比如一共有20匹赛马进行比赛，那么前三甲的具体排名的所有可能为$\frac{20!}{17!}$种。</p><h3 id="三、组合"><a href="#三、组合" class="headerlink" title="三、组合"></a>三、组合</h3><p>组合是指从N个对象群体中取出R个对象，但不必知道所选对象的确切顺序的情况下，所有可能有$\frac{N!}{R!(N-R)!}$种。<br>比如一共有20匹赛马进行比赛，那么确定前三名包括哪些马时一共有$\frac{20!}{3!17!}$种猜测结果。</p><h1 id="七、几何分布、二项分布及泊松分布"><a href="#七、几何分布、二项分布及泊松分布" class="headerlink" title="七、几何分布、二项分布及泊松分布"></a>七、几何分布、二项分布及泊松分布</h1><h2 id="前言-6"><a href="#前言-6" class="headerlink" title="前言"></a>前言</h2><p>善用一些特殊的概率分布，可以让我们对一些问题能以前所未有的速度计算概率、期望和方差。</p><h2 id="具体内容-6"><a href="#具体内容-6" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="几何分布-X-Geo-p"><a href="#几何分布-X-Geo-p" class="headerlink" title="几何分布  X~Geo( p )"></a>几何分布  X~Geo( p )</h3><p>1、目的：为了取得第一次成功，需要进行多少次试验。<br>2、应用条件：进行一系列独立试验，每一次试验或成功或失败，每一次试验的成功概率p相同。<br>3、基础公式：<br>$P(X=r)=pq^{r-1}$ $\qquad P(X&gt;r)=q^r$ $\qquad P(X \leq r)=1-q^r$ $\qquad E(X)=1/p$ $\qquad D(X)=q/p^2$   <img src="https://img-blog.csdnimg.cn/2020040117102617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二项分布-X-B-n-p"><a href="#二项分布-X-B-n-p" class="headerlink" title="二项分布 X~B(n,p)"></a>二项分布 X~B(n,p)</h3><p>1、目的：在n次试验中能成功多少次。<br>2、应用条件：进行一系列次数有限的独立试验，每一次试验或成功或失败，每一次试验的成功概率p相同。<br>3、基础公式：<br>$P(X=r)=C_n^rp^rq^{n-r}$ $\qquad E(X)= np$ $\qquad D(X)=npq$<br><img src="https://img-blog.csdnimg.cn/20200401170905420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200401170926179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="泊松分布-X-Po-lambda"><a href="#泊松分布-X-Po-lambda" class="headerlink" title="泊松分布 X~Po($\lambda$)"></a>泊松分布 X~Po($\lambda$)</h3><p>1、目的：想知道给定区间内的事件发生次数。<br>2、应用条件：单个事件在给定区间内随机、独立地发生，已知给定区间内的事件平均发生次数，或者叫发生率，且这个发生次数或发生率是有限的。<br>3、基础公式：<br>$P(X=r)=\frac{e^{-\lambda} \lambda^r}{r!}$ $\qquad E(X)= \lambda$ $\qquad D(X)=\lambda$<br>4、如果X<del>Po($\lambda x$)，X</del>Po($\lambda y$)，且X和Y是相互独立的，那么X+Y<del>Po($\lambda_x +\lambda_y$)。<br>5、如果X</del>B(n,p)，其中n足够大，p足够小，则可将该部分近似看作X ~Po(np)。<b>主要用于当使用二项分布时计算量过于庞大时，利用泊松分布来便捷计算。</b></p><p><img src="https://img-blog.csdnimg.cn/20200401171004360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/2020040117114862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200401171409676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="八、正态分布的运用"><a href="#八、正态分布的运用" class="headerlink" title="八、正态分布的运用"></a>八、正态分布的运用</h1><h2 id="前言-7"><a href="#前言-7" class="headerlink" title="前言"></a>前言</h2><p>并非所有数据集合都是离散的、可以指定确切数值的概率分布，其中也有数值型的概率分布，最典型的便是正态分布。</p><h2 id="具体内容-7"><a href="#具体内容-7" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="离散型和数据型数据"><a href="#离散型和数据型数据" class="headerlink" title="离散型和数据型数据"></a>离散型和数据型数据</h3><p>离散型数据就像一块块垫脚石，可以从一个数值跳到另一个数值，同时每个数值之间都有明确的间隔。连续型数据往往通过测量得到，而不是通过计数得到，测量结果在很大程度上取决于测量精度要求。<br>在处理连续数据的时候，实际上是考虑一个可以接受的精度，比如我们想要10英寸的细线，但实际上这种测量本身并不精确，我们可能要的只是能满足一定范围的细线就可以了，比如9.5英寸到10.5英寸之间的细线。也因为如此，在连续概率分布中，我们想求一确定无疑的数值的概率时会发现其始终为0，因为根本难以达到那种精度。<br>对于离散概率分布，我们关心的是取得一个特定数值的概率，而对于连续概率分布来说，我们关心的是取得一个特定范围的概率。</p><h3 id="概率密度函数"><a href="#概率密度函数" class="headerlink" title="概率密度函数"></a>概率密度函数</h3><p>概率密度函数描述连续随机变量的概率分布，它给我们指出了该概率分布的形状，并开辟了计算概率的道路。<img src="https://img-blog.csdnimg.cn/20200401200015369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><p>正态分布之所以被称为正态，是因为它的形态看起来呵护理想，在遇到测量值之类的大量连续数据时，你通过很期望数据符合这种形态。<img src="https://img-blog.csdnimg.cn/20200401200304468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>$\mu$指出曲线的中央位置，$\delta^2$指出分散性，这也意味着$\delta^2$越大，正态分布曲线越扁平、越宽。值得指出的是，在正态分布中，概率密度始终不可能为0，因为不管多少难发生但多少有些可能。<img src="https://img-blog.csdnimg.cn/20200401201244160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="正态概率计算"><a href="#正态概率计算" class="headerlink" title="正态概率计算"></a>正态概率计算</h3><p>1、确定分布与范围：如果正态分布适用于所遇到的情况，那看看是否能求出均值和标准差。因为只有先得知这些，我们才能只有正态分布的特性。<br>2、标准化：利用标准分来将其他非标准正态分布转化成N(0,1)标准正态分布。$Z=\frac{X-u}{\delta}$<img src="https://img-blog.csdnimg.cn/20200401203136715.png" alt><img src="https://img-blog.csdnimg.cn/20200401203150481.png" alt><br>3、利用概率表查找概率：通过标准分，利用标准正态概率表可以查找任何z值，进而查出相应概率P(Z&lt;z)。<br><img src="https://img-blog.csdnimg.cn/20200401203704783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="九、再谈正态分布的运用"><a href="#九、再谈正态分布的运用" class="headerlink" title="九、再谈正态分布的运用"></a>九、再谈正态分布的运用</h1><h2 id="前言-8"><a href="#前言-8" class="headerlink" title="前言"></a>前言</h2><p>当一个问题使用二项分布和泊松分布的计算量都过大时，可以考虑尝试用正态分布进行近似求解。</p><h2 id="具体内容-8"><a href="#具体内容-8" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、正态分布的复合"><a href="#一、正态分布的复合" class="headerlink" title="一、正态分布的复合"></a>一、正态分布的复合</h3><h4 id="1、X-Y的复合"><a href="#1、X-Y的复合" class="headerlink" title="1、X+Y的复合"></a>1、X+Y的复合</h4><p>在研究综合正态变量的时候，想办法求出X+Y的分布是十分有用的。如果独立随机变量X和Y均符合正态分布，那么可以得知X+Y也一定符合正态分布。在两个变量相加之后，实际上会增大了变异性，因此新分布的方差会增大，图形拉长，而为了保持图形总面积始终为1，因此图形同时也随之变扁。<br><img src="https://img-blog.csdnimg.cn/20200402115731604.png" alt><img src="https://img-blog.csdnimg.cn/20200402120712525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200402120739339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、X-Y的复合"><a href="#2、X-Y的复合" class="headerlink" title="2、X-Y的复合"></a>2、X-Y的复合</h4><p>有时候我们并非要求X+Y的概率，而是求X-Y的概率。如果独立随机变量X和Y均符合正态分布，那么可以得知X-Y也一定符合正态分布。<b>但值得注意的是，尽管我们用X-Y，但实际上变异性仍然如X+Y一般增大了。</b><br><img src="https://img-blog.csdnimg.cn/20200402120304620.png" alt><img src="https://img-blog.csdnimg.cn/20200402120818581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200402120851447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、复合与线性变换的区别"><a href="#二、复合与线性变换的区别" class="headerlink" title="二、复合与线性变换的区别"></a>二、复合与线性变换的区别</h3><h4 id="1、线性变换"><a href="#1、线性变换" class="headerlink" title="1、线性变换"></a>1、线性变换</h4><p>1、线性变换描述的是概率分布中的数值在大小方面的基本变化，比如我们想算的是4个成年人的体重导致翻车的概率，而不是一个成年人的体重翻四倍导致翻车的概率。<b>值得指出的是，选择不同的方法解释——复合或者线性变换，会导致计算结果出现差异。</b></p><p><img src="https://img-blog.csdnimg.cn/20200402121003684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>2、如果我们有一个X的线性变换aX+b，其中若X为正态分布——X~N($\mu,\delta^2$)，那么aX+b也属于正态分布。<br><img src="https://img-blog.csdnimg.cn/20200402121733116.png" alt></p><h4 id="2、复合"><a href="#2、复合" class="headerlink" title="2、复合"></a>2、复合</h4><p>当我们实际需要计算的是4位成年人的综合体重的概率分布，而不是对某一成年人的体重进行变换时，可以采用复合。<br><img src="https://img-blog.csdnimg.cn/20200402164327495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200402164503346.png" alt></p><h3 id="三、用正态分布近似二项分布"><a href="#三、用正态分布近似二项分布" class="headerlink" title="三、用正态分布近似二项分布"></a>三、用正态分布近似二项分布</h3><h4 id="1、基本条件"><a href="#1、基本条件" class="headerlink" title="1、基本条件"></a>1、基本条件</h4><p>当二项分布的形状看上去和正态分布的形状十分相似，那么在这种情况下，我们可以用正态分布代替二项分布。更加细致化的话，一般来说，当np和nq双双大于5时，可用正态分布近似代替二项分布。<img src="https://img-blog.csdnimg.cn/20200402165422244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200402164850776.png" alt></p><h4 id="2、注意事项"><a href="#2、注意事项" class="headerlink" title="2、注意事项"></a>2、注意事项</h4><p>我们通过二项分布X<del>B(12，0)求P(X &lt;a)的概率，若直接将二项分布转化成其对应的正态分布X</del> N(6，3)，，用二项分布计算的结果是0.387，用正态分布计算的是0.5，此时将发现近似结果出现较大的误差。这主要是因为前者是离散分布，而后者是连续分布。<img src="https://img-blog.csdnimg.cn/20200402170413195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>因此我们在进行近似计算时，需要先考虑<b>连续性修正</b>，比如修改为求P(X&lt;5.5)，此时结果为0.3859，非常近似二项分布的结果。<br><img src="https://img-blog.csdnimg.cn/20200402170930201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200402170951249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="3、二项分布的近似方法的选择"><a href="#3、二项分布的近似方法的选择" class="headerlink" title="3、二项分布的近似方法的选择"></a>3、二项分布的近似方法的选择</h4><p>如果X~B(n,p)，当np&gt;5且nq&gt;5时，使用正态分布近似代替二项分布。<br>如果n&gt;50且p&lt;0.1，则可以使用泊松分布近似代替二项分布。</p><h3 id="四、用正态分布近似泊松分布"><a href="#四、用正态分布近似泊松分布" class="headerlink" title="四、用正态分布近似泊松分布"></a>四、用正态分布近似泊松分布</h3><h4 id="1、基本条件-1"><a href="#1、基本条件-1" class="headerlink" title="1、基本条件"></a>1、基本条件</h4><p>当$\lambda$很小时，泊松分布的曲线左偏，与正态分布对称的曲线不符，因此不适用。一般而言，如果X<del>Po($\lambda$)且$\lambda$ &gt;15，我们就能用X</del>N($\lambda$,$\lambda$)来近似计算。</p><h4 id="2、注意事项-1"><a href="#2、注意事项-1" class="headerlink" title="2、注意事项"></a>2、注意事项</h4><p>和正态分布近似二项分布一般，也需要先进行<b>连续型修正</b>才行。</p><h1 id="十、统计抽样的运用"><a href="#十、统计抽样的运用" class="headerlink" title="十、统计抽样的运用"></a>十、统计抽样的运用</h1><h2 id="前言-9"><a href="#前言-9" class="headerlink" title="前言"></a>前言</h2><p>当事件数量十分庞大时，我们很难决定该从哪处收集数据。通过统计抽样的方法来实现如何在实际工作中成功收集数据——有效地、正确地、省时省力地。</p><h2 id="具体内容-9"><a href="#具体内容-9" class="headerlink" title="具体内容"></a>具体内容</h2><p>通过在总体抽取一个好的样本，使其具有代表性，即样本具有与总体十分相似的特性，进而可以根据样本来预测总体的特性，比如数据中心相同。<img src="https://img-blog.csdnimg.cn/20200404104555889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="样本的设计"><a href="#样本的设计" class="headerlink" title="样本的设计"></a>样本的设计</h3><p>1、确定目标总体：因为只有先弄清目标总体所在处，才能知道样本取自哪里。<img src="https://img-blog.csdnimg.cn/20200404104940716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>2、确定抽样单位：比如可以是一粒口香糖球，也可以是一盒口香糖球。<img src="https://img-blog.csdnimg.cn/20200404105055799.png" alt><br>3、确定抽样空间：涵盖整个目标总体的抽样空间表。<img src="https://img-blog.csdnimg.cn/20200404105232110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404105846443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="偏倚的来源"><a href="#偏倚的来源" class="headerlink" title="偏倚的来源"></a>偏倚的来源</h3><p>偏倚样本无法代表目标总体，由于样本与总体的特性不相似，故无法根据样本对总体作出正确的判断。<img src="https://img-blog.csdnimg.cn/2020040410534747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>样本偏倚的产生诱因主要有：<br><img src="https://img-blog.csdnimg.cn/20200404105406756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>如上所述，偏倚来源广泛，而其中大部分是归咎于样本选取方法，通过检查样本的选取方法，使偏倚的发生几率降至最低程度。</p><h3 id="样本的选择"><a href="#样本的选择" class="headerlink" title="样本的选择"></a>样本的选择</h3><h4 id="1、简单随机抽样"><a href="#1、简单随机抽样" class="headerlink" title="1、简单随机抽样"></a>1、简单随机抽样</h4><p>通过随机过程选取一个大小为n的样本，所有大小为n的可能样本被选中的可能性都相同。</p><h5 id="I-重复抽样"><a href="#I-重复抽样" class="headerlink" title="I. 重复抽样"></a>I. 重复抽样</h5><p>在选取一个抽样单位并记录下这个抽样单位的相关信息之后，再将这个单位放回总体中。如在街上提问，你可能问了一个人多次。</p><h5 id="II-不重复抽样"><a href="#II-不重复抽样" class="headerlink" title="II. 不重复抽样"></a>II. 不重复抽样</h5><p>不再将抽样单位放回总体。如口香糖球检验，尝过的口香糖球是不会被放回总体的。</p><h5 id="III-样本的选取"><a href="#III-样本的选取" class="headerlink" title="III.样本的选取"></a>III.样本的选取</h5><p>1、抽签    2、随机编号生成器</p><h5 id="IV-简单随机抽样的缺点"><a href="#IV-简单随机抽样的缺点" class="headerlink" title="IV. 简单随机抽样的缺点"></a>IV. 简单随机抽样的缺点</h5><p>仍然存在样本无法代表总体的可能性，因为是随机的，存在万一。比如可能最终抽取到的全是黄色口香糖球，而错失其他颜色。</p><h4 id="2、分层抽样"><a href="#2、分层抽样" class="headerlink" title="2、分层抽样"></a>2、分层抽样</h4><p>将总体分割为几个相似的组，每个组具有类似的特性，为此需查看每一个层在总体中所占的比例，然后按照相应比例从每一个层中抽取抽样单位。比如若总体中红色球占百分之五十，那么样本的百分之五十应该是红色球。</p><h4 id="3、整群抽样"><a href="#3、整群抽样" class="headerlink" title="3、整群抽样"></a>3、整群抽样</h4><p>进行整群抽样时，不是对抽样单位进行简单随机抽样，而是对群进行简单随机抽样，然后对每一个群的各种特性进行调查，比如我们可以对一盒盒口香糖球进行简单随机抽样，然后品尝这些盒子里的糖球的味道。<br>它的优点是不需要使用总体抽样空间就可以进行整群抽样，比如我们在调查数目情况，并把几片特定的森林作为群，则只需要了解那几片森林中的数目就行了。<br><b>整群抽样之所以行得通，是因为群与群相互之间很相似。</b><br><img src="https://img-blog.csdnimg.cn/20200404112124632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="4、系统抽样"><a href="#4、系统抽样" class="headerlink" title="4、系统抽样"></a>4、系统抽样</h4><p>按照某种顺序列出总体名单，然后每K个单位进行一次调查。比如可以选择每10个样本抽样一次。<br>其优点是快捷简单，但缺点是若总体中存在某种循环模式，则样本将发生偏倚。<br><img src="https://img-blog.csdnimg.cn/20200404112328453.png" alt><img src="https://img-blog.csdnimg.cn/20200404112412958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十一、总体和样本的估计"><a href="#十一、总体和样本的估计" class="headerlink" title="十一、总体和样本的估计"></a>十一、总体和样本的估计</h1><h2 id="前言-10"><a href="#前言-10" class="headerlink" title="前言"></a>前言</h2><p>利用样本准确地预测总体，并以一定方式说明预测结果的可靠程度，通过样本了解总体，并学习如何反过来通过总体了解样本。</p><h2 id="具体内容-10"><a href="#具体内容-10" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、总体均值的估计"><a href="#一、总体均值的估计" class="headerlink" title="一、总体均值的估计"></a>一、总体均值的估计</h3><p><img src="https://img-blog.csdnimg.cn/20200404114345697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>通过上图可以看出，一个好的样本的均值总是和总体的均值大致相当，因此我们可以用样本的均值$\overline X$来表示总体均值的点估计量。<br><img src="https://img-blog.csdnimg.cn/20200404114324949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404115234637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、总体方差的估计"><a href="#二、总体方差的估计" class="headerlink" title="二、总体方差的估计"></a>二、总体方差的估计</h3><p><img src="https://img-blog.csdnimg.cn/20200404115302471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>如上图所示，样本的方差一般要比总体的方差小一些，因此我们需要修改样本数据的方差公式来估计总体方差。<br><img src="https://img-blog.csdnimg.cn/20200404115424161.png" alt><br><b>值得注意的是，在拥有总体所有数据来求总体方差确切值时，我们用的公式为如下</b><br><img src="https://img-blog.csdnimg.cn/20200404115845625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404115910982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="三、比例的抽样分布"><a href="#三、比例的抽样分布" class="headerlink" title="三、比例的抽样分布"></a>三、比例的抽样分布</h3><p><img src="https://img-blog.csdnimg.cn/2020040412004973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404120008379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="1、比例分布的期望和方差"><a href="#1、比例分布的期望和方差" class="headerlink" title="1、比例分布的期望和方差"></a>1、比例分布的期望和方差</h4><p>如果我们已知在总体中红色球占25%，将总体分隔成许多容量为100颗的盒，求一盒糖球中红色球有40颗及以上的概率。【利用总体求样本】<br>一盒容量为100颗，这说明样本大小n为100，用随机变量X代表样本中的红色糖球的数目，则X~B(n,p)，其中n=100，p=0.25。设样本中的红色糖球比例$P_s$为一个随机变量，且$P_s=X/n$。<br>那么我们此时便得到了比例的概率分布。此时通过推导得到其对应的期望和方差。<img src="https://img-blog.csdnimg.cn/20200404121418979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404121512310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、比例分布的概率计算"><a href="#2、比例分布的概率计算" class="headerlink" title="2、比例分布的概率计算"></a>2、比例分布的概率计算</h4><p>此时我们已经得到比例分布的期望和方差值，那么如何根据这些来计算比例的概率呢。<br>我们发现当n很大时——n&gt;30，$P_s$比例分布近似正态分布，即$P_s \backsim N(p,\frac{pq}{n})$。<br>但需要注意的是，由于总体是离散型的二项分布，因此在用正态分布近似计算时需要连续性修正。<br><img src="https://img-blog.csdnimg.cn/20200404122257255.png" alt><img src="https://img-blog.csdnimg.cn/20200404122214598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/2020040412222912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="四、均值的抽样分布"><a href="#四、均值的抽样分布" class="headerlink" title="四、均值的抽样分布"></a>四、均值的抽样分布</h3><h5 id="1、均值分布的期望和方差"><a href="#1、均值分布的期望和方差" class="headerlink" title="1、均值分布的期望和方差"></a>1、均值分布的期望和方差</h5><p>如果所有糖球盒总体的均值为10，方差为1，即每一盒糖球数目大致为9~11之间，那么一个样本（30个糖球盒）中，其每盒糖球平均数目小于等于8.5的概率是多少。<br>我们已知盒装糖球的总体的均值和方差，令一个包装盒的糖球数量用X表示，随机选择的每一盒糖球都是X的一个独立观察结果，因此每一袋糖球都符合相同的分布，即如果用$X_i$代表随机选择的一袋糖球的糖球数量，则每个$X_i$的期望都是$\mu$，方差都是$\delta^2$，其中1&lt;=i&lt;=30。那么此时，我们可以用$ \overline X$表示这n袋糖球的容量均值。<br><img src="https://img-blog.csdnimg.cn/20200404131611388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404131821585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、均值分布的概率计算"><a href="#2、均值分布的概率计算" class="headerlink" title="2、均值分布的概率计算"></a>2、均值分布的概率计算</h4><p>同比例分布一样，当n足够大时，我们可以用正态分布来近似代替均值分布，从而计算出其概率。</p><h3 id="五、中心极限定理"><a href="#五、中心极限定理" class="headerlink" title="五、中心极限定理"></a>五、中心极限定理</h3><p><img src="https://img-blog.csdnimg.cn/20200404132152713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>中心极限定理的应用：<br><img src="https://img-blog.csdnimg.cn/20200404132224852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404132240366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200404132307226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十二、置信区间的构建"><a href="#十二、置信区间的构建" class="headerlink" title="十二、置信区间的构建"></a>十二、置信区间的构建</h1><h2 id="前言-11"><a href="#前言-11" class="headerlink" title="前言"></a>前言</h2><p>我们的确可以使用点估计量来估计总体均值、方差或一定比例的精确值，但是我们始终无法确定我们使用的样本一定是无偏样本，因此我们考虑使用置信区间的方法来估计总体统计量，因为它是考虑了不确定性的方法。</p><h2 id="具体内容-11"><a href="#具体内容-11" class="headerlink" title="具体内容"></a>具体内容</h2><p>糖果公司用一个包含100粒糖球的样本得出口味持续时间均值的点估计量为62.7分钟，于是便在电视节目黄金时段宣布其公司糖球口味的平均持续时间为62.7分钟，但有人自行做了测试，得出了不同的结果，威胁要起诉糖果公司。<br>此时，我们应该制定的是总体均值的估计值的区间范围，而不是一个精确值，因为这样的话会给予我们更大的误差空间，就不容易被人起诉了。</p><h3 id="一、置信区间的求解-——-总体正态、样本正态"><a href="#一、置信区间的求解-——-总体正态、样本正态" class="headerlink" title="一、置信区间的求解 —— 总体正态、样本正态"></a>一、置信区间的求解 —— 总体正态、样本正态</h3><h4 id="1、选择总体统计量"><a href="#1、选择总体统计量" class="headerlink" title="1、选择总体统计量"></a>1、选择总体统计量</h4><p>在问题中，需要为糖球口味持续时间的均值来构建区间，于是需要为总体均值$\mu$来构建一个置信区间。</p><h4 id="2、求出其抽样分布"><a href="#2、求出其抽样分布" class="headerlink" title="2、求出其抽样分布"></a>2、求出其抽样分布</h4><p>为了求出总体均值的抽样分布，我们需要先计算出$\overline X$的期望、方差和分布。而这些在上一节中已经计算过了。<img src="https://img-blog.csdnimg.cn/20200406105935433.png" alt><br>此时一个问题是我们现在并不知道总体的方差是多少，但是我们可以借用点估计法$\hat{\mu}$ 或 $s^2$ 来近似替代，因为这已经是我们目前所具有的数据中可以得到的最近似的值了。公式进一步推导成如下形式。<img src="https://img-blog.csdnimg.cn/20200406110833229.png" alt><br>对于样本均值的分布，我们可以根据”若X符合正态分布，那么$\overline X$也符合正态分布”的定理来得知，其应符合正态分布。在本题中即是$\overline X \thicksim N(\mu,\frac{s^2}{n})$。</p><h4 id="3、决定置信水平"><a href="#3、决定置信水平" class="headerlink" title="3、决定置信水平"></a>3、决定置信水平</h4><p>置信水平表明你希望自己对于“总体统计量落入置信区间”的这一说法有多大的把握，比如我们希望总体均值的执行水平为95%，这表明总体均值处于置信区间的概率为0.95，当然可以更高如99%，这样糖果公司就可以更有信心在广告宣称“总体均值位于这个置信区间”这一说法。<br>值得注意的是，置信水平越高，区间越宽，也就是确定的概率越大，范围越广，也越对说法有把握。<br>为了防止说法几乎毫无意义，我们需要确定一个合适的置信水平，确保范围小而可靠，对此，我们一般采用95%作为常用置信水平。<img src="https://img-blog.csdnimg.cn/20200406112541519.png" alt></p><h4 id="4、求出置信上下限"><a href="#4、求出置信上下限" class="headerlink" title="4、求出置信上下限"></a>4、求出置信上下限</h4><p>根据抽样分布和选择好的置信水平来求出置信上下限，从而确定置信区间的范围。<img src="https://img-blog.csdnimg.cn/20200406112615938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>此时我们再将$\overline X$进行标准化，从而利用正态分布表来查出其对应的区间值。<br><img src="https://img-blog.csdnimg.cn/2020040611281747.png" alt><br>此时我们将括号里面的不等式进行展开，即可确定置信区间范围，其中$\overline X$可以通过样本$\overline x$来计算。<br><img src="https://img-blog.csdnimg.cn/20200406112847815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>得出最后结果。<br><img src="https://img-blog.csdnimg.cn/20200406113142264.png" alt></p><h3 id="二、置信区间的简便算法"><a href="#二、置信区间的简便算法" class="headerlink" title="二、置信区间的简便算法"></a>二、置信区间的简便算法</h3><h4 id="1、统计量的抽样分布符合正态分布时"><a href="#1、统计量的抽样分布符合正态分布时" class="headerlink" title="1、统计量的抽样分布符合正态分布时"></a>1、统计量的抽样分布符合正态分布时</h4><p><img src="https://img-blog.csdnimg.cn/20200406113509823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200406113536227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、统计量的抽样分布符合T分布时"><a href="#2、统计量的抽样分布符合T分布时" class="headerlink" title="2、统计量的抽样分布符合T分布时"></a>2、统计量的抽样分布符合T分布时</h4><p><img src="https://img-blog.csdnimg.cn/20200409100957514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="三、特殊情况-——-总体正态、样本T分布"><a href="#三、特殊情况-——-总体正态、样本T分布" class="headerlink" title="三、特殊情况 —— 总体正态、样本T分布"></a>三、特殊情况 —— 总体正态、样本T分布</h3><p>糖果公司想求出糖球重量的置信区间，但只抽取了少量的样本，比如抽取了一个具有代表性的样本，共10颗，然后称了每一粒糖球的重量，计算出这个样本的$\overline X$=0.5，$s^2$=0.09，此时该如何求出其置信区间。</p><h4 id="1、选择总体统计量-1"><a href="#1、选择总体统计量-1" class="headerlink" title="1、选择总体统计量"></a>1、选择总体统计量</h4><p>我们需要为糖球重量均值构建一个置信区间，也就是要为总体均值$\mu$构建置信区间。</p><h4 id="2、求-overline-X-的概率分布"><a href="#2、求-overline-X-的概率分布" class="headerlink" title="2、求$\overline X$的概率分布"></a>2、求$\overline X$的概率分布</h4><p>当总体符合正态分布，$\delta^2$未知，且可供支配的样本很小时，$\overline X$符合T分布。而当样本数量为n个时，T分布的形式为$T\thicksim t(n-1)$，而$T=\frac{\overline X - u}{s/\sqrt{n}}$，也就是说在这道题中$T=\frac{\overline X - u}{s/\sqrt{n}} \thicksim t(9)$。<img src="https://img-blog.csdnimg.cn/20200409100052529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="3、决定置信水平-1"><a href="#3、决定置信水平-1" class="headerlink" title="3、决定置信水平"></a>3、决定置信水平</h4><p>一般设置为95%。</p><h4 id="4、求出-mu-的置信上下限"><a href="#4、求出-mu-的置信上下限" class="headerlink" title="4、求出$\mu$的置信上下限"></a>4、求出$\mu$的置信上下限</h4><p><img src="https://img-blog.csdnimg.cn/2020040910053121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>再利用T分布概率表可求出$P(T&gt;t)=p$中的t值，在这道题中p=0.025。<br><img src="https://img-blog.csdnimg.cn/20200409100735753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十三、假设检验的运用"><a href="#十三、假设检验的运用" class="headerlink" title="十三、假设检验的运用"></a>十三、假设检验的运用</h1><h2 id="前言-12"><a href="#前言-12" class="headerlink" title="前言"></a>前言</h2><p>利用样本检验各种统计断言是否可能属实，通过假设检验可以权衡证据，检验极限结果，判断断言的产生是纯属巧合还是存在其他内在根据，从而可以更加客观得看出事物的本质。</p><h2 id="具体内容-12"><a href="#具体内容-12" class="headerlink" title="具体内容"></a>具体内容</h2><p>某公司出品一种号称两周治愈90%的打鼾患者的药品，但某医生通过15个样本的统计发现其效力并没有达到这种程度，此时到底是谁的结论是正确的，医生可能抽取的样本存在偏倚。</p><h3 id="一、假设检验的步骤"><a href="#一、假设检验的步骤" class="headerlink" title="一、假设检验的步骤"></a>一、假设检验的步骤</h3><h4 id="1、确定假设"><a href="#1、确定假设" class="headerlink" title="1、确定假设"></a>1、确定假设</h4><p>设置认同的原假设$H_0$：该药品能在两周内治愈90%的患者，即$H_0:p=0.9$。<br>设置与原假设对立的备择假设$H_1$：该药品在两周内只能治愈低于90%的患者，即$H_1:p&lt;0.9$。</p><h4 id="2、选择检验统计量"><a href="#2、选择检验统计量" class="headerlink" title="2、选择检验统计量"></a>2、选择检验统计量</h4><p>如果用X表示样本人数，就可以将X作为检验统计量。样本中共有15名患者，而根据只要公司的说法，成功概率为0.9，因此可推出X符合二项分布，即$X \sim B(15,0.9)$。     </p><h4 id="3、确定拒绝域"><a href="#3、确定拒绝域" class="headerlink" title="3、确定拒绝域"></a>3、确定拒绝域</h4><p>如果鼻鼾患者的治愈人数位于拒绝域内，我们就说有足够的证据可以反驳原假设；如果鼻鼾患者的治愈人数位于拒绝域之外，我就承认没有足够的证据可以反驳原假设，并接受原假设的断言，其中拒绝域的分界点，我们称作临界值c。    <img src="https://img-blog.csdnimg.cn/20200418112344977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>而为了求出假设检验的拒绝域或临界值c，我们需要先定下显著性水平$\alpha$，它的值代表着希望在样本结果的不可能程度达到多大时就拒绝原假设$H_0$。比如假设我们以5%作为显著性水平检验制药公司的断言，这说明我们选取的拒绝域应使得“鼻鼾患者治愈人数小于c”的概率小于0.05，即概率分布最低端的5%部分。<img src="https://img-blog.csdnimg.cn/2020041811273250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="4、求出P值"><a href="#4、求出P值" class="headerlink" title="4、求出P值"></a>4、求出P值</h4><p>利用样本进行P值的计算，根据其结果来判定样本结果是否落在假设检验的拒绝域以内，也就是说根据P值来确定是否该拒绝原假设。比如医生抽样的15名样本中只有11个痊愈，这时我们应该求 $P(X \leq 11)$的值。</p><h4 id="5、判断样本结果是否位于拒绝域中"><a href="#5、判断样本结果是否位于拒绝域中" class="headerlink" title="5、判断样本结果是否位于拒绝域中"></a>5、判断样本结果是否位于拒绝域中</h4><p>当显著性水平为5%时，若 $P(X \leq 11)&lt;0.05$的话，表示数值11落在拒绝域中，这时我们可以拒绝原假设。<img src="https://img-blog.csdnimg.cn/20200418114651293.png" alt></p><h4 id="6、作出决策"><a href="#6、作出决策" class="headerlink" title="6、作出决策"></a>6、作出决策</h4><p><img src="https://img-blog.csdnimg.cn/20200418115145311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>值得指出的是，在研究实际拥有的证据之前，必须根据所需要的证据水平决定所需要的检验水平。因为如果先看证据是否充分再确定检验水平，这会摄入主观的因素来选定特定的检验级别，导致检验结果发生偏倚，从而做出错误决策。</p><h3 id="二、假设检验计算的进阶"><a href="#二、假设检验计算的进阶" class="headerlink" title="二、假设检验计算的进阶"></a>二、假设检验计算的进阶</h3><p>学会近似分布的选择并随后使用该近似分布来计算，从而减少计算量。比如当样本量达到100名后，考虑用正态分布来近似二项分布，如$\frac{X-90}{3}\sim N(0,1) \iff X\sim N(90,9) \iff X\sim B(100,0.9)$。<br><img src="https://img-blog.csdnimg.cn/2020041811582449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200418115834715.png" alt><img src="https://img-blog.csdnimg.cn/20200418115859373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200418115919571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="三、第一类错误"><a href="#三、第一类错误" class="headerlink" title="三、第一类错误"></a>三、第一类错误</h3><p>第一类错误即在原假设实际为正确的情况下拒绝原假设的后果。如果发生第一类错误，那么一定是拒绝了原假设，而拒绝原假设的前提是样本结果必须位于拒绝域之内，因此$P(发生第一类错误)=\alpha$。<img src="https://img-blog.csdnimg.cn/2020041812033856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="四、第二类错误"><a href="#四、第二类错误" class="headerlink" title="四、第二类错误"></a>四、第二类错误</h3><p>第二类错误是当原假设实际为错误假设时反而接受了它的后果，其$P(发生第二类错误)=\beta$，其中参数的计算方法如下。 <img src="https://img-blog.csdnimg.cn/20200418120625910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>在计算第二类错误的概率时需要先满足一个必要条件——备择假设具有唯一特定值。比如我们的假设应该为<br><img src="https://img-blog.csdnimg.cn/20200418121055192.png" alt><img src="https://img-blog.csdnimg.cn/20200418121329879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200418121350600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="五、假设检验的功效"><a href="#五、假设检验的功效" class="headerlink" title="五、假设检验的功效"></a>五、假设检验的功效</h3><p><img src="https://img-blog.csdnimg.cn/20200418122158501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="六、实例"><a href="#六、实例" class="headerlink" title="六、实例"></a>六、实例</h3><p><img src="https://img-blog.csdnimg.cn/20200418141556762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200418141615216.png" alt><img src="https://img-blog.csdnimg.cn/20200418141629323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十四、卡方分布"><a href="#十四、卡方分布" class="headerlink" title="十四、卡方分布"></a>十四、卡方分布</h1><h2 id="前言-13"><a href="#前言-13" class="headerlink" title="前言"></a>前言</h2><p>有时候事实与期望并不相符，那么当它发生时我们可以通过卡方分布来判断这些偏差是正常波动，还是说明概率模型存在问题。</p><h2 id="具体内容-13"><a href="#具体内容-13" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、-chi-2-分布的性质"><a href="#一、-chi-2-分布的性质" class="headerlink" title="一、$\chi ^2$分布的性质"></a>一、$\chi ^2$分布的性质</h3><p><img src="https://img-blog.csdnimg.cn/20200421133821863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、用-chi-2-分布检验评估差异"><a href="#二、用-chi-2-分布检验评估差异" class="headerlink" title="二、用$\chi ^2$分布检验评估差异"></a>二、用$\chi ^2$分布检验评估差异</h3><p>肥蛋赌场有一大堆亮闪闪的老虎机，但现在的问题是人们不仅赌个不停也赢个不停，发现事实和期望中奖概率似乎有很大的出入，现在怀疑老虎机被人动了手脚，请判断事实和期望是否近似吻合。</p><h4 id="1、初始数据"><a href="#1、初始数据" class="headerlink" title="1、初始数据"></a>1、初始数据</h4><p><img src="https://img-blog.csdnimg.cn/20200421134812595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、计算步骤"><a href="#2、计算步骤" class="headerlink" title="2、计算步骤"></a>2、计算步骤</h4><p>1、首先利用观测频数和期望频数来计算检验统计量，其中期望频数可以用总数和期望概率计算出来。<br><img src="https://img-blog.csdnimg.cn/20200421134128548.png" alt><img src="https://img-blog.csdnimg.cn/2020042113484544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br>2、利用之前计算出来的检验统计量值来进行假设检验。</p><p><img src="https://img-blog.csdnimg.cn/20200421134943707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200421135243200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="3、知识进阶"><a href="#3、知识进阶" class="headerlink" title="3、知识进阶"></a>3、知识进阶</h4><p>我们可以得知用卡方分布可以对相当多的概率分布进行优度检验，只要我们得到一组观察频数并能算出其期望频数，那么就可以用卡方分布检验任何概率分布的拟合优度，不过在这里面最大的困难在于自由度v的计算。下面是最常见的概率分布的卡方自由度的计算公式。<img src="https://img-blog.csdnimg.cn/20200421135714607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="三、用-chi-2-分布检验独立性"><a href="#三、用-chi-2-分布检验独立性" class="headerlink" title="三、用$\chi ^2$分布检验独立性"></a>三、用$\chi ^2$分布检验独立性</h3><p>步骤与检验优度基本一致。</p><h4 id="1、初始数据-1"><a href="#1、初始数据-1" class="headerlink" title="1、初始数据"></a>1、初始数据</h4><p><img src="https://img-blog.csdnimg.cn/20200421140102392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、计算步骤-1"><a href="#2、计算步骤-1" class="headerlink" title="2、计算步骤"></a>2、计算步骤</h4><p><img src="https://img-blog.csdnimg.cn/20200421135828758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/2020042113584248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="3、自由度的计算方法"><a href="#3、自由度的计算方法" class="headerlink" title="3、自由度的计算方法"></a>3、自由度的计算方法</h4><p><img src="https://img-blog.csdnimg.cn/20200421140025598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200421140153395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h1 id="十五、相关与回归"><a href="#十五、相关与回归" class="headerlink" title="十五、相关与回归"></a>十五、相关与回归</h1><h2 id="前言-14"><a href="#前言-14" class="headerlink" title="前言"></a>前言</h2><p>前面所讲的统计量只描述一个变量，如个人身高等，在这里我们将学习一些用于说明变量之间关系的统计量，了解它将使我们了解事物的相互关系，了解真相。</p><h2 id="具体内容-14"><a href="#具体内容-14" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="一、善用散点图指出数据模式"><a href="#一、善用散点图指出数据模式" class="headerlink" title="一、善用散点图指出数据模式"></a>一、善用散点图指出数据模式</h3><p>通过将数据图形化，可以很清晰得分析出其是拟合哪种曲线。<br><img src="https://img-blog.csdnimg.cn/20200421144421515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="二、图形的诠释误区"><a href="#二、图形的诠释误区" class="headerlink" title="二、图形的诠释误区"></a>二、图形的诠释误区</h3><p>呈正相关的曲线，并不表明自变量x与因变量y之间是因果关系，因为它们只是刚好被相同的因素驱动的，因此呈现出二者都同时增加。<br><img src="https://img-blog.csdnimg.cn/20200421144529205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="三、最佳拟合线y-ax-b的参数计算"><a href="#三、最佳拟合线y-ax-b的参数计算" class="headerlink" title="三、最佳拟合线y=ax+b的参数计算"></a>三、最佳拟合线y=ax+b的参数计算</h3><h4 id="1、参数b的计算"><a href="#1、参数b的计算" class="headerlink" title="1、参数b的计算"></a>1、参数b的计算</h4><p><img src="https://img-blog.csdnimg.cn/2020042114474384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200421144916564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200421144937759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h4 id="2、参数a的计算"><a href="#2、参数a的计算" class="headerlink" title="2、参数a的计算"></a>2、参数a的计算</h4><p><img src="https://img-blog.csdnimg.cn/20200421144820157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h3 id="四、用相关系数量度直线与数据的拟合度"><a href="#四、用相关系数量度直线与数据的拟合度" class="headerlink" title="四、用相关系数量度直线与数据的拟合度"></a>四、用相关系数量度直线与数据的拟合度</h3><p>相关系数r是介于-1和1之间的一个数，描述了各个数据点与直线的偏离程度，因此可以通过它来量度回归线与数据的拟合度。当r=-1，则数据为完全负线性相关，所有数据点都在一条直线上，如果r等于1，则数据完全正线性相关，如果等于0，则不存在相关性。<br><img src="https://img-blog.csdnimg.cn/20200421145101195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200421145213839.png" alt><br><img src="https://img-blog.csdnimg.cn/20200421145223617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200421145251222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200421145258932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《基金投资入门与实战技巧》总结</title>
      <link href="/2020/03/19/ji-jin-tou-zi-ru-men-yu-shi-zhan-ji-qiao-zong-jie/"/>
      <url>/2020/03/19/ji-jin-tou-zi-ru-men-yu-shi-zhan-ji-qiao-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料：罗斌的《基金投资入门与实战技巧》"><a href="#参考资料：罗斌的《基金投资入门与实战技巧》" class="headerlink" title="参考资料：罗斌的《基金投资入门与实战技巧》"></a>参考资料：罗斌的《基金投资入门与实战技巧》</h1><p><img src="https://img-blog.csdnimg.cn/20200319230807357.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200319230828822.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200319230836342.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200319230840940.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200319230845316.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融启蒙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日英基本会话对照</title>
      <link href="/2020/03/11/ri-ying-ji-ben-hui-hua-dui-zhao/"/>
      <url>/2020/03/11/ri-ying-ji-ben-hui-hua-dui-zhao/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料：油管的视频《Real-Japanese-Phrases-for-Speaking》"><a href="#参考资料：油管的视频《Real-Japanese-Phrases-for-Speaking》" class="headerlink" title="参考资料：油管的视频《Real Japanese Phrases for Speaking》"></a>参考资料：油管的视频《Real Japanese Phrases for Speaking》</h2><p><img src="https://img-blog.csdnimg.cn/20200311120957677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语会话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本文化常识之历史篇</title>
      <link href="/2020/03/08/ri-ben-wen-hua-chang-shi-zhi-li-shi-pian/"/>
      <url>/2020/03/08/ri-ben-wen-hua-chang-shi-zhi-li-shi-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料：华东理工大学出版社的《晨读夜诵-每天读一点日本文化常识大全》"><a href="#参考资料：华东理工大学出版社的《晨读夜诵-每天读一点日本文化常识大全》" class="headerlink" title="参考资料：华东理工大学出版社的《晨读夜诵.每天读一点日本文化常识大全》"></a>参考资料：华东理工大学出版社的《晨读夜诵.每天读一点日本文化常识大全》</h2><h3 id="第一章-日本历史"><a href="#第一章-日本历史" class="headerlink" title="第一章 日本历史"></a>第一章 日本历史</h3><h4 id="绳文·弥生时代"><a href="#绳文·弥生时代" class="headerlink" title="绳文·弥生时代"></a>绳文·弥生时代</h4><p><b>绳文时代</b>指使用绳文土陶的时代，约公元前15000年至公元前2300年。绳文土陶是土陶表面有绳文的陶器，这种陶器不是在窑里烧制的,而是在平地或凹地上通过低温烧制而成的，温度约为600℃-800℃。<br>在绳文时代早期，约公元前12000年至公元前7000年，绳文人就已经开始过起定居的生活。而最典型的绳文文化的繁荣期则是绳文前期至中期的时段，即约公元前7000年-公元前4500年，其中<b>三内丸山遗址</b>是其代表。<br><b>弥生时代</b>是日本列岛继绳文时代后形成的时代。“弥生”的称呼来源于弥生式土陶，而这种土陶的名称则来自于其发掘地东京都文景区弥生的贝冢。在这个时代，有一部分中国大陆的长江流域、江南地区的人横渡到日本，并将水稻耕作的技术传入当地，促进当地集团发展，最终使得各地集团兼并形成了许多小国家。</p><h4 id="古坟·奈良时代"><a href="#古坟·奈良时代" class="headerlink" title="古坟·奈良时代"></a>古坟·奈良时代</h4><p>从3世纪后半叶至7世纪被称为<b>古坟时代</b>。从3世纪至4世纪，大和地区，即现在的奈良县，的豪族建立了<b>大和政权</b>，并在4世纪后半叶至5世纪的时期中成功建立了日本最早的<b>统一政权</b>。在4世纪初，日本人建造了巨大的前方后圆坟。5世纪时，中国的<b>汉字</b>传入日本，6世纪时，中国的儒教典籍和佛经、佛像传到日本。<br>从6世纪末至7世纪前半叶被称为<b>飞鸟时代</b>。在这个时代中，佛教在飞鸟一带，即在如今的奈良盆地处繁荣兴旺,<b>圣德太子</b>为了平息豪族间争夺统治权的斗争和实现以天皇为中心的<b>中央集权</b>，于603年至607年中，陆续颁布了“冠位十二阶”、制定了“宪法十七条”和建立了<b>法隆寺</b>。<br>710年，朝廷把首都从崇原京迁到平城京，开创了<b>奈良时代</b>，约710年至794年。在奈良时代，朝廷每20年派遗一次<b>遣唐使</b>，积极地引进了中国文化，<b>鉴真</b>因圣武天皇之邀，东渡日本，建立唐招提寺，普及了佛教戒律。</p><h4 id="平安时代"><a href="#平安时代" class="headerlink" title="平安时代"></a>平安时代</h4><p>794年，<b>恒武天皇</b>把首都辽移到平安京，即如今的京都市，开创了<b>平安时代</b>。至10世纪中叶，以源氏和平氏为代表的豪族集团的势力逐渐壮大起来，11世纪中叶，<b>白河天皇</b>为了试图夺回政治实权把皇位让给幼小的皇子来继承，而自己则作为上皇掌握政治实权，这一“<b>上皇执政</b>”的政策一直持续约100年。在12世纪，豪族，皇放，贵族、武士相互争权，最终以<b>平清盛</b>为代表的武士获得胜利，<b>武士第一次开始掌握政治实权</b>。<br>平安初期的朝廷文化受<b>唐文化</b>的强烈冲击，<b>最澄、空海</b>二人把中国的佛教天台宗、密宗传播到日本，使得神佛融合得到进一步的发展。但是在894年，<b>营原道真</b>以唐朝的衰落和航海危险为由，上奏天皇<b>废除了遣唐使</b>。10世纪后，唐风文化转变为<b>和风文化</b>，国风文化由此产生。其代表作有《古今和歌集》《枕草子》《源玉物语》和《土佐日记》等。</p><h4 id="镰仓时代"><a href="#镰仓时代" class="headerlink" title="镰仓时代"></a>镰仓时代</h4><p><b>镰仓时代</b>指日本历史上幕府设置在镰仓的时代，那是<b>武士真正开始执政统治</b>的时代，时期为1185年一1333年。在平安时代末期，人们对平清盛的统治感到深深的不满，因此<b>源赖朝</b>和<b>源义经</b>两兄弟首先起兵推翻平氏统治，并在1192年源赖朝被任命为征夷大将军，在镰仓开设了武士政权幕府。不过碍于当时天皇的势力仍然强盛，幕府将军的职位在源氏家族也仅仅继承了三代。<br>在镰仓时代，<b>宋、元两朝</b>的僧侣与商人横渡到日本，在两种文化的影响下，日本产生了朴素的<b>庶民文化</b>。在文学方面，代表性的作品主要有，随笔(方丈记》(鸭长明)、《徒然草)(吉田兼好)、军记物语《平家物语》和歌集《新古今和歌集》(藤原定家)。</p><h4 id="南北朝·室町·战国时代"><a href="#南北朝·室町·战国时代" class="headerlink" title="南北朝·室町·战国时代"></a>南北朝·室町·战国时代</h4><p>室町时代的时间分布有狭义和广义之分。<b>广义上</b>，室町时代指<b>足利尊氏</b>于1336年开设幕府至第15代将军<b>足利义昭</b>于1573年被<b>织田信长</b>驱逐出京都的237年间。<b>狭义上</b>，最早的约60年是<b>南北朝时代</b>，自南北朝统一(1392年)至应仁之乱的约80年指<b>室町时代</b>，应仁之乱(1467年)后的时代指<b>战国时代</b>。<br>1333年<b>新田义贞</b>歼灭了<b>北条高</b>时，镰仓幕府就此退出了历史舞台。之后家臣<b>足利尊氏</b>对<b>后醍醐天皇</b>的建武新政心怀不满，举兵造反，拥立<b>光明天皇</b>，1338年被任命为征夷大将军，建立了北朝。而逃到吉野(奈良县南部)的后醍醐天皇，因为持有真正的<b>三种神器</b>，声称自己才是正统的天皇，从而建立了南朝。直至<b>足利义满</b>结束了南北朝的内乱，于1392年建立了室町幕府。<br>在室町时代，日本通过明日贸易进口了<b>明钱</b>，商品流通也发达了。以京都的五山为中心，禅僧研究汉文学和朱子学，这被称为<b>五山文学</b>。作为传统文化的<b>花道和茶道</b>、作为歌舞剧的<b>能和狂言</b>也发展了起来。</p><h4 id="安土·桃山·江户时代"><a href="#安土·桃山·江户时代" class="headerlink" title="安土·桃山·江户时代"></a>安土·桃山·江户时代</h4><p><b>安上·桃山时代</b>指<b>织田信长</b>和<b>丰臣秀吉</b>在安土、桃山掌握中央政权的时代，时期为1573年一1603年。1573年，织田信长在放逐了<b>足利义昭</b>之后，修筑了安土城，并统治了诸多地区。但在1582年，“<b>本能寺之变</b>”之中，织田信长被家臣<b>明智光秀</b>所杀。因此侍奉织田信长的丰臣秀吉便随后讨伐了明智光秀，并最终于1590年<b>统一</b>了日本。<br><b>德川家康</b>于1603年被任命为征夷大将军，在江户设立了幕府，期间为1603年-1868年，这266年的政治中心都在江户，故史称<b>江户时代</b>。<br>在江户时代，幕府把人们分为“<b>上农工商</b>”四等，设立了严格的<b>身份制度</b>，只允许商人在长崎与中国、荷兰做贸易，实行了锁国政策。1853年，以佩里率黑船登陆的“<b>黑船事件</b>”为契机，日本不得不与列尝签订了<b>不平等条约</b>，至此<b>锁国体制瓦解</b>。<br>在江户时代，武士的思想意识形态是朱子学，重视上下身份秩序和礼节。在文学方面，井原西鹤，松尾芭蕉，近松门左卫门分别代表了浮世小说、俳句和戏剧作家，他们被称为<b>元禄三大家</b>。</p><h4 id="明治维新至第二次世界大战战败"><a href="#明治维新至第二次世界大战战败" class="headerlink" title="明治维新至第二次世界大战战败"></a>明治维新至第二次世界大战战败</h4><p><b>明治维新</b>指自江户幕府末期至明治初年的政治体制改革，明治政府在1869年命令幕府奉还版籍，并于1871年坚决地实行了<b>废藩置县</b>。<b>板垣退助</b>发起了<b>自由民权运动</b>，1885年诞生了内阁制。1889年日本布《明治宪法》，成立了由贵族院和众议院构成的帝国议会。<b>以近代天皇制为中心，日本从封建国家发展为近代市民国家</b>。<br>明治维新成功后，日本政府走上了<b>对外侵略</b>的道路。以日本袋击珍珠港开始，开始了世界范曲内大规模战争。1945年8月15日<b>昭和天皇</b>向国民发布停战诏书，至此第二次世界大战结束。<br>在文学方面，明治时代的<b>言文一致运动</b>确立了“だ·である”体和“です·ます”体。<b>二叶亭四迷</b>发表了《浮云》，它成为<b>日本近代小说</b>的嚆矢，即开端。此外，日本近代文学的代表作家夏目漱石和森鸥外、白桦派的武者小路实笃等都是活跃于文坛的作家。<b>大正时代</b>有芥川龙之介和菊池宽。<b>昭和时代</b>(第二次世界大战口本战败前)则有横光利一、川端康成。</p><h4 id="战后的日本"><a href="#战后的日本" class="headerlink" title="战后的日本"></a>战后的日本</h4><p>日本战败后,被联合国部队所占领,<b>发展了民主，解散了财阀，实行了农地改革</b>，开始了“<b>6·3·3·4</b>”的学制，制定了<b>承认妇女参政权</b>的选举法等。<br>1947年5月3日,日本实行了《日本国宪法》。<b>天皇作为全体日本国民的象征,在政治上处于中立地位</b>。宪法规定由<b>众议院和参议院构成的国会</b>是国家权力的最高机关。<br>1951年，日本与美国签订了《日美安全保障条约》，日美同盟成为日本的外交轴心。1956年日本<b>加入联合国</b>。1978年签订了《中日和平友好条约》。<br>在经济方面，1968年日本成为<b>世界第二大经济大国</b>，企业工会、终身雇用、论资排辈成为日本企业文化的特征。<b>汽车产业界</b>致力于节约能源，成功地研发耗油量低的小轿车。自20世纪80年代后半叶开始，日本迎来了<b>泡沫经济</b>的好景气，地价和股价暴涨。这种泡沫经济在1991年破灭，大型金融机构破产，社会处于金融恐慌的边缘。2012年12月，<b>安倍晋三</b>就任首相,制定了以<b>振兴经济</b>为目的的“<b>安倍经济学</b>”政策。</p><h3 id="第二章-中日文化交流"><a href="#第二章-中日文化交流" class="headerlink" title="第二章 中日文化交流"></a>第二章 中日文化交流</h3><h4 id="汉字"><a href="#汉字" class="headerlink" title="汉字"></a>汉字</h4><p>汉字是发祥于中国古代的一种<b>表词文字</b>，是现在仍在使用的文字中最古老的文字体系。从古代开始，汉字被传播到中国周边的国家和地区，形成了<b>汉字文化圈</b>，不仅对语言，对当地文化也产生了很大的影响。现在，除汉语和日语以外，其他国家和地区几乎都废除了汉字，但<b>仍有约15亿人</b>在使用汉字。<br>在4世纪左右，汉字从中国传入日本并得到使用，汉倭奴国王印和古坟时代的稻荷台一号坟埋藏的铁剑铭文使用的文字是日本最早使用的汉字。在现代日语中，汉字与平假名、片假名一样是主要的文字，其读音可分从汉语传入的<b>音读</b>和日本固有的<b>训读</b>。借汉字的音记录日语的方法大量使用在8世纪后半期编辑的《万叶集》中，从而被称为<b>万叶假名</b>。<br>现存最古老的书籍《古事记》(712年)是变体汉文， 《日本书纪》(720年)是用汉文书写的。8世纪中叶左右，日本人用汉字“楷书”的偏旁创制了<b>片假名</b>用汉字的“草书”创制了<b>平假名</b>片假名和平假名作为日语的表音文字来使用。2010年内阁告示改定了常用汉字，<b>字数定为2136字</b>。而且，每年举办3届“日本汉字能力检定”考试。日本人继承中国汉字的传统，自创了新的汉字(<b>国字</b>)。例如，“烟”“咔”“風”这样的汉字不是中国汉字，而是日本特有的汉字。此外，书法也是从中国传到日本的，装饰在和室的壁龛里。</p><h4 id="遣隋使"><a href="#遣隋使" class="headerlink" title="遣隋使"></a>遣隋使</h4><p>遣隋使是指<b>推古时代</b>，为了学习中国的技术和制度，日本向隋朝派遣的朝贡使节。自公元600年至618年的18年间，日本派出遣隋使共计6次(另有3次、4次、5次的观点)。这一外交方针在后来的遣唐使中也得到了继承。在这里对第一次派出的遣隋使和第二次派出的遣隋使进行介绍。<br>公元600年，日本<b>首次</b>向隋朝派遣隋使。虽然在《日本书纪》中没有关于这段历史的记载，但在《隋书》    “东夷传倭国”中有关于遣隋使回答高祖隋文帝问题的记载。<b>隋文帝</b>通过官员向遣隋使多利思比孤询问日本的风土人情。一番问答后，隋文帝难以理解日本的<b>政治模式，认为其有悖常理</b>，因此下令日本加以整改。<br>第二次遣隋使的派遣在《日本书纪》中则可寻踪迹。书中记载，公元607年，小野妹子持国书出使中国，他提交的天皇的国书中写着“<b>日出处天子致书日没处天子无恙乎</b>”，因为写着与隋朝对等的礼仪，<b>隋炀帝</b>怒曰：    “蛮夷书有无礼者，勿复以闻。”小野妹子在隋炀帝的家臣裴世清的陪同下回国。</p><h4 id="遣唐使"><a href="#遣唐使" class="headerlink" title="遣唐使"></a>遣唐使</h4><p>遣唐使是指7—9世纪时日本向唐朝派遣的使节。630年日本朝廷任命<b>犬上御田锹</b>为第一任遣唐使，至894年菅原道真上奏朝廷废止遣唐使，合计任命遣唐使<b>约20次</b>，其中实际渡海<b>约16次</b>。<br>遣唐使的使团构成因时期不同，其规模和内容也不同，据《延喜式》记载，遣唐使由大使、副使、主神、卜部、阴阳师、医师、船师、翻译、新罗或奄美语翻译、留学生、学问僧、船匠、水手等人员构成。使节团用于渡海的船只<b>一般为2艘至4艘</b>，每船乘员可能有120人至160人的规模。<br>遣唐使的派遣目的<b>初期</b>是为了引入唐朝的制度和文化成果。进入<b>奈良时代</b>以后，带着政治外交使命而被派遣的遣唐使增加了，在<b>奈良时代末期</b>以后，朝廷派遣遣唐使的目的变为僧侣留学和贸易利益。<b>平安时代</b>只在804年和838年派遣过2次遣唐使，之后完全停止了派遣。其原因是日本失去了遣使目的的实效性和政府的财政困难，唐朝在<b>安史之乱</b>后也逐渐走向衰落，日本失去了遣唐使的外交政策上的意义。</p><h3 id="第三章-历史名人"><a href="#第三章-历史名人" class="headerlink" title="第三章 历史名人"></a>第三章 历史名人</h3><h4 id="圣德太子"><a href="#圣德太子" class="headerlink" title="圣德太子"></a>圣德太子</h4><p>圣德太子(574年—622年)是<b>飞鸟时代</b>的皇族、政治家，用明天皇的第二个皇子。因生于马厩前而被称为<b>厩户皇子</b>。在日本，1930年圣德太子的肖像画首次被印在<b>百元纸币</b>上，此<br>后又出现在<b>千元、五千元的纸币</b>上，1958年至1986年日本一直流通着印有圣德太子肖像的<b>1万日元纸币</b>，因此，太子在日本国内是广为人知的。<br>圣德太子自幼聪明，崇敬佛法，在崇佛派的<b>苏我马子</b>的协助下，歼灭了排佛派的<b>物部守屋</b>。太子信守在与物部氏的战斗中许下的誓言，建立了<b>四天王寺</b>。据说奈良的<b>法隆寺</b>也是圣德太子所建。圣德太子在推古天皇朝作为太子掌管行政，制定了冠位十二阶和十七条宪法，按照才能任用人才，试图建立以天皇为中心的中央集权的国家体制。圣德太子为了学习中国的技术和制度，在600年至618年间曾<b>派遣5次遣隋使</b>。</p><h4 id="空海"><a href="#空海" class="headerlink" title="空海"></a>空海</h4><p>空海(774年—835年)是<b>平安初期真言宗</b>的开山祖师，<b>弘法大师</b>的谥号广为人知。出生于香川县，幼时学汉籍，被称为神童。24岁时著有比较思想论《三教指归》，论述了儒教、道教、佛教的优劣，认为<b>大乘佛教</b>是最优秀的宗教。<br>804年、空海作为<b>第16次遣唐使</b>的留学僧而入唐。806年10月回国，把大量的密教典籍、佛像、法典、曼荼罗带回日本。816年6月奏请<b>嵯峨天皇</b>，为国，也为修行者建立道场开辟高野山，得到敕许后，建立了寺庙。这样，高野山与天台宗的比睿山都成为平安时代初期山岳佛教的根据地。<br>空海在唐期间学习了<b>密教</b>，回国后致力于建立密教组织和整合。他不但是真言宗的开山祖师，还广泛地输入了中唐后期的大陆文化，对平安初期日本文化的各个领域都做出了不可估量的贡献。空海与同时代的嵯峨天皇、橘逸势并称为日本“<b>平安三笔</b>”，享受盛名。</p><h4 id="源赖朝"><a href="#源赖朝" class="headerlink" title="源赖朝"></a>源赖朝</h4><p>源赖朝(1147年一1199年)是<b>平安时代末期至镰仓时代初期</b>的武将、政治家。他作为镰仓幕府的<b>第一代征夷大将军</b>，构建了中世时期新的政治体制。其父源义朝(1123年一1160年)在平治之乱(1159年)中被平清盛(1118年一1181年)所败，次年作为义朝第三个儿子的源赖朝被流放到伊豆半岛，与当地的豪族北条时政的女儿北条政子结婚。<br>源赖朝得到皇子<b>以仁王</b>的命令后，因得到时政等的援助，8月举兵打倒平氏，他以镰仓为根据地，在关东地区营造了势力范围。赖朝一方面经营自己的统治势力，巩固了与武士的主从关系，向各地诸侯国委任守护大名和地头，加强了自己的实力，另一方面致力于与<b>后白河法皇</b>保持接触，开展了对朝廷的宣传工作。1183年平家被源义仲(1154年一1184年)等赶出京都，后白河法皇马上向镰仓派出使者，赖朝军被公认为朝廷的盟军。1185年3月赖朝在<b>坛之浦会战</b>中消灭了平家，1189年在奥州(日本东北部)会战中消灭了藤原氏，平定了全国。1192年被任命为征夷大将军。由此源赖朝开创了一半独立于朝廷的政权，后来被称为镰仓幕府。</p><h4 id="德川家康"><a href="#德川家康" class="headerlink" title="德川家康"></a>德川家康</h4><p>德川家康(1542年一1616年)是<b>日本战国时代至安土桃山时代</b>的武将和战国大名、江户幕府的<b>首位征夷大将军</b>，也是<b>日本战国三英杰之一</b>(其余两位是织田信长和丰臣秀吉)。德川家康的家系是三河国(爱知县东部)的富豪松平氏，后敕许改为德川氏。<br>家康幼年时期在骏河(静冈县)大名今川氏那里当人质。1560年，在桶狭间之战中以今川义元(1519年一1560年)战死为契机，从今川氏那里独立出来，与织田信长结盟，将自己的版图扩展到了三河国和远江国。织田信长在1582年的<b>本能寺之变</b>中去世后，德川家康将甲斐国(山梨县)和信浓国(长野县)纳入自己的势力范围。1590年移居关东，成为俸禄额到250万石的大诸侯，获得了丰臣秀吉政权下最大的领地。在丰臣秀吉晚年，德川家康被列为<b>五大老之首</b>。<br>丰臣秀吉死后，在1600年的关原之战中，以德川家康为大将的东军打败了以毛利辉元(1553年一1625年)为大将的西军，家康<b>掌握了天下的实权</b>，1603年被朝廷任命为征夷大将军，在江户创建了幕府。1615年德川家康消灭了丰臣氏一族，<b>确立了统治全国的局面，结束了长达100多年之久的战乱时代</b>。</p><h4 id="福泽谕吉"><a href="#福泽谕吉" class="headerlink" title="福泽谕吉"></a>福泽谕吉</h4><p>福泽谕吉(1835年一1901年)是<b>幕府末年</b>中津藩的<b>武士</b>，明治时代的启蒙思想家、教育家，庆应义塾大学的<b>创始人</b>，还致力于创办专修大学、一桥大学、<b>传染病研究所</b>，担任了东京学士会院(现日本学士院)的第一任会长。1984年始，其头像被印在<b>1万日元的纸币</b>上，所以，福泽谕吉也被比喻为1万日元纸币。<br>福泽谕吉19岁时，其兄长劝他到长崎游学，在那里学习荷兰语。1858年，福泽受中津藩之命，到江户，借了藩邸内的联排房屋开设书塾，这个书塾后来成为<b>庆应义塾大学</b>。1859年，福泽去当时刚开港的横滨，试着与外国人讲话，才明白荷兰语并不通用，决定开始学习英语。<br>1860年正月，福泽谕吉作为<b>遣美使节团</b>的一员，乘咸临丸号出航美国。当时是为数不多的将外国文化传播到日本的先驱者。改革了以往日本的学校和医院的体制，吸取外国的优点，<b>使当时的老百姓不熟悉的肉食和西方的衣食住扎根于日本</b>。<br>1862年福泽谕吉作为<b>遣欧使节团</b>的翻译到欧洲各国考察交通、医院、银行、邮政、征兵、选举制度等，<b>痛感日本必须普及西学</b>。回国后，福泽出版了《西洋概况》，该书作为介绍欧美各国历史、制度的优秀书籍而畅销，一时洛阳纸贵。<br>1873年，福泽参加明六社，以《明六杂志》等为舞台，<b>开展文明开化的启蒙活动</b>。福泽在《劝学篇》的开头部分劝大家学习，指出：    “<b>上天不造人上之人，亦不造人下之人……人生来无富贵贫贱之分，唯有勤学明事理者成为贵人、富人，不学者成为穷人、下人</b>”。</p>]]></content>
      
      
      <categories>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语文化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《定投十年财务自由》总结</title>
      <link href="/2020/02/29/ding-tou-shi-nian-cai-wu-zi-you-zong-jie/"/>
      <url>/2020/02/29/ding-tou-shi-nian-cai-wu-zi-you-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="参考书本：银行螺丝钉的《定投十年财务自由》"><a href="#参考书本：银行螺丝钉的《定投十年财务自由》" class="headerlink" title="参考书本：银行螺丝钉的《定投十年财务自由》"></a>参考书本：银行螺丝钉的《定投十年财务自由》</h1><p><img src="https://img-blog.csdnimg.cn/20200229220343952.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229220430112.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229220828165.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229220844513.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229220852349.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229220856418.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/2020022922090045.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229220903222.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229220906777.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229220910874.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229220915249.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/202002292209556.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229222228238.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229221121470.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229221126416.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229221129609.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229221825415.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229221159931.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200229221202777.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/2020022922120724.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200229221209983.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融启蒙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理复习总结及思维导图</title>
      <link href="/2020/02/11/bian-yi-yuan-li-fu-xi-zong-jie-ji-si-wei-dao-tu/"/>
      <url>/2020/02/11/bian-yi-yuan-li-fu-xi-zong-jie-ji-si-wei-dao-tu/</url>
      
        <content type="html"><![CDATA[<h3 id="文章声明"><a href="#文章声明" class="headerlink" title="文章声明"></a>文章声明</h3><p>在QQ群中无意中找到一篇《编译原理总结》的Word文件，感觉得很好，因此便将其整理出来并附上自己绘制的思维导图。由于文件里面没有作者信息，因此无法添附转载链接，若原作者看到并介意,还请联系删除。</p><h3 id="第一部分-具体内容"><a href="#第一部分-具体内容" class="headerlink" title="第一部分 具体内容"></a>第一部分 具体内容</h3><h4 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h4><h5 id="1-程序设计语言"><a href="#1-程序设计语言" class="headerlink" title="(1) 程序设计语言"></a>(1) 程序设计语言</h5><ul><li>机器语言: 由0、1代码构成，不需翻译就可直接执行其程序。</li><li>汇编语言: 机器指令助记符（伪代码）形式，汇编后才可执行其程序。</li><li>高级程序设计语言:  类自然语言和数学公式形式</li></ul><h5 id="2-基本术语"><a href="#2-基本术语" class="headerlink" title="(2) 基本术语"></a>(2) 基本术语</h5><ul><li><p>源程序(Source Program)：用源语言写的程序。源语言可以是汇编语言，也可以是高级程序设计语言。 </p></li><li><p>目标程序(Target Program)：也称为“结果程序”，是源程序经翻译程序加工以后所生成的程序。目标程序可以用机器语言表示，也可以用汇编语言或其它中间语言表示。</p></li><li><p>翻译程序(Translating Program)：是指把一个源程序翻译成逻辑上等价的目标程序的程序。源程序为其输入，目标程序为其输出。</p></li><li><p>汇编程序(Assembler)：是指把一个汇编语言写的源程序转换成等价的机器语言表示的目标程序的翻译程序。</p></li><li><p>编译程序(Compiler)：若源程序是用高级程序设计语言所写，经翻译程序加工生成目标程序，则该翻译程序就称为“编译程序”，也可称为编译器。</p></li><li><p>解释程序：是高级语言翻译程序的一种，他将源语言书写的源程序作为输入，解释一句后就提交计算机执行一句，并不形成目标程序，就像外语翻译中的“口译”一样，不产生全文的翻译文本。</p></li><li><p>运行系统(Running System)：目标程序执行时，需要有一些子程序（如一些连接装配程序及一些连接库等）配合进行工作，由这些子程序组成的一个子程序库称为运行系统。</p></li><li><p>编译系统(Compiling System)：编译程序和运行系统合称编译系统。</p><h5 id="3-程序的翻译"><a href="#3-程序的翻译" class="headerlink" title="(3) 程序的翻译"></a>(3) 程序的翻译</h5></li><li><p>除机器语言程序外，用其它语言书写的程序都必须经过翻译才能被计算机识别。这一过程由翻译程序来完成。</p></li><li><p>编译方式是一种分阶段进行的方式，包括翻译和运行两部分。 </p></li><li><p>前一阶段：翻译 </p></li><li><p>后一阶段：运行，由运行系统配合完成。</p><center><img src="https://img-blog.csdnimg.cn/20200211222725799.png" alt=" 图片不见了。。。 "></center></li></ul><h5 id="4-过程"><a href="#4-过程" class="headerlink" title="(4) 过程"></a>(4) 过程</h5><p>1、<b>词法分析阶段</b><br>    这个阶段的任务是从左到右一个字符一个字符地读入源程序，对构成源程序的字符流进行扫描和分解，从而识别出一个个单词（也称单词符号或符号TOKEN）。<br>某源程序片断如下：<br>begin var sum, first, count: real; sum:=first+count<em>10 end.<br>保留字    begin  var  real  end<br>标识符    sum      first   count   sum      first   count<br>界符  .<br>逗号，   逗号,   冒号：   分号；   加号+   乘号</em>   赋值号    ：=   整数10    10<br>2、<b>语法分析阶段</b><br>    是编译过程的第二个阶段。语法分析的任务是在词法分析的基础上将单词序列分解成各类语法短语，如“程序”，“语句”，“表达式”等等。一般这种语法短语，也称语法单位，或语法成分，或语法范畴。<br>    语法分析所依据的是语言的语法规则，即描述程序结构的规则。通过语法分析确定整个输入串是否构成一个语法上正确的程序。<br>3、<b>语义分析阶段</b><br>    依据语言的语义规则，对语法分析得到的语法结构分析其含义以及应进行的运算，审查源程序中有无语义错误，为代码生成阶段收集类型信息。<br>4、<b>中间代码生成</b><br>    在进行了上述的语法分析和语义分析阶段的工作之后，有的编译程序将源程序转变成一种内部表示形式，这种内部表示形式叫做中间代码。<br>所谓“中间代码”是一种结构简单，含义明确的记号系统，这种记号系统可以设计为多种多样的形式。<br>重要的设计原则：一是容易生成；二是容易将它翻译成目标代码。<br>5、<b>代码优化</b><br>    任务：对前阶段产生的中间代码系列进行变换或改造。目的是使生成的目标代码更高效，即省时间省空间。例如上例四个四元式可优化为下面两个四元式。<br>6、<b>目标代码生成</b><br>    任务：将中间代码变换成特定机器上的绝对指令代码或可重定位的指令代码或汇编指令代码。它的工作与硬件系统结构和指令含义有关。<br>7、<b>表格管理</b><br>编译过程中源程序的各种信息被保留在种种不同的表格里，编译各阶段的工作都涉及到构造、查找或更新有关的表格，因此需要有表格管理的工作；<br>8、<b>出错处理</b><br>如果编译过程中发现源程序有错误，编译程度应报告错误的性质和错误发生的地点，并且将错误所造成的影响限制在尽可能小的范围内，使得源程序的其余部分能继续被编译下去，有些编译程序还能自动校正错误，这些工作称之为出错处理。</p><h5 id="5-前端与后端"><a href="#5-前端与后端" class="headerlink" title="(5) 前端与后端"></a>(5) 前端与后端</h5><p>参考上面的图，目的是为了在多种源语言和多种目标语言的开发过程中，可以灵活搭配组合，消除重复开发的工作量，提高编译系统的开发效率。</p><h5 id="6-遍"><a href="#6-遍" class="headerlink" title="(6) 遍"></a>(6) 遍</h5><p>所谓遍，是对源程序或源程序的中间形式从头到尾扫视并完成规定任务的过程。<br>    每一遍扫视可完成一个阶段或多个阶段的功能。<br>一遍的编译程序：以语法分析程序为核心 。<br><b>多遍扫描的优点<b>：</b></b></p><ul><li>可以减少内存容量的需求，分遍后，以遍为单位分别调用编译的各个程序，各遍程序可以相互覆盖。</li><li>可使各遍的编译程序相互独立，结构清晰。</li><li>能够进行充分优化，产生高质量的目标程序。 </li><li>可将编译程序分为前端和后端，有利于编译程序的移植。</li></ul><p><b>多遍扫描的缺点</b><br>每遍都要读符号、送符号，增加了许多重复性的工作，降低编译效率。</p><h5 id="7-程序设计语言范型（从支持的计算模式）"><a href="#7-程序设计语言范型（从支持的计算模式）" class="headerlink" title="(7) 程序设计语言范型（从支持的计算模式）"></a>(7) 程序设计语言范型（从支持的计算模式）</h5><ul><li>强制(命令)式语言:是面向动作的，即一个计算过程看做是一系列动作，其动作是命令驱动，以语言形式表示。也称过程式语言，如C,FORTRAN等;</li><li>函数式语言：注重程序表示的功能 也称应用式语言，如ML和LISP等；</li><li>基于规则的语言：检查一定的使能条件，满足时执行动作 也称逻辑程序设计语言，如PROLOG.</li><li>面向对象语言：提供抽象数据类型，支持封装性、继承性和多态性。 如C++和Java等。</li></ul><h4 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h4><h5 id="1-符号和符号串"><a href="#1-符号和符号串" class="headerlink" title="(1) 符号和符号串"></a>(1) 符号和符号串</h5><p>1、<b>字母表</b>：元素的有穷非空集合。<br>2、<b>符号串</b>：由字母表中的符号组成的任何有穷序列。<br>3、<b>符号串的头尾，固有头和固有尾</b>：如果z=xy是一符号串，那么x是z的头，y是z的尾，如果x是非空的，那么y是固有尾；同样如果y非空，那么x是固有头。<br>如:设z=abc，那么z的头是$\varepsilon$，a, ab, abc, 除abc外，其它都是固有头；z的尾是$\varepsilon$, c, bc, abc, z的固有尾是$\varepsilon$, c, bc。<br>4、<b>符号串的运算</b><br>（1）符号串的连接：设x和y是符号串，x和y的连接xy是把y的符号写在x的符号后得的符号串。<br>如：x=ST, y=abu, 则xy=STabu   显然有$\varepsilon$x=x$\varepsilon$=x。<br>（2）符号串的方幂：设x是符号串，把x自身连接n次得x的几次方幂xn。<br>     如：设x=ab则$x^0$=$\varepsilon$   $x^1$=ab  $x^1$=abab   $x^3$=ababab<br>（3）符号串集合的乘积：设A和B为符号串集合，则A和B的乘积定义为AB={xy|x$\in$A且y$\in$B}<br>     如：a={a, b}, B={00, 11} 则AB={a00, a11, b00, b11} 显然：{$\varepsilon$}A=A{$\varepsilon$}=A<br>（4）符号串集合的方幂：设A为符号串集，则A的n次方幂An定义为:An=AA……A=AAn-1=An-1A<br>（5）符号串集合的正闭包A+：A+=A1 U A2 U … U An  U …<br>（6）符号串集合的闭包A<em>：A</em>=A0 U A+ = {$\varepsilon$} U A+<br>如：设有正字母表$\sum$={0，1} 则$\sum$*=$\sum0$ U$\sum1$  U $\sum2$ U … U $\sum n$ U …={$\varepsilon$, 0, 1, 00,   01, 10, 11, 000, 001,……}</p><h5 id="2-文法"><a href="#2-文法" class="headerlink" title="(2)文法"></a>(2)文法</h5><p>1、文法G定义为<b>四元组</b>（$V_N$ ，$V_T$，P，S）其中:<br>（1）VN 为非终结符号集<br>非终结符号表示一个语言短语（或语法成分、语法单位）。     如  程序、语句、表达式等。一般用大写字母或用〈  〉括起表示非终结符号。<br>（2）VT 为终结符号集<br>终结符号：组成语言的基本符号。是文法中不属于非终结符号集合的符号。一般用小写字母或不带〈  〉的符号表示。如程序设计语言的单词符号。<br>设V=VN U VT，称V为文法G的字母表。<br>（3）P 为产生式（也称规则）的集合<br>产生式的形式：$\alpha$→$\beta$或$\alpha$∷=$\beta$，其中$\alpha$∈V+，$\beta$∈V<em><br>（4）S 称作识别符号或开始符号，是一个非终结符号<br>一般表示此文法定义的最大语法短语，至少要在一条产生式中作为左部出现。<br>2、<b>句型、句子的定义</b><br>设G[S]是一文法，如果符号串x是从识别符号推导出来的，即有S</em>x， 则称x是文法G[S]的句型。<br>若x仅由终结符号组成，即S$\Rightarrow$*x, x$\in$VT ，则称x为G[S]的句子。<br><b>句型</b>：在一棵树生长过程的任何时刻，所有那些端末结点自左至右的排列，就是一个句型。<br><b>语言</b>的定义：文法G产生的语言记为L（G），它是文法G产生的全部句子的集合。<br><b>文法等价</b>定义：若L（G1）=L（G2）则称文法G1和G2是等价的。</p><h5 id="3-文法的类型"><a href="#3-文法的类型" class="headerlink" title="(3)文法的类型"></a>(3)文法的类型</h5><p>0型文法（短语文法）：定义0型语言，对应Turing机（图灵机）；<br>1型文法（上下文有关文法）：定义1型语言，对应线性限界自动机；箭头后面的要比前面的长或相等<br>2型文法（上下文无关文法）：定义2型语言，对应非确定下推自动机；箭头前面的是非终结符，后面是串<br>3型文法（正规文法）：定义3型语言，对应有限自动机。非终结符可以推出一个终结符或一个终结符和一个非终结符</p> <center><img src="https://img-blog.csdnimg.cn/20200211223030839.png" alt=" 图片不见了。。。 "></center><p>最右推导也称为<b>规范推导</b>，所得句型称为<b>规范句型</b>。<br>如果一个文法存在某个句型对应两棵不同的语法树，则说这个文法是二义的。或者说，若一个文法中存在某个句型，它有两个不同的最左（最右）推导，则这个文法是二义的。<br><b>上下文无关文法是否具有二义性是不可判定的</b>。<br>但有些特殊的2型文法[例如LL（1）、LR（0）、LR（1）等文法]是无二义性的。<br>一个文法兼有左递归和右递归是导致二义性的常见原因。<br><b>排除文法二义性通常有两种方法</b>:<br>（1）在语义上加些限制<br>（2）重新构造一个无二义性的文法  </p><h5 id="4-句型的分析"><a href="#4-句型的分析" class="headerlink" title="(4) 句型的分析"></a>(4) 句型的分析</h5><p>句型的分析：就是识别一个符号串是否为某文法的句型。是某个推导的构造过程。<br>分析方法分两大类：<b>自上而下分析法</b><b>和自下而上分析法</b>   推导与归约，最右推导是规范推导，逆过程为<b>规范规约</b><br>    若$S\Rightarrow <em>\alpha A \delta \Rightarrow + \alpha\beta\delta$（由$A\Rightarrow +\beta$得）则称$\beta$是句型$\alpha\beta\delta$相对于非终结符A的<b>短语</b>。【间接推导】<br>    若$S\Rightarrow </em>\alpha A \delta \Rightarrow  \alpha\beta\delta$ (由$A\Rightarrow \beta$得)则称$\beta$是句型$\alpha\beta\delta$相对于A→$\beta$的<b>直接短语</b>（也称简单短语）。【直接推导】<br> 一个句型的最左直接短语称为该句型的<b>句柄</b>。<br>一棵子树（至少要有父子两代）的所有端末结点自左至右排列起来形成相对于子树根的短语。若子树只有父子两代，则得到直接短语。 </p><h5 id="5-有关文法"><a href="#5-有关文法" class="headerlink" title="(5) 有关文法"></a>(5) 有关文法</h5><p>（1）<b>有害规则</b>  文法中含形如U→U的产生式。<br>它对描述语言没有必要，且会引起文法的二义性。<br>（2）<b>多余规则</b>  文法中任何一个句子的推导都用不到的规则。<br>（3）<b>无用规则</b>  文法中含形如U→V的产生式，即单产生式。<br><b>为保证文法G的任一非终结符A在句子推导中出现，必须满足如下两个条件</b>：<br>（1）A必须在某句型中出现，$\alpha A\delta$。<br>（2）必须能够从A推导出终结符号串t。<br><b>有关文法的化简和改造，包括以下几项工作</b>：<br>（１）无用符号和无用产生式的删除。<br>（２） $\varepsilon$－产生式的消除。<br>（３）单产生式的消除。<br>（４）左递归的消除。</p><h4 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h4><h5 id="1-词法分析输出"><a href="#1-词法分析输出" class="headerlink" title="(1)词法分析输出"></a>(1)词法分析输出</h5><p><b>单词符号</b>（TOKEN)  是一个程序设计语言的基本语法符号。程序设计语言的单词符号一般可分成下列5种：<br>1．基本字，也称关键字，如PASCAL语言中的begin，end，if，while和var等。<br>2．标识符，用来表示各种名字，如常量名、变量名和过程名等。<br>3．常数，各种类型的常数，如25，3.1415，TRUE和”ABC”等。<br>4．运算符，如+，*，&lt;= 等。<br>5．界符，如逗点，分号，括号等。<br>词法分析程序所输出的单词符号常常采用下二元式表示：（单词种别，单词自身的值）<br>可用整数码或助记符等表示。</p><h5 id="2-单词的描述工具"><a href="#2-单词的描述工具" class="headerlink" title="(2)单词的描述工具"></a>(2)单词的描述工具</h5><p>程序设计语言中的单词(TOKEN)是基本语法符号。单词符号的语法可以用有效的工具加以描述。<br><b>正规式和它所表示的正规集的递归定义</b>如下。设字母表为∑，辅助字母表∑ ={ |, ·, *, (, ) }<br>定义（正规式和它所表示的正规集）：<br>设字母表为Σ，辅助字母表Σ`={Φ，ε，|，·，*，(， }。<br>② ε和Φ都是Σ上的正规式，它们所表示的正规集分别为{ε}和{ }；<br>② 任何a∈Σ，a是Σ上的一个正规式，它所表示的正规集为{a}；<br>③ 假定e1和e2都是Σ上的正规式，它们所表示的正规集分别为L(e1)和L(e2)，那么，(e1), e1|e2, e1·e2, e1*也都是正规式,它们所表示的正规集分别为L(e1), L(e1)∪L(e2), L(e1)L(e2)和(L(e1))*。<br>④ 仅由有限次使用上述三步骤而定义的表达式才是Σ上的正规式，仅由这些正规式所表示的字集才是Σ上的正规集。</p><h5 id="3-有穷自动机"><a href="#3-有穷自动机" class="headerlink" title="(3)有穷自动机"></a>(3)有穷自动机</h5><p>有穷自动机（也称有限自动机）作为一种识别装置，它能准确地识别正规集，即识别正规文法所定义的语言和正规式所表示的集合，引入有穷自动机这个理论，正是为词法分析程序的自动构造寻找特殊的方法和工具。<br><b>确定的有穷自动机（DFA）</b><br>定义：一确定的有穷自动机（DFA）M是一个五元组： M=（K，∑ ，f, S, Z）其中<br>1．K是一个有穷集，它的每个元素称为一个状态；<br>2．∑ 是一个有穷字母表，它的每个元素称为一个输入字符，所以也称为输入符号字母表；<br>3．f是转换函数，是在K×∑ →K上的映像，即，如f(ki,a)= kj, 就意味着，当前状态为ki，输入字符为a时，将转换到下一状态kj，我们把kj称为ki的一个后继状态；<br>4．S 是唯一的一个初态；<br>5．Z是一个终态集，终态也称可接受状态或结束状态。<br><b>DFA的作用</b>：<br>对于∑<em>中的任何字符串t，若存在一条从初态到某一终态结的道路，且这条路上所有弧的标记符连接成的字符串等于t，则称t可为DFA M所接受，若M的初态结同时又是终态结，则空字可为M所识别。<br>DFA M所能接受的字符串的全体记为L（M）。<br><b>不确定的有穷自动机（NFA）</b><br>定义：一个不确定的有穷自动机（NFA）M是一个五元组，M=（K，∑，f,  S,  Z）。<br>3.f是一个从K×∑\</em>到K的幂集的映象<br>4.S属于K，是一个非空初态集<br>5.Z属于K，是一个终态集<br><b>区别</b>：<br>DFA：只有唯一初态。NFA：有初态集。<br>DFA是NFA的特例。<br>对于每个NFA  M，存在一个DFA  M’ ，使得L（M）=L（M’ ）<br>对于任何两个有穷自动机M和M’ ，如果L（M）=L（M ’ ），则称M与M’ 是等价的。</p><h4 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h4><h5 id="1-自顶向下语法分析"><a href="#1-自顶向下语法分析" class="headerlink" title="(1)自顶向下语法分析"></a>(1)自顶向下语法分析</h5><p>语法分析的作用是识别由词法分析给出的单词符号序列是否是给定文法的正确句子。<br>其中自顶向下分析，就是从文法的开始符号出发企图推导出与输入的单词串完全匹配的句子，若输入串是给定文法的句子，则必能推出，反之必然出错。<br><b>FIRST（$\alpha$）</b>={a| $\alpha \Rightarrow a \beta, a \in V_T, \alpha,\beta \in  V^*$}<br>（1）求FIRST（x）， x$\in$V<br>         （a）若x$\in$VT，则FIRST（x）={x}<br>         （b）若x是$\varepsilon$，则FIRST（x）={$\varepsilon$}<br>         （c）若x$\in$VN，且x→y1y2…ym|…|z1z2…zn<br>则FIRST（x）= FIRST(y1y2…ym) ∪…∪FIRST(z1z2…zn)<br>（2）求FIRST(y1y2…ym),     其中  y1, y2, …, ymV。<br>         （a）若y1$\in$VT, 则FIRST（y1y2…ym）={y1}<br>         （b）若y1$\in$VN,   $\varepsilon \notin$ FIRST(y1)，则FIRST（y1y2…ym）=FIRST(y1)<br>              若  $\varepsilon \in$FIRST(y1)，则 FIRST(y1y2…ym)=(FIRST(y1)\\{$\varepsilon$})∪FIRST(y2y3…ym)<br>  按上法求FIRST（y2y3…ym），类推下去。</p><p>对文法中每一$A \in V_N$，计算<b>FOLLOW（A）</b><br>（a）设S为文法的开始符号，则#$\in$FOLLOW（S）<br>（b）若有A→$\alpha B\beta$，则将FIRST（$\beta$）－{$\varepsilon$}加入到FOLLOW（B）中，如果其中$\beta \Rightarrow \varepsilon$ ，则将FOLLOW（A）加入到FOLLOW（B）中。<br><b>计算SELECT集</b><br>定义：SELECT ( A→$\alpha$ ) =FIRST ( $\alpha$  ),其中$\alpha \Rightarrow \varepsilon$  。<br>若$\alpha \Rightarrow \varepsilon$  ，则SELECT ( A→$\alpha$  ) = (FIRST（$\alpha$ ） － {$\varepsilon$}) ∪FOLLOW(A)<br><b>判定LL（1）文法</b><br>对每个非终结符A的两个不同产生式，A→$\alpha$，A→$\beta$，满足SELECTC（A→$\alpha$）∩SELECT（A→$\beta$  ）= $\phi$其中$\alpha$、$\beta$不能同时$\Rightarrow \varepsilon$  </p><h5 id="2-非LL（1）文法到LL（1）文法的等价变换"><a href="#2-非LL（1）文法到LL（1）文法的等价变换" class="headerlink" title="(2) 非LL（1）文法到LL（1）文法的等价变换"></a>(2) 非LL（1）文法到LL（1）文法的等价变换</h5><p>由LL（1）文法的定义可知,若文法中含有直接或间接左递归，或含有左公共因子,则该文法肯定不是LL（1）文法。<br>参考：<a href="http://jpkc.gdut.edu.cn/comp/cmpl4/4-3.htm" target="_blank" rel="noopener">http://jpkc.gdut.edu.cn/comp/cmpl4/4-3.htm</a><br>文法含左递归不便于使推导按从左往右的顺序匹配，甚至使分析发生死循环。<br>（a）<b>消除直接左递归</b><br>一般情况下，直接左递归的形式为：<br>    A→A $\alpha1$ |A $\alpha2$ |…|A $\alpha m$ |$\beta1$ |$\beta2$ |…|$\beta n$<br>消除左递归后改写为：<br>    A→$\beta1$  A’|$\beta2$ A’|…| $\beta n$ A’<br>    A’→ $\alpha1$ A’| $\alpha2$A’ | … | $\alpha m$A’ | $\varepsilon$<br>（b）<b>消除间接左递归</b><br>先通过产生式的替换，将间接左递归变为直接左递归，然后再消除直接左递归。</p><h5 id="3-确定的自顶向下分析方法"><a href="#3-确定的自顶向下分析方法" class="headerlink" title="(3) 确定的自顶向下分析方法"></a>(3) 确定的自顶向下分析方法</h5><p>1、<b>基本思想</b><br>    对每一非终结符构造一个过程，每个过程的功能是识别由该非终结符推出的串。<br>2、<b>编写程序</b><br>    IP：是输入串指示器，开始工作前IP指向串的第一个符号，每个程序工作完后，IP指向下一个未处理符号。<br>    sym：表示IP所指符号。<br>    ADVANCE：是过程，让IP指向下一个符号。<br>    ERROR：是出错处理子程序。</p><h5 id="4-预测分析方法"><a href="#4-预测分析方法" class="headerlink" title="(4) 预测分析方法"></a>(4) 预测分析方法</h5><p>（1）<b>预测分析表M</b>  如下矩阵形式：矩阵M<br>•行标题用文法的非终结符表示。<br>•列标题用文法的终结符号和#表示。<br>•矩阵元素M[A, a]的内容是产生式A→$\alpha$（或→$\alpha$）表明当对A进行推导，面临输入符号a时，应采用候选$\alpha$进行推导。<br>   出错处理标志（即表中空白项）表明A不该面临输入符号a。<br>（2）<b>符号栈</b><br>    用于存放文法符号，栈顶为推导过程中句型尚未匹配部分的开头符号。<br>    分析开始时，栈底先放一个#，然后放进文法开始符号，即S#<br>（3）<b>预测分析总控程序</b><br>    总是按栈顶符号x和当前输入符号行事。<br>    对于任何（x,a），总控程序每次都执行下述三种可能动作之一：<br>    （a）若x=a=‘#’，则宣布分析成功。<br>    （b）若x=a$\neq$‘#’，则把x从栈顶逐出，指针指向下一输入符号。<br>    （c）若x是一个非终结符，则查看分析表M。<br>        ①如果M[A, a]中存放关于X的一个产生式，那么，首先把X顶出栈，然后把产生式右部符号串按反序一一推进栈。<br>        ②如果M[A, a]中存放“出错标志”，则调用出错处理程序ERROR。</p><h4 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h4><h5 id="1-自底向上优先分析法"><a href="#1-自底向上优先分析法" class="headerlink" title="(1)自底向上优先分析法"></a>(1)自底向上优先分析法</h5><p> 自底向上分析方法，也称移进—归约分析法，粗略地说它的实现思想是对输入符号串自左向右进行扫描，并将输入符逐个移入一个后进先出栈中，边移入边分析，一旦栈顶符号串形成某个句型的句柄时，（该句柄对应某产生式的右部），就用该产生式的左部非终结符代替相应右部的文法符号串，这称为一步归约。重复这一过程直到归约到栈中只剩文法的开始符号时则为分析成功，也就确认输入串是文法的句子。可以看出，移进一归约过程是自顶向下最右推导的逆过程。最右推导称为规范推导。自左向右的归约过程称为规范归约。<br>    如何知道何时在栈顶符号串中已形成某句型的句柄，这是自底向上分析的关键。在自底向上分析方法中，本章主要介绍常用的算符优先分析法和LR类分析法。</p><h5 id="2-算符优先分析法"><a href="#2-算符优先分析法" class="headerlink" title="(2) 算符优先分析法"></a>(2) 算符优先分析法</h5><p><b>算符文法</b>的定义：设有一文法G，如果G中没有形如A→…BC…的产生式，其中B和C为非终结符，则称G为算符文法（Operater Grammar）也称OG文法。（文法中没有两个非终结符相临的情况，则称是算符文法）<br>性质1  在算符文法中任何句型都不包含两个相邻的非终结符。<br>性质2  如果Ab或b。A出现在算符文法的句型中；其中A$\in$VN，b$\in$VT，则中任何含b的短语必含有A。<br><b>算符优先文法</b>的定义：设有一不含产生式的算符文法G，如果对任意两个终结符对a, b之间至多只有&lt;、&gt;和=三种关系的一种成立，则称G是一个算符优先文法。（Operator Precedence Grammar）即OPG文法。</p><h5 id="3-算符优先关系表的构造"><a href="#3-算符优先关系表的构造" class="headerlink" title="(3) 算符优先关系表的构造"></a>(3) 算符优先关系表的构造</h5><p><b>FIRSTVT（B）</b>={b|B$\Rightarrow$b…或B$\Rightarrow$Cb…}<br>构造规则：<br>    （1）若B→b…或B→Qb…，则b$\in$FIRSTVT(B)<br>    （2）若B→Q…，则FIRSTVT(Q)$\subseteq$FIRSTVT（B）<br><b>LASTVT（B）</b>={a|B$\Rightarrow$…a或B$\Rightarrow$…aC}<br>构造规则<br>    （1）若B→…a或B→…aQ，则a$\in$LASTVT(B)<br>    （2）若B→…Q，则LASTVT(Q)$\subseteq$LASTVT（B）<br><b>最左素短语</b>：设有文法G[S]，其句型的素短语是一个短语，它至少包含一个终结符，并且除自身外不包含其它素短语，最左边的素短语称最左素短语。</p><h5 id="4-归约步骤"><a href="#4-归约步骤" class="headerlink" title="(4) 归约步骤"></a>(4) 归约步骤</h5><p>初始时栈底存#，输入指针指向输入串的首字符。<br>控制程序根据栈顶终结符a（若栈顶是非终结符，则次栈顶的终结符称为栈顶终结符）和输入指针所指的输入符b，查优先关系表M，可能有四种情况：<br>（1）M[a, b]为&lt;或=时移进b，即将b进栈，输入指针指向下一输入符。<br>（2）M[a, b]为&gt;时，则将栈顶含a的素短语按对应的产生式归约，素短语与产生式右部需终结符对应相同，非终结符位置应相同名称可不同。顶出栈中素短语，非终结符入栈。<br>（3）M[a, b]为空白，语法错，调用相应出错处理程序。<br>（4）a=b=# 时分析结束。</p><h5 id="5-优先函数"><a href="#5-优先函数" class="headerlink" title="(5) 优先函数"></a>(5) 优先函数</h5><p>用<b>关系法</b>构造。  构造步骤：<br>（a）对每一终结符a（包括#），用fa，ga为结点名。<br>（b）若ai&gt;aj或ai=aj，则从fai到gaj画一条箭弧。若ai&lt;aj或ai=aj，则从gaj到fai画一条箭弧。<br>（c）给每个结点赋一个数，此数等于从该结点出发所能到达的结点（包括该结点自身在内）的个数。赋给结点f (ai)的数，就是函数f(ai)的值，赋给g (aj)的数，就是函数g(aj)的值。<br>（d）对构造出的优先函数，按优先关系矩阵检查一遍是否满足优先关系的条件，若不满足时，则在关系图中有回路说明不存在优先函数。<br><b>优先函数的优缺点</b><br>优点：<br>（1）节省存储空间；<br>            （2）执行整数比较运算比查优先关系表方便。<br>缺点：<br>（1）有些优先关系表不存在优先函数。<br>（2）原先不存在优先关系的两个终结符变成可比较其函数值大小了，需加以克服。</p><h4 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h4><h5 id="1-LR分析法"><a href="#1-LR分析法" class="headerlink" title="(1) LR分析法"></a>(1) LR分析法</h5><p>LR分析法是一类对上下文无关文法进行“自左向右的扫描和最左归约（即最右推导的逆过程）”分析的方法，是一种规范归约过程。LR(k)分析方法是1965年Knuth提出的，其中k表示向右查看输入符号串的个数。<br> <center><br><img src="https://img-blog.csdnimg.cn/20200211223137674.png"></center></p><p>（1）<b>总控程序</b>  所有LR分析器的总控程序都是相同的，共有四种动作：移进、归约、接受、出错。<br>（2）<b>分析表 </b>    常见的有四种:<br>LR（0）分析表  适应文法范围小，是其它类型分析表构造的基础。<br>SLR（1）分析表  是LR（0）分析表的改进，适应文法范围强于LR（0）。<br>LR（1）分析表  分析能力强（指适应范围，查错速度），但状态太多。<br>LALR（1）分析表  是LR（1）分析表的改进，分析能力强于SLR而稍弱于LR（1），但状态少于LR（1）<br>（3）<b>分析栈</b>  包括文法符号栈和相应的状态栈。</p><h5 id="2-LR-0-分析"><a href="#2-LR-0-分析" class="headerlink" title="(2) LR(0)分析"></a>(2) LR(0)分析</h5><p><b>可归前缀</b><br>规范句型中，包括句柄及句柄以左的部分，称为可归前缀。<br>有些可归前缀的前缀是相同的，不仅仅属于某一个规范句型。我们把可归前缀的前缀称为<b>活前缀</b>。<br>    进行语法分析时，只要将待分析符号串的当前部分符号与$\alpha$i[Pi]进行比较，便可知是否归约，以及应按哪条产生式归约。<br>    为了得到所有可归前缀，可以对文法G构造一个有穷自动机，该有穷自动机能识别文法G的所有可归前缀。<br><b>构造识别可归前缀的有穷自动机</b><br>项目：文法的识别可归前缀的有穷自动机以文法的“项目”作为它的状态，所谓文法的项目，是在文法的每一条规则的右部添加一个圆点而形成。之所以这样构造项目，是受可归前缀的启发。圆点表示在识别可归前缀的过程中，对句柄（即某产生的右部）已识别过的部分。<br><b>项目分四类</b><br>    （a）圆点在最右端的项目，形如A→$\alpha$·，表示已从输入串看到能由一条产生式右部推导出的符号串，即已达一可归前缀末端，已识别出句柄可以归约，这种项目称为<b>归约项目</b>，相应状态称为<b>归约状态</b>。即为可归前缀识别态<br>    （b）对形如S’→S·的项目，其中S是文法开始符号，称为<b>接受项目</b>，相应状态称为<b>接受状态</b>，表明可由S推导的输入串已全部识别完，整个分析过程成功结束。<br>    （c）对于形如A→$\alpha$·a$\beta$的项目，表明尚未识别一可归前缀，需将a移进符号栈，故称<b>移进项目</b>，相应状态为<b>移进状态</b>。<br>    （d）对于形如A→$\alpha$·B$\beta$的项目，表明期待分析由B所推出的串归约到B，从而识别B。故称为<b>待约项目</b>，相应状态为<b>待约状态</b>。<br>方法一：首先构造识别可归前缀的NFA，然后将NFA确定化，得DFA（部分）。<br>方法二：根据文法直接构造识别文法可归前缀的DFA。<br>①拓广文法<br>对文法G加一条产生式 S’→S 得 G’，目的是使开始状态唯一，接受状态易于识别。<br>②定义项目集I的<b>闭包CLOSURE(I)</b><br>a) I的项目均属于CLOSURE( I );<br>b) 若A→$\alpha$•B$\beta$属于CLOSURE（I）,则每一形如B→• γ的项目也属于CLOSURE（I）;<br>c) 重复b），直到CLOSURE（I）不再增大为止。<br>③定义<b>状态转换函数GO（I，X）</b><br>其中I是项目集，X是文法符号。GO（I，X）=CLOSURE( J )，其中J={任何形如A→$\alpha$x•$\beta$的项目|A→$\alpha$•x$\beta$∈I}，以上可以避免出现 $\varepsilon$ 弧，避免从同状态射出相同标记弧。<br>④构造DFA<br>a) DFA的初态集：CLOSURE({S’→•S})<br>b) 对初态集或其它所构造的项目集应用转换函数，GO (I, X) =CLOSURE（J）求出新的项目集。<br>c) 重复b)直到不出现新的项目集为止。DFA中所有状态组成的集合也称为该文法的LR（0）项目集规范族。<br><b>构造算法</b><br>a) 若项目A→$\alpha$·a$\beta$属于Ik且转换函数GO（$I_k$, a）=$I_j$，当a为终结符时则ACTION[k, a]为Sj，其动作含意为将终结符a移进符号栈，状态j进入状态栈，（即当状态k遇a时转向状态j）。<br>b) 若项目A→$\alpha$·属于$I_k$，则对a为任何终结符或‘#’号，置ACTION[k,a]为“$r_j$”，j为在文法G中某产生式A→$\alpha$的序号。rj 动作的含义是把当前文法符号栈顶的符号串归约为A，且将栈指针从栈顶向下移动|$\alpha$|的长度（或符号栈中弹出|$\alpha$|个符号），非终结符A变为当前面临的符号。<br>c) 若GO（Ik, A）= Ij，则置GOTO[k, A]为 “j”，其中A为非终结符，表示当前状态为“k”时，遇文法符号A时状态应转向j，因此A 移入文法符号栈，j 移入状态栈。<br>d) 若项目S→S·属于Ik，则置ACTION[k, #]为“acc”，表示接受。<br>e) 凡不能用上述方法填入的分析表的元素，均应填上“报错标志”。为了表的清晰我们令在表中用空白表示错误标志。<br><b>LR（0）分析器的工作过程</b><br>（1）若ACTION [q i , a k ] = S j  ，则将状态 S j , a k 进栈，三元式变化过程:<br>（2）若ACTION [ q i, a k ] = r j  ，且第 j 条产生式为 A →$\beta$  ，|$\beta$| = r ，则按   第 j 条产生式归约。<br>（3）若ACTION[qi, ak]=acc 则结束分析，输入串被接受。<br>（4）若ACTION[qi, ak]=ERROR 或表中为空白，表示出错，进行相应出错处理。</p><h5 id="3-非LR（0）文法的判断"><a href="#3-非LR（0）文法的判断" class="headerlink" title="(3) 非LR（0）文法的判断"></a>(3) 非LR（0）文法的判断</h5><p>判断方法一：<br>    考察识别文法可归前缀的DFA，若某个状态（即项目集）中既含移进项目又含归约项目；或含不只一个归约项目， 则会发生分析动作的冲突，可知该文法不是LR（0）的。<br>判断方法二：<br>    若文法的LR（0）分析表中含多重定义，即表中某项动作不唯一，则该文法不是LR（0）文法。</p><h5 id="4-SLR（1）分析"><a href="#4-SLR（1）分析" class="headerlink" title="(4) SLR（1）分析"></a>(4) SLR（1）分析</h5><p>用SLR（1）方法，对于当前状态中的归约项目，如A→$\alpha$·，必须当前输入符号属于FOLLOW（A）时，才可做归约。有望解决LR（0）方法中的分析动作冲突问题。<br><b> SLR（1）分析表的构造</b><br>    将LR（0）分析表构造算法中的 b）改为：<br>    若项目A→$\alpha$ ·属于$I_k$，则对a为任何终结符或‘#’号，且满足a$\in$FOLLOW(A)时，置ACTION[k, a]为“rj”，j为在文法G中某产生式A→$\alpha$的序号。</p><h5 id="5-非SLR文法的判断"><a href="#5-非SLR文法的判断" class="headerlink" title="(5) 非SLR文法的判断"></a>(5) 非SLR文法的判断</h5><p>判断方法一：<br>对识别文法可归前缀DFA中任一状态下，FOLLOW(B1)…FOLLOW(Bn)，两两不相交，否则，文法不是SLR的。只求需要归约Follow集<br>判断方法二：<br>若构造的SLR分析表含多重定义，则文法不是SLR的。</p><h5 id="6-LR（1）分析"><a href="#6-LR（1）分析" class="headerlink" title="(6) LR（1）分析"></a>(6) LR（1）分析</h5><p>   若对某些文法，用SLR（1）方法仍解决不了分析动作的冲突问题，可采取以下措施：若某归约项目A→$\alpha$ · $\in$ I ，当 I 为当前状态，面临当前输入符号a 时，只有a 是在 I 状态下A 的后继符号时 才用 A →$\alpha$  产生式归约，而不是对A的所有后继符号都可以归约。从而有望解决冲突。<br>A →  $\alpha$·，Follow(A) 是向前搜索符，构造项目集是其他与LR(0)相似，只是加上向前搜索符<br>    将LR（0）分析表构造算法中的 b) 中：若项目 A →$\alpha$  · 属于Ik ，则对 a 为任何终结符或 ‘#’ 号，置ACTION[k, a]为 rj改为：若项目 [A→$\alpha$·, a] 属于Ik ，则置 ACTION [k,a] = rj<br><b>LR（k）分析表</b><br>如果用 LR（1）方法仍不能解决冲突，则可再向前多搜索几个符号，这时的项目为 [A→$\alpha$· $\beta$,  a1 a2 … ak ] 称为 LR（k）项目，相应的分析表构造方法类似 LR（1）分析表的构造。</p><h5 id="7-LALR（1）分析"><a href="#7-LALR（1）分析" class="headerlink" title="(7) LALR（1）分析"></a>(7) LALR（1）分析</h5><p>在LR（1）项目中，有很多状态中的项目除了向前搜索符号不同外，产生式部分是完全相同的，称这样的状态是同心的，为了克服LR（1）分析中状态太多的问题，可以将这些同心集合并。如果合并后得到的新状态没有冲突出现。则按新状态构造分析表。这就是LALR（1）分析法的基本思想。<br>LR(0)  LR(1)  SLR(1) 这三种文法很重要。</p><h4 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h4><h5 id="1-语义处理"><a href="#1-语义处理" class="headerlink" title="(1) 语义处理"></a>(1) 语义处理</h5><p><b>语义分析</b>：主要检查各种语法成分的语义是否符合语义规定，例如参与运算的表达式类型是否一致，赋值语句的赋值左部和右部类型的一致性，数组元素的维数与数组说明维数的一致性，每一维的下标是否越界，在相同作用域中名字是否被重复说明等。<br>   目前尚无公认的、统一的形式化语义描述工具。但研究者已提出一些针对某些特殊语言的语义描述工具，例如：公理语义、指称语义、代数语义、操作语义等。<br><b>中间代码生成</b>：对说明语句，通常将其中定义的名字及其属性信息，在符号表中进行登记；对于执行语句，生成语义上等价的中间语言代码。<br><b>属性文法</b>：一个属性文法，包含一个上下文无关文法和一系列语义规则，这些语义规则附在文法的每个产生式上。<br>E→T1+T2$\qquad$   {T1·t=int  AND  T’2·t=int}  $\qquad$  E→T1 or T2   $\qquad${T1·t=bool  AND  T2·t=bool}<br>T→num {T·t=int} $\qquad$ T→true   {T·t:=bool}     $\qquad$     T→false  {T·t:=bool}<br><b>语法制导翻译</b>：在语法分析过程中，随着分析的步步进展，根据每个产生式对应的语义子程序（或语义规则描述的语义动作）进行翻译的办法称作语法制导翻译。<br><b>语法制导翻译的具体实现途径</b>：假定有一个LR语法分析器，现在把它的分析栈扩充，使得每个文法符号都跟有语义值，即把栈的结构看成下图所示那样。同时把LR分析器能力扩大，使它不仅执行语法分析任务，且能在用某个产生式进行归约的同时调用相应的语义子程序，完成有关的语义动作。每步工作后的语义值保存在扩充的分析栈里“语义值”栏中。</p><h5 id="2-中间代码形式"><a href="#2-中间代码形式" class="headerlink" title="(2) 中间代码形式"></a>(2) 中间代码形式</h5><p>常见的有逆波兰记号、三元式、四元式和树等。<br>1.<b>逆波兰表示</b>（也称后缀表示）逆波兰表示的特点：<br>（1）运算符紧跟在运算对象的后面出现，没有括号。<br>（2）运算对象出现的顺序（从左到右）和原有顺序（中缀）相同。<br>（3）运算符是按实际运算顺序（从左到右）出现的。<br>逆波兰表示的最大优点是易于计算机处理表达式，使用栈进行运算很方便。可将逆波兰表示形式扩充，用来描述程序设计语言中的其它语法成分。<br>2.<b>三元式表示 </b><br>三元式的形式为：（op，ARG1，ARG2）其中op为运算符，ARG1为运算对象1，ARG2为运算对象2。<br>三元式出现的先后顺序与表达式的运算顺序一致。<br>三元式的缺点是不便于优化，动一式，其它式子被牵动，使用间接三元式，可以克服这个缺点。<br>间接三元式：使用二个表（1）三元式：存放不相同的三元式（2）运算顺序表（也叫间接码表）：按运算的先后顺序列出有关三元式在三元式表中的位置。<br>3.<b>树形表示</b>  三元式表示也可用相应的树形表示。<br>    简单变量或常量的树就是该变量或常量本身，如果表示表达式e1和e2的树为T1和T2<br>4.<b>四元式</b>：表示形式（op; ARG1, ARG2, RESULT）四元式表示较利于代码优化。</p><h5 id="3-简单赋值语句翻译"><a href="#3-简单赋值语句翻译" class="headerlink" title="(3) 简单赋值语句翻译"></a>(3) 简单赋值语句翻译</h5><p>（1）id.name 语义变量，表示变量即标识符字符串。<br>（2）E. place 语义变量，表示存放E值的变量名在符号表中的入口位置或一整数码（临时变量）。<br>（3）Lookup(id. name)语义过程(函数），对id.name查符号表，若找到，则返回其在符号表中的位置，否则返回nil，体现先定义后使用的原则。<br>（4）GEN(op, ARG1, ARG2, RESULT)语义过程(函数）,生成四元式，填进四元式表。<br>（5）newtemp 语义过程，生成一临时变量Ti。</p><center><img src="https://img-blog.csdnimg.cn/20200211223248417.png"></center><h5 id="4-布尔表达式的翻译"><a href="#4-布尔表达式的翻译" class="headerlink" title="(4) 布尔表达式的翻译"></a>(4) 布尔表达式的翻译</h5><p>布尔表达式的翻译是指转换成最终能计算出该表达式的结果为真或假（1 或0）的四元式序列的过程。<br>Eg. a or b and not c 的四元式序列为：<br>(1) t1:=not c<br>(2) t2 :=b and t1<br>(3) t3 :=a or t2<br>(1) <b>控制语句的代码结构</b>    真出口E.true 假出口E.false<br>(2) <b>“回填”技术</b><br>    控制语句中布尔表达式翻译成四元式序列时，有的转移地址不能在产生这些四元式的同时得知，需要在适当的时候回填这个地址。<br>(3)<b> “拉链”技术</b><br>    为了记录需要回填地址的四元式，常采用“拉链”技术。把需回填E.true 的四元式拉成一条链，称为“真”链；把需回填E.false的四元式拉成一条链，称为“假”链。</p> <center><img src="https://img-blog.csdnimg.cn/20200211223446978.png"></center> <center><img src="https://img-blog.csdnimg.cn/20200211223538112.png"></center><h5 id="5-控制结构的翻译"><a href="#5-控制结构的翻译" class="headerlink" title="(5) 控制结构的翻译"></a>(5) 控制结构的翻译</h5><p>for 循环语句的文法及其相应的语义动作</p> <center><img src="https://img-blog.csdnimg.cn/20200211223638568.png"></center><h4 id="第八章-错误的诊查与校正"><a href="#第八章-错误的诊查与校正" class="headerlink" title="第八章 错误的诊查与校正"></a>第八章 错误的诊查与校正</h4><p>对于源程序，由于种种原因，往往含有或多或少的错误，因此，一个好的编译程序应具有较强的查错和改错能力。</p><h5 id="1、语法错误"><a href="#1、语法错误" class="headerlink" title="1、语法错误"></a>1、语法错误</h5><p>   指程序结构、单词和拼写不符合语法要求的规则。都是在词法分析阶段和语法分析阶段发现的。<br>    如 关键字拼写错误;某些语法成分未按语言的语法规则编写等。 </p><h5 id="2、语义错误"><a href="#2、语义错误" class="headerlink" title="2、语义错误"></a>2、语义错误</h5><p>指程序不符合语义规则或超越具体计算机系统的限制。包括以下几种类型:</p><ul><li><p>说明错：对变量未说明就引用，某些量被重复说明，或不符合有关作用域的规定。</p></li><li><p>类型不相容错：某些运算的操作数的类型不相容，形一实参在种属或类型上不相对应等。</p></li><li><p>对某些值超越限制错：如对各类变量数值范围的限制；对数组维数、形参个数、循环嵌套数的限制。</p><p>另外，我们将在编译阶段就能发现的错误，称为静态错;到目标代码运行时才能发现的错误称为动态错，如溢出，动态数组的下标越界。</p></li></ul><h5 id="出错处理主要有两种处理方法："><a href="#出错处理主要有两种处理方法：" class="headerlink" title="出错处理主要有两种处理方法："></a>出错处理主要有两种处理方法：</h5><p>1、<b>校正法</b><br>  试图对错误进行校正。<br>  当编译程序发现错误时，给用户指出错误的性质、错误的位置，以及如何校正等方面的信息。<br>2、<b>局部化法</b><br>   当发现错误时，跳过错误所在的语法单位，继续往下分析。以便把错误限制在尽可能小的局部范围内。只需给用户报告出错误位置，出错性质即可。</p><h5 id="一些语义错误的处理："><a href="#一些语义错误的处理：" class="headerlink" title="一些语义错误的处理："></a>一些语义错误的处理：</h5><p>1、<b>遏止株连错误</b><br>    株连错误：由于第一次错误，而派生出后面若干额外错误。只要消除第一个错误，后面若干错误也就自动消失。<br>   <b>遏止方法</b>：第一次发现是标识符引起错误时，输出出错信息，并用一个“正确”的标识符代替它，并把此新的标识符填进符号表，尽可能正确地填入各种属性且加上标记。<br>    以后发现一个引起错误的标识符时，查看符号表中相应登记项，如果它已被标记，则不再打印出错信息。<br>2、<b>遏止重复错误</b><br>    重复错误：一种错误，发现n次，报n次错。<br>    如：x未被说明，程序中出现n次，则n次报x未被说明。<br>   <b> 遏止方法</b>：<br>    设出错标识符为x<br>    1、若x未经说明，则将x填入符号表，并填入鉴别出的属性。<br>    2、若x已被说明，则查错误类表。<br>    如果表中没有同类错误，则输出出错信息，并填进错误类表中。<br>    如果表中有同类错误，则不输出错误信息。</p><h4 id="第九章-符号表"><a href="#第九章-符号表" class="headerlink" title="第九章 符号表"></a>第九章 符号表</h4><h5 id="符号表的作用"><a href="#符号表的作用" class="headerlink" title="符号表的作用"></a>符号表的作用</h5><p>   编译程序在词法分析到代码生成的各阶段，不断地积累和更新表中的信息，并按各自的需要从表中获取信息。符号表的功能归结为以下三个方面：<br>1、<b>收集符号属性</b><br>    在分析语言程序中标识符说明部分时，编译程序根据说明信息收集有关标识符的属性，并在符号表中建立符号的相应属性信息。如PL/0语言编译的符号表。<br>2、<b>上下文语义的合法性检查的依据</b><br>    通过符号中属性记录可检查标识符属性在上下文中的一致性和合法性。如：是否未说明就引用，说明与引用，其属性、类型是否一致。是否有重复定义。运算量间运算类型是否一致等。<br>3、<b>作为目标代码生成阶段地址分配的依据</b><br>    源程序中的变量在目标代码生成时需要确立其在存储分配的位置（主要是相对位置）。而地址分配主要根据变量的类型，在源程序中被说明的位置。<br>    如在第几层分程序，是静态区还是动态区等，分配其在相应数据区中的相对地址，而这些地址分配的依据都是作为变量的语义信息被收集在该变量的符号表属性中。</p><h5 id="符号表的内容："><a href="#符号表的内容：" class="headerlink" title="符号表的内容："></a>符号表的内容：</h5><p>1、<b>符号名</b><br>源程序中一个标识符可以是一个变量名、常量名、函数名或过程名，登记在符号表中，通常把一个标识符在符号表中的位置（通常是一个整数）称之为该标识符的内部代码，从而取代该标识符。<br>2、<b>符号的类型信息</b><br>符号的种类：如常量、变量、数组、标号、函数或过程等，符号的类型，如整型、实型、字符型、布尔型等。<br>数组：应包括维数、上下界、计算下标地址时涉及的常量等，放在数组信息向量表即内情向量表中，用于确定存储分配时所占空间，确定数组元素的位置。<br>过程或函数：应包括参数的个数、类型、排列次序等用来作调用过程的匹配处理和语义检查。<br>记录结构：应包括其成员的类型、个数、排列次序等信息。以便确定结构型变量应分配的空间及结构成员的位置。<br>3、<b>符号变量的存储分配信息</b><br>存储类别：如全局量还是局部量，静态存储变量，还是动态存储变量等，作为存储分配的依据。<br>地址表示：简单变量或常量，一般是该量在数据区所占单元的绝对或相对地址。数组，是该数组在数据区中的首地址，过程或函数，是该过程或函数的分程序入口地址。<br>4、<b>层次信息</b><br>对于分程序嵌套或过程嵌套结构型程序设计语言，还应包括每个标识符所属分程序（过程）的层次。</p><h5 id="符号表的组织："><a href="#符号表的组织：" class="headerlink" title="符号表的组织："></a>符号表的组织：</h5><p>   符号表的组织直接关系到语义功能的实现和语义处理的时空效率，关于符号表的组织可从符号表的总体组织和表项属性信息组织来分别讨论。<br>1、<b>符号表的总体组织</b><br>第一种：按照属性完全相同的那些符号组织在一起。<br>第二种：把语言中的所有符号都组织在一张符号表中。<br>优点：总体管理集中单一。<br>缺点：若各表项相等，则增加了无用的属性空间，从而增加了空间开销。<br>    若各表项不等长，则增加了对符号表管理的复杂度。<br>第三种：折中方式<br>   根据符号属性相似程度分类组织成若干张表，使管  理复杂性及时空效率方面都取得折中的效果。<br>2、<b>符号表项的排列</b>：<br>在编译程序的整个工作中，符号表被频繁地用来建立表项，找查表项，填充和引用表项的属性，因此表项的排列组织对该系统运行的效率起着十分重要的作用。<br>传统上采用三种构造方法:<br>（1）线性组织（按其出现顺序）<br>表项按它的符号被扫描到的先后顺序建立。<br>线性组织管理简单但运行效率低。适用于事先能确定符号个数且符号个数不大时。<br>（2）排序组织及二分法（abcd排列）<br>表项按其符号的字符代码串的值的大小排列。<br>关于表项的建立和查找通常采用二分法。<br>排序表的运行效率比线性表高，算法复杂性也高于线性表。<br>（3）散列组织<br>    表项位置是由对表项的符号值（即字符代码串）进行某种函数操作（通常称为“杂凑”）所得到的函数值来确定的，这种函数通常被称为杂凑函数。<br>    符号表的散列组织具有较高的运行效率，因而绝大多数编译程序中的符号表采用散列组织。</p><h5 id="3、关键字域的组织："><a href="#3、关键字域的组织：" class="headerlink" title="3、关键字域的组织："></a>3、关键字域的组织：</h5><p>   在编译程序中，符号表的关键字域就是符号本身。也称名字域。<br>（1）等长关键字段<br>    可设置关键字段为标识符的最大长度。由于程序中的标识符不会总是使用很长的拼写字，关键字段的这种组织方式在实际使用中会有很多空间是冗余的。<br>（2）关键字池的索引结构<br>    符号表中关键字段是指针，指向该关键字在池中的位置，</p><center><img src="https://img-blog.csdnimg.cn/20200211223716347.png"></center><h5 id="4、其它域的组织"><a href="#4、其它域的组织" class="headerlink" title="4、其它域的组织"></a>4、其它域的组织</h5><p>   符号表属性域的组织，根据属性性质大致分成两类：<br>一类是符号表中符号的该属性值具有相同的类型且是等长的，则该属性域的类型结构就可用这个长度及类型来定义。<br>    另一类属性值可能具有相同类型但长度不同，则该属性域的定义不能用简单的数据类型来定义。<br>（1）<b>等长属性值域的组织</b><br>    用于表中符号的该属性值具有相同的类型且是等长的。<br>①位向量表示：如表示符号的数据类型可以用3个bit位表示<br>②数值表示：表示符号的数据类型也可以用一个整型量来表示<br>③用指针链表示：有一些是表示符号之间关系的属性，可用指针或指针链来构造这些属性域。</p><center><img src="https://img-blog.csdnimg.cn/20200211223805498.png"></center><p>（2）<b>不等长属性值域组织</b><br>    符号的某些属性值是不等长的</p><p>   一个数组的内情向量属性可分成两种值，数组维数的个数及每一个维的元素个数。下标表示了所在维的元素个数。<br>    数组符号在符号表项中可以设立一个指向内情向量空间的指针，而在内情向量空间记录关于该数组的维数个数和每一维的元素个数，下图表示了array1及array2两个数组在符号表中内情向量的组织。</p><center><img src="https://img-blog.csdnimg.cn/20200211223833441.png"></center><h5 id="5、下推链表组织"><a href="#5、下推链表组织" class="headerlink" title="5、下推链表组织"></a>5、下推链表组织</h5><p>在程序语言的结构中，分程序的分层结构中允许定义同名标识符，则在每进入一个内层结构并发生重名标识符定义时，将此重名标识符链到链首，即原同名链下推。</p><center><img src="https://img-blog.csdnimg.cn/20200211223920877.png"></center><h5 id="6、符号表的管理："><a href="#6、符号表的管理：" class="headerlink" title="6、符号表的管理："></a>6、符号表的管理：</h5><p>   包括表的初始化、符号的登录、符号的查找和有关分程度结构符号表层次管理。<br>1、<b>符号表的初始化</b><br>（1）符号表的表长是渐增变化的情况<br>（2）符号表的表长是确定的情况<br>2、<b>符号的登录</b><br>对于散列表，新符号的登录是通过杂凑算法决定登录表项的位置。<br>    关于属性，多数可与符号名一起填入，有些根据扫描时所得信息，逐步用前述属性域组织方式（如等长、不等长、属性链）进行填入。</p><center><img src="https://img-blog.csdnimg.cn/20200211223958583.png"></center><p>3、<b>符号的查找</b><br>    根据表的组织方法，可用顺序查找、折半查找或杂凑查找法查找。<br>4、<b>符号表中分程序结构层次管理</b><br>    名字作用范围：分程序中说明的名字只局部于此分程序，内层可以引用外层说明的名字（此名字必须在内层未被说明）。<br>通常对于具有分程序结构的语言用两种方式组织它们的符号表：<br>（1）对每个分程序建立一个独立的符号表<br>    每当编译程序扫描到一个分程序结构时，为该分程序填写符号表。<br>    而当扫描到该分程序结束时，则释放为该分程序所填的符号表内容。即动态建立和动态消亡。<br>符号的登录是中为该分程序所建立的符号表中进行，而符号的查找是首先在该分程序符号表中进行，若没有查找到，再根据分程序的层次结构，逐层向外地依次查找各层符号表。<br>    特别要注意的是对于并列的分程序，其相应的符号表不会同时存在。<br>（2）单表结构<br>    只用一张符号表<br>    符号表中可设立一个属性域用来登录符号所在分程序层次，符号表相当于栈的形式。<br>    每当编译程序扫描到一个分程序结构开始时，就在符号表栈顶登录该分程序中说明的符号及其属性，包括分程序层号。<br>    而当编译程序扫描到一个分程序的结束时，就从栈顶退出为该分程序登录的符号及属性。</p><h4 id="第十章-目标程序运行时的存储组织"><a href="#第十章-目标程序运行时的存储组织" class="headerlink" title="第十章 目标程序运行时的存储组织"></a>第十章 目标程序运行时的存储组织</h4><p>运行时的存储区常常划分为：目标区、静态数据区、栈区和堆区。</p><center><img src="https://img-blog.csdnimg.cn/20200211224034717.png"></center><p>在大部分现有编译程序中采用的数据空间使用和管理方法主要有两种，即静态存储分配和动态存储分配。<br>而动态存储分配中又分：栈式动态存储分配、堆式动态存储分配。</p><h5 id="静态存储分配："><a href="#静态存储分配：" class="headerlink" title="静态存储分配："></a>静态存储分配：</h5><p>在编译时就安排好目标程序运行时的全部数据空间，并能确定每个数据项目的存储位置，存储空间的这种分配方法称为静态存储分配。<br>对语言的要求：<br>   （1）不含可变体积数据，如动态数组。<br>   （2）不含递归过程。<br>   （3）数据名的性质完全确定，即不能运行时才确定。<br> 如FORTRAN语言，就可用静态存储分配。</p><h5 id="动态存储分配："><a href="#动态存储分配：" class="headerlink" title="动态存储分配："></a>动态存储分配：</h5><p>在目标代码运行时，动态地为源程序中的数据对象分配存储空间，则称为动态存储分配。<br>对不能满足静态存储分配的语言，则需用动态存储分配。但并非所有分配工作都放在运行时刻做，在编译阶段就要设计好存储组织形式，并反映在生成的目标代码中。<br>有两种动态存储方式：栈式和堆式</p><h5 id="栈式动态存储分配："><a href="#栈式动态存储分配：" class="headerlink" title="栈式动态存储分配："></a>栈式动态存储分配：</h5><p>将整个程序的数据空间设计为一个栈(Stack)，每当调用一个过程时，它所需空间就分配在栈顶，每当过程工作结束时，就释放这部分空间。如PASCAL、ALGOL和C语言。</p><h5 id="堆式动态存储分配："><a href="#堆式动态存储分配：" class="headerlink" title="堆式动态存储分配："></a>堆式动态存储分配：</h5><p>所谓堆式动态存储分配，就是在存储空间里专门保留一片连续的存储块（称为堆Heap），在运行程序过程中，对于类似上述情况的语法成分，需要空间时，就由一个运行时刻存储管理程序从堆中分配一块区域给它，不再需要时，又可由此堆管理程序释放该区域，供以后重新分配使用。</p><h5 id="栈式存储分配的实现"><a href="#栈式存储分配的实现" class="headerlink" title="栈式存储分配的实现"></a>栈式存储分配的实现</h5><p>过程的活动记录（AR）：是一段连续的存储区，用以存放过程的一次执行所需要的信息。</p><center><img src="https://img-blog.csdnimg.cn/20200211224112194.png"></center><p><b>简单的栈式存储分配的实现</b>：    </p><p>假设语言没有分程序结构，过程定义不允许嵌套，但允许过程的递归调用，如C语言。这样的语言可以直接采用栈式存储分配。<br>无嵌套定义的过程活动记录内容见下表（设该过程含可变数组）<br>TOP指向栈顶。SP指向现行活动记录起点，老SP指向调用现行过程的过程活动记录的起点。</p><p><b>嵌套过程语言的栈式实现</b>：</p><p>假设语言的过程定义允许嵌套，例如PASCAL语言。<br>    由于过程定义是嵌套的，一个过程可以引用包围它的任一外层过程所定义的变量或数组，为了在活动记录中查找非局部量名字所对应的存储空间，必须设法跟踪每个外层过程的最新活动记录的位置。常用的跟踪方法有两种：<br> （1）建立静态链<br>    静态链处指向直接外层过程的最新活动记录的地址，这就意味着在运行时栈上的数据区（活动记录）之间又增加一条链，这个链称为静态链，通过静态链可实现对过程中非局部变量名称的访问。<br>（2）建立显示表（display）<br>为了提高访问速度，引进一个指针数组——嵌套层次显示表（display），假定现进入的过程的层数为i，则它的display表含有i+1个单元，表中自顶向下每个单元依次存放着现行层、直接外层、……，直至最外层（0层，主程序层）等每一层过程的最新活动记录的基地址，为了便于组织存储区和处理，将display作为活动记录的一部分。<br>其中，全局display是一个指针，指向本过程直接外层过程最新活动记录中display表的首地址，可通过全局display来构建本过程的display表，即将全局display所指的display表拷贝过来，再加一项本过程活动记录的SP，就可得到本过程的display表，当要访问一个非局部量时，由此非局部量说明所在的静态层数在display表中找到该非局部量说明所在过程的最新活动记录起址，再加上该非局部量的相对地址就可实现访问。例 图10.16(P239) display表</p><center><img src="https://img-blog.csdnimg.cn/20200211224145144.png"></center><h4 id="第十一章-代码优化"><a href="#第十一章-代码优化" class="headerlink" title="第十一章 代码优化"></a>第十一章 代码优化</h4><h5 id="1、代码优化："><a href="#1、代码优化：" class="headerlink" title="1、代码优化："></a>1、代码优化：</h5><p>是对代码进行等价变换，使得变换后的代码运行结果与变换前代码运行结果相同，而运行速度加大或占用存储空间少，或两者都有。</p><h5 id="2、优化工作阶段："><a href="#2、优化工作阶段：" class="headerlink" title="2、优化工作阶段："></a>2、优化工作阶段：</h5><p>对中间代码进行优化（不依赖于具体的机器）和对目标代码进行优化（依赖于个体的机器）  </p><h5 id="3、依据优化所涉及的程序范围，分为三个不同的级别："><a href="#3、依据优化所涉及的程序范围，分为三个不同的级别：" class="headerlink" title="3、依据优化所涉及的程序范围，分为三个不同的级别："></a>3、依据优化所涉及的程序范围，分为三个不同的级别：</h5><p>   （1）局部优化 指的是在只有一个入口，一个出口的基本程序块上进行的优化。<br>    （2）循环优化  即对循环中的代码进行的优化。<br>    （3）全局优化  是在整个程序范围内进行的优化。</p><h5 id="4、优化技术简介"><a href="#4、优化技术简介" class="headerlink" title="4、优化技术简介"></a>4、优化技术简介</h5><p>（1）删除多余运算（删除公共子表达式）：优化后使运算时间减少。<br>多余运算：表达式E多次出现，每次出现值都不变，则除第一次出现外，都叫多余运算。<br>（2）代码外提：优化后减少了循环中代码总数。<br>将循环体中每次循环都执行的不变运算提到循环的前面。<br>（3）强度削弱：优化后提高了运算速度。<br>把强度大的（即执行时间较长的）运算换成强度小的运算，如把循环中的乘法运算用递归加法运算来替换。<br>（4）变换循环控制条件（删除基本归纳变量）<br>基本归纳变量：如果循环中对变量I只有唯一的形如I:=I±C的赋值，其中C为循环不变量，则称I为循环中的基本归纳变量。<br>同族归纳变量：如果循环中J的定值总可以化为形式：J:=C1*I±C2，其中I为基本归纳变量，C1和C2都是循环不变量，则称J为归纳变量，并称它与I同族。<br>删除基本归纳变量：一个基本归纳变量除用于自身的递归定值外，往往只在循环中用来计算其它归纳变量以及用来控制循环的进行。这时我们就可以用与循环控制条件中的基本归纳变量同族的某一归纳变量来替换，从而达到减少一个变量的目的，这往往伴随对归纳变量运算进行强度削弱时进行。 </p><h5 id="（5）合并已知量"><a href="#（5）合并已知量" class="headerlink" title="（5）合并已知量"></a>（5）合并已知量</h5><p>编译时，对运算对象为已知量的运算，即可直接进行运算，不必等到运行时再运算。</p><h5 id="（6）复写传播"><a href="#（6）复写传播" class="headerlink" title="（6）复写传播"></a>（6）复写传播</h5><p>称形为x:=y的赋值为复写。复写传播，若引用x时，x、y值均未变，则把引用x改为引用y。</p><h5 id="（7）删除无用赋值"><a href="#（7）删除无用赋值" class="headerlink" title="（7）删除无用赋值"></a>（7）删除无用赋值</h5><p>(1)对某变量A赋值后，该A值在程序中不被引用，则为无用赋值<br>(2)对某变量A赋值后，在该A值被引用前又对A重新赋值，则前面  对A的赋值无用。</p><h5 id="局部优化："><a href="#局部优化：" class="headerlink" title="局部优化："></a>局部优化：</h5><p>将一程序(中间代码序列)划分为一系列其本块，在各基本块内分别进行优化，即为局部优化。<br>1、<b>基本块</b><br>基本块是指程序中一顺序执行的语句序列，其中只有一个入口语句和一个出口语句。<br>（1）入口语句的三种定义：<br>①程序的第一条语句<br>②由转移语句转到的语句<br>③紧跟在条件转移语句后面的语句<br>（2）基本块的划分<br>①由一入口语句到下一入口语句（不包括此下一入口语句）之间的语句序列。<br>②由一入口语句到一转移语句（包括此转移语句）之间的语句序列。<br>③由一入口语句到一停语句（包括此停语句）之间的语句序列。</p><p>2、<b>基本块的DAG图 </b><br>一个基本块可由一个DAG图（无环路有向图）表示。<br><b>DAG图的特征</b>。<br>①叶结点用标识符（变量名）或常量作为惟一标记，当叶结点是标识符时，代表名字的初值，给它加下标。<br>②内部结点用运算符标记，它表示计算的值。<br>③各结点可能附加有一个或若干个标识符，附加于同一个结点上的若干个标识符有相同的值。</p><center><img src="https://img-blog.csdnimg.cn/20200211224228185.png"></center><p><b>算法步骤</b>：<br>步骤1  初始DAG为空，无任何结点。<br>步骤2  依次对基本块的每一个四元式，执行步骤3—5。<br>步骤3：<br>如果node（B）没有定义，则建立标记为B的叶结点，并定义node（B）为这个结点编号nB，即建立结点。</p><center><img src="https://img-blog.csdnimg.cn/20200211224310786.png"></center>如果对于2型四元式，node（C）没有定义，则建立叶结点。<center><img src="https://img-blog.csdnimg.cn/20200211224319749.png"></center>如果node（B）和node（C）都是已知常量，则执行B op C（合并已知量），得到新常量P；为P建立一个新结点。<center><img src="https://img-blog.csdnimg.cn/20200211224324924.png"></center>如果 node（B）或node（C）是处理当前四元式时建立的新结点，则删除它。步骤4  对三种四元式分别处理如下： （1）对于0型，设node（B）值是n，转步骤5。（2）对于1型，查看是否存在标记为op的结点，且它有唯一的子结点node（A），即形如：<center><img src="https://img-blog.csdnimg.cn/20200211224333348.png"></center>如果不存在，则建立这样的结点。让n是找到或建立的结点，转步骤5。 （3）对于2型，查看是否存在标记为op的结点，且其左右子结点分别是node（B）与node（C）（找公共子表达式）即形如<center><img src="https://img-blog.csdnimg.cn/2020021122434026.png"></center>如果不存在，则建立这样的结点。让n是找到或建立的结点,转步骤5。步骤5：如果node（A）无定义，则把A附加在结点n上并令node（A）=n，（可达到删除多余运算的目的）否则，先把A从node（A）结点上的附加标识符集中删除（注意，如果node（A）是叶结点，则其标记A不删除），把A附加到新结点n上并令node（A）=n。（可达到删除无用赋值的目的）转处理下一四元式。<b>基本块内主要可进行的优化</b>（1）删除多余运算（删除公共子表达式）（2）合并已知量（3）删除无用赋值（4）复写传播<h5 id="循环优化"><a href="#循环优化" class="headerlink" title="循环优化"></a>循环优化</h5><p>循环，粗略地说就是程序中那些反复执行的代码序列。为了找出程序中的循环，需要对程序的控制流程进行分析。<br>1、<b>程序流图</b><br>（1）<b>控制流程图</b>：就是具有唯一首结点的有向图。简称为流图。<br>    所谓首结点，就是从它开始到控制流程图中任何结点都有一条通路的结点。<br>（2）程序流图：即把一个程序表示为一个控制流程图，则称为程序流图。<br>    程序流图中的结点就是基本块，首结点就是包含程序第一个语句的基本块。<br>构造有向边<br>①基本块j在程序中的位置紧跟在基本块i之后，并且基本块i的出口语句不是无条件转移语句或停语句。<br>②基本块i的出口语句是goto (S) 或 if…goto (S)，并且（S）是基本块j的入口语句。<br>2、<b>循环的性质及查找</b><br>（1）<b>循环的性质</b><br>    在程序流图中，我们称具有下列性质的结点序列为一个循环：<br>（1）它们是强连通的。即其中任意两个结点之间，必有一条通路，而且该通路上各结点都属于该结点序列。如果序列只包含一个结点，则必有一有向边从该结点引到其自身。<br>（2）它们中间有且只有一个是入口结点。所谓入口结点，是指序列中具有下述性质的结点：从序列外某结点，有一有向边引到它，或者它就是程序流图的首结点。<br>（2）<b>循环的查找</b><br>回边  假设 a—&gt;b是流图中的一条有向边，若b DOM a, 则称a—&gt;b是流图中的一条回边。对于一已知流图，只要求出各结点必经结点集，就可求出流图中的所有回边。<br>对右图，有向边６—&gt;６、７—&gt;４、４—&gt;２是回边。<br>循环  如果已知有向边a—&gt;b是回边，则循环就是由结点b、a以及有通路到达a而该通路不经过b的所有结点组成。</p><center><img src="https://img-blog.csdnimg.cn/20200211224549445.png"></center><p>3、<b>循环优化的主要技术</b><br>（1）代码外提：入口结点、前置结点<br>（2）强度削弱<br>（3）变换循环控制条件（删除归纳变量）</p><h5 id="全局优化是整个程序范围内的代码优化。"><a href="#全局优化是整个程序范围内的代码优化。" class="headerlink" title="全局优化是整个程序范围内的代码优化。"></a>全局优化是整个程序范围内的代码优化。</h5><p>   为了进行全局优化，需要在整个程序范围内，对程序中的所有变量的定值和引用间的关系进行分析，通常将这一工作称为数据流分析。通过在程序的控制流图中进行数据流分析，是实现全局优化的基础。</p><p>1、<b>一些主要概念</b>：<br>（1）到达-定值<br>•变量A的定值是一个语句（四元式），它赋值或可能赋值给A，该语句的位置称作A的定值点。<br>（2）引用-定值链（ud链）<br>•假设在程序中某点u引用了变量A的定值，则把能到达u的A的所有定值点的全体，称为A在引用点u的引用—定值链。通常将到达—定值信息存储（一个定值表）作为引用—定值链较方便，称之为 ud链。<br>（3）活跃变量<br>•对程序中的某变量A和某点 p，若存在一条从p 开始的通路，其中引用了A在点p 的值，则称A 在点p 是活跃的。否则称A 在点p是死亡的。<br>• 活跃变量的分析对于删除无用赋值是很有意义的。<br>（4）定值-引用链（du链）<br>•若一个变量A在程序中某点p定值，则可计算该定值能到达的对A的所有引用点，这些引用点集合称为该定值点的定值—引用链，简称为 du链。<br>•du链信息可进一步用于强度削弱的优化中。<br>2、<b>全局优化的主要技术</b>：<br>（1）删除全局多余运算（删除全局公共子表达式）<br>（2）复写传播。</p><h4 id="第十二章-代码生成"><a href="#第十二章-代码生成" class="headerlink" title="第十二章 代码生成"></a>第十二章 代码生成</h4><h5 id="代码生成："><a href="#代码生成：" class="headerlink" title="代码生成："></a>代码生成：</h5><p>是把经过语法分析或优化后的中间代码转换成特定目标机的机器语言或汇编语言，这样的转换程序称为代码生成程序。<br>代码生成程序的构造与输入的中间代码形式和目标机的指令系统及结构密切相关。</p><h5 id="目标代码一般有3种形式："><a href="#目标代码一般有3种形式：" class="headerlink" title="目标代码一般有3种形式："></a>目标代码一般有3种形式：</h5><p>(1) 能够立即执行的机器语言代码，所有地址均已定位；(绝对地址的机器语言代码)<br>(2) 待装配的机器语言模块，当需要执行时，由连接装入程序把它们和某些运行程序连接起来，转换成能执行的机器语言代码； (相对地址的机器语言代码)<br>(3) 汇编语言代码，尚需经过汇编程序汇编，转换成可执行的机器语言代码。 </p><h5 id="代码生成程序的输入"><a href="#代码生成程序的输入" class="headerlink" title="代码生成程序的输入"></a>代码生成程序的输入</h5><p>代码生成程序的输入由前端所产生的中间表示和符号表中的信息组成。<br>可供选择的中间表示有多种，主要包括：线性表示法(如后串表示)、三地址表示法(如四元式)、抽象机表示法(如栈式机器代码)和图形表示法(如语法树和DAG图)等。 </p><h5 id="指令选择"><a href="#指令选择" class="headerlink" title="指令选择"></a>指令选择</h5><p>   指令选择是指，寻找一个合适的目标机指令序列以实现给定的中间表示。<br>    在指令的选择过程中，指令集的一致性和完整性是重要因素。如果目标机器不能支持指令集的所有类型，那么对每一种例外都需做特别的处理。指令速度和机器用语也是重要因素。如果不考虑目标程序的效率，那么指令选择可以直接做。<br>生成的代码的质量取决于它的执行速度和代码序列的长度。</p><h5 id="指令选择的基本原则："><a href="#指令选择的基本原则：" class="headerlink" title="指令选择的基本原则："></a>指令选择的基本原则：</h5><ul><li>减小产生代码的尺寸</li><li>减小目标代码的执行时间</li><li>降低目标代码的能耗</li></ul><h5 id="寄存器分配"><a href="#寄存器分配" class="headerlink" title="寄存器分配"></a>寄存器分配</h5><p>寄存器分配工作是确定在程序的哪个点将哪些变量或中间变量的值放在寄存器中比较有益。<br>通常情况下，指令在寄存器中访问操作数的开销要比在内存中访问小，且许多指令不能直接访问内存。若需要处置的操作数在内存中，则需要显式地取入到寄存器中。由此可见，将经常使用的操作数保存在寄存器中是比较有利的。<br>寄存器的使用可以分成分配和指派两个阶段考虑：<br>在<b>寄存器分配期间</b>，为程序的某一点选择驻留在寄存器中的一组变量；<br>在随后的<b>寄存器指派阶段</b>，挑出变量将要驻留的具体寄存器，即寄存器赋值。 </p><h5 id="寄存器分配原则："><a href="#寄存器分配原则：" class="headerlink" title="寄存器分配原则："></a>寄存器分配原则：</h5><p>生成某变量的目标对象值时，尽量让变量的值或计算结果保留在寄存器中直到寄存器不够分配为止。这样，访问变量时可减少对内存的存取次数，提高运行速度。<br>当到基本块出口时，将变量的值存放在内存中。因为一个基本块可能有多个后继或前驱结点，同一变量名在不同前驱结点的基本块内，出口前存放的寄存器可能不同或没有定值，所以应在出口前把寄存器的内容放在内存中，这样从基本块外入口的变量都在内存中。<br>在同一基本块内后边不再被引用的变量所占用的寄存器应尽早释放，以提高寄存器的利用率。</p><h5 id="指令调度"><a href="#指令调度" class="headerlink" title="指令调度"></a>指令调度</h5><p>   指令调度是指确定程序指令的执行顺序。<br>    计算执行的顺序会影响目标代码的有效性。<br>    对具有流水线限制的体系结构，指令调度阶段是必需的。</p><center><img src="https://img-blog.csdnimg.cn/20200211224639945.png"></center>若在MIPS 4KC上计算表达式（a+b)+c。可用右表中两个不同的指令序列。它们的主要不同在于指令顺序和寄存器的赋值。可以看出，有些计算顺序要求存放中间结果的寄存器少，指令序列短，从而提高了目标代码的效率。1.计算机模型2.待用信息链表法3.代码生成算法##### 代码生成程序的开发方法：1、<b>解释性代码生成法</b>    解释性代码生成方法是建立在一个代码生成专用语言，用这种语言以宏定义、子程序等形式描述代码生成过程。通过这些宏定义和子程序把中间语言解释为目标代码。这种方法使机器描述与代码生成算法结合在一起，与机器的联系直接反映在算法中。<b>算法局限性</b><ul><li>由于目标机的多样性、寻址方式、指令的差异等，给中间代码的设计带来困难；</li><li>代码生成语言与机器密切相关，可移植性受限制；</li><li>目标机的描述与代码生成算法混在一起，当描述改变时，势必引起算法的改变；</li><li>需进行指令的选择、排序等低层次的繁琐工作，产生的目标代码质量依赖于设计者的经验能力。</li><li>代码生成的视野有限，对协调上下文有关的优化较困难。</li></ul><p>2、<b>模式匹配代码生成法</b><br>模式匹配代码生成方法是，把对机器的描述与代码生成的算法分开。也就是建立一个代码生成用的机器描述语言，用以形式地描述目标机的资源、指令及其语义等有关信息。代码生成程序根据这些信息，自动地将中间语言程序翻译成目标机的汇编语言或机器代码。<br><b>方法局限性</b></p><ul><li>需通过形式描述的模式如实地反映机器的特性，这点不容易做到</li><li>进行模式匹配时耗费时间很长</li><li>目标代码的质量不理想</li></ul><p>3、<b>表驱动代码生成法</b><br>表驱动代码生成方法，是模仿从语法描述构造表和表驱动的一种语法分析方法。</p><ul><li>首先，把对目标机的形式化描述进行预加工转换成代码生成表</li><li>然后，用表驱动的代码生成程序，来驱动代码生成表</li><li>最后，把中间语言的内部表示翻译成目标机的汇编代码</li></ul><p><b>方法优点</b>：<br>    容易使用和修改，并且能较容易地为不同的计算机构造适合于它们自己的代码生成程序。<br><b>方法局限性</b>：<br>    它所生成的目标代码的质量，依赖于机器描述的完善程度。<br><b>三种方法比较</b>：</p><ul><li>解释性代码生成法比较容易达到目标代码质量的要求，代码生成算法有效，但可移植性欠缺</li><li>模式匹配代码生成法可达到较好的可移植性，但要生成高质量的目标代码以及高效率的算法，较困难</li><li>表驱动代码生成法能达到很好的可移植性，它实际上是代码生成程序的生成程序，真正实现了代码生成自动化，但方法不够成熟</li></ul><h5 id="自动构造代码生成程序技术："><a href="#自动构造代码生成程序技术：" class="headerlink" title="自动构造代码生成程序技术："></a>自动构造代码生成程序技术：</h5><p><b>基于语法制导技术</b><br>此技术也称为Graham-Glanville方法。它利用类似于上下文无关文法的规则和相应的机器指令模板描述机器操作。当一条生成描述规则与一条波兰式中缀表示子字符串相匹配，且满足有关的语义限制时，将被匹配的部分用相应规则左边的符号替代，同时输出实例化后相应的指令模板。<br>Graham-Glanville 代码生成程序由中间语言变换、模式匹配器和指令生成3部分组成。<br><b>语义制导技术</b><br>此技术也称为属性文法或词缀文法方法。通过使用属性，将语义信息加入代码生成规则中。在代码生成过程中，属性除了传递值之外，还用于控制代码的生成、产生新的属性值以及产生副作用。控制部分通过断言来实现。一条规则是可应用的，当且仅当它与目标字符串语法上相匹配且满足所有的断言条件。</p><h4 id="第十三章-编译程序的构造"><a href="#第十三章-编译程序的构造" class="headerlink" title="第十三章  编译程序的构造"></a>第十三章  编译程序的构造</h4><h5 id="编译程序的构造主要有三条途径："><a href="#编译程序的构造主要有三条途径：" class="headerlink" title="编译程序的构造主要有三条途径："></a>编译程序的构造主要有三条途径：</h5><ul><li>用某种程序语言书写编译程序</li><li>通过LEX、YACC等工具进行自动构造</li><li>通过现有的编译基础设施进行改造和组装</li></ul><h5 id="1-编译程序的书写语言与T型图"><a href="#1-编译程序的书写语言与T型图" class="headerlink" title="1. 编译程序的书写语言与T型图"></a>1. 编译程序的书写语言与T型图</h5><p>一个编译程序涉及到三个方面的语言：即源语言、目标语言和编译程序的书写语言。为了描述方便，通常用T型图来表示。</p><center><img src="https://img-blog.csdnimg.cn/20200211224701873.png"></center><h5 id="2-编译程序的自展技术"><a href="#2-编译程序的自展技术" class="headerlink" title="2. 编译程序的自展技术"></a>2. 编译程序的自展技术</h5><p>自展的思想是先用目标机的汇编语言或机器语言书写源语言的一个子集的编译程序，然后再用这个子集作为书写语言，实现源语言的编译程序。如果把这个过程根据情况分成若干步，像滚雪球一样直到生成预计源语言的编译程序为止，这样的实现方式称为自展技术。</p><h5 id="结合T型图的原则是："><a href="#结合T型图的原则是：" class="headerlink" title="结合T型图的原则是："></a>结合T型图的原则是：</h5><ul><li>下面的T型图的左右上角两个语言分别与上面左右两个T型图的底部语言相同【三个T型图】 </li><li>上面左右两个T型图的左右上角的语言必须分别相同</li></ul><h5 id="交叉编译程序"><a href="#交叉编译程序" class="headerlink" title="交叉编译程序"></a>交叉编译程序</h5><p>   交叉编译就是在一个平台(主机平台)生成另一个平台(目标平台)上的可执行代码。<br>    平台包括两个概念：体系结构和操作系统。同一体系结构可以运行不同的操作系统；同一个操作系统也可以在不同的体系结构上运行。</p><h5 id="需要交叉编译程序的原因："><a href="#需要交叉编译程序的原因：" class="headerlink" title="需要交叉编译程序的原因："></a>需要交叉编译程序的原因：</h5><ul><li>目标平台上不允许或不能够安装所需要的编译程序； </li><li>目标平台上资源匮乏，无法运行所需要的编译程序； </li><li>目标平台还没有建立，没有操作系统。</li></ul><h5 id="编译基础设施"><a href="#编译基础设施" class="headerlink" title="编译基础设施"></a>编译基础设施</h5><p>   编译基础设施是编译程序的开发环境，它提供一系列开发编译程序的策略和工具，支持多种源语言、多目标机的编译技术，以便于人们在具有较高抽象层次的平台上进行编译程序开发和研究工作。</p><h5 id="可重定向编译程序"><a href="#可重定向编译程序" class="headerlink" title="可重定向编译程序"></a>可重定向编译程序</h5><p>   普通的编译程序将源程序翻译成特定目标机的汇编代码或目标代码；可重定向编译程序能够根据不同目标机，生成相应的目标代码。在可重定向编译程序中，将与目标机相关的部分单独编写成不同的模块，根据不同的目标机调用不同的模块。</p><ul><li>可重定向编译程序不是针对特定机器的编译程序用户而言的可重定向。 </li><li>可重定向编译程序不是编译程序的生产器。</li><li>有多个针对不同机型的可选后端。</li></ul><h5 id="支持可重定向编译的关键技术"><a href="#支持可重定向编译的关键技术" class="headerlink" title="支持可重定向编译的关键技术"></a>支持可重定向编译的关键技术</h5><ul><li>中间表示技术 </li><li>机器描述技术 </li><li>代码生成程序的构造技术 </li><li>目标机描述与目标代码生成的接口技术</li></ul><h5 id="常用的可定向编译程序"><a href="#常用的可定向编译程序" class="headerlink" title="常用的可定向编译程序"></a>常用的可定向编译程序</h5><p>常用的可定向编译程序有：GCC和LCC。<br>两者的主要区别：</p><ul><li>在前端和后端数量上。 </li><li>在机器描述的能力上。 </li><li>在产生代码的质量上。</li></ul><h5 id="1-GCC的总体结构："><a href="#1-GCC的总体结构：" class="headerlink" title="1.GCC的总体结构："></a>1.GCC的总体结构：</h5><p>GCC编译系统由与源语言相关的前端、与源语言无关的后端和目标机描述三部分组成。</p><h5 id="窥孔优化方法"><a href="#窥孔优化方法" class="headerlink" title="窥孔优化方法"></a>窥孔优化方法</h5><p>是通过考查一小段目标指令(窥孔)并把这些指令替换为更短更快的一段指令，从而提高目标代码的质量。<br>    所谓“孔”可以看成优化对象中的一个小的活动窗口，孔中的代码根据优化的需要可以连续也可不连续。<br>    窥孔优化的一个特点是，优化后所产生的结果可能给后面的优化提供进一步的机会。 </p><ul><li><p>冗余存取  </p></li><li><p>不可达代码  </p></li><li><p>控制流优化  </p></li><li><p>强度削弱  </p></li><li><p>删除无用操作</p><h3 id="第二部分-思维导图"><a href="#第二部分-思维导图" class="headerlink" title="第二部分 思维导图"></a>第二部分 思维导图</h3><center><img src="https://img-blog.csdnimg.cn/20200211221216400.jpeg"></center></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《一课经济学》—— 只见树木不见森林</title>
      <link href="/2020/01/23/yi-ke-jing-ji-xue-zhi-jian-shu-mu-bu-jian-sen-lin/"/>
      <url>/2020/01/23/yi-ke-jing-ji-xue-zhi-jian-shu-mu-bu-jian-sen-lin/</url>
      
        <content type="html"><![CDATA[<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>亨利 ‧ 赫兹利特 （Henry Hazlitt, 1894-1993）是美国报界元老，著名的经济专栏作家，被誉为“20 世纪最杰出的经济新闻人”。《一课经济学》第一版于1946年推出，那时正值罗斯福新政成效卓著的年代。第二版于1979年推出，该书所阐述的政府干预经济的教训被一一应验。1992年，98高龄的作者黑兹利特还写了一篇&lt;我如何写就一课经济学&gt;的文章， 而当年， 该书英文版销量已经突破100万册。2009年， 黑兹利特入选自由市场名人堂。 </p><hr><h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p> 全书包括三大部分26章， 以一堂课的形式， 深入浅出地讨论了涉及现实社会经济生活的诸多问题，例如公共建设工程、税收、政府信贷、就业与失业、关税、最低工资、进出口、价格体系、房租管制、工会、最低工资、利润、储蓄、通货膨胀等，以最简单的阐述方式，向读者逐次解读这些复杂的经济问题背后的真相、什么样的经济政策会造成什么样的结果。同时， 针对那些广为流传的经济理论或学说中存在的谬误，黑兹利特进行了毫不留情的揭露、批驳，从而帮助社会大众更了解经济世界运作的法则。本书以浅显的文字取代了高深的经济学术语与复杂的公式，为经济学入门提供了 一种最为迅捷和有效的方式。</p><hr><h1 id="博主读后感"><a href="#博主读后感" class="headerlink" title="博主读后感"></a>博主读后感</h1><p>作者无疑是奥地利经济学派的支持者，在整本书中无处不有着自由市场至上的氛围，事实上作者黑兹利特也曾有指出他之所以撰写《一课经济学》的动机就是为了点破凯恩斯的《通论》中试图通过政府干涉来满足某种目的的充满虚妄的谬见。在初步通读全篇后，率先也是最容易令读者感觉到的是书中充斥着作者对现行政府的强烈不满，并让读者对这本书本身价值产生怀疑，认为这不过是作者用来抨击敌对阵营的一个工具，但如果尝试细细品读下去，便会发现这强烈不满背后其实隐含着市场经济基本规律的科学解读。当我们为以特定的群体谋划政策时，往往看起来是极其正确的行为，在我们将自身眼光进一步放得更长远后，才会发现这种行为实际似是而非，甚至可能促使其朝着相反的方向发展，在政策规划中只见树木不见森林。在作者的提倡中，市场经济以生产成本、价格和利润三者间不断变动的相互关系为基础，并通过它们来科学并根本得解决劳力和资本的分配方式，任何人为的干涉都可能使结果适得其反，得不偿失。在肯定作者经济理论的同时，另一方面我却有其他方面存在质疑，即作者致力于提倡的自由市场至上的主题其实本身是带有一定虚幻色彩的，因为经济上进行财富敲诈永远比自由交换要更加暴利，在一个国家具体的经济制度的保障下，国家内各个行业可以以一种相对公平的方式进行生产交换，但在当今缺乏有效的国家贸易监督机制的环境下，国家之间的相互贸易便不得不需要勾心斗角小心提防，每个国家都试图通过保护本国产业等措施来减少对他国的依赖，以免被迫接受经济敲诈、政治威胁。这些种种行为，无疑难以形成真正的自由市场机制，至于这一切的解决，则需要更加漫长的时间来等待。当经济敲诈的大棒在空中不断摇摆时，每一个国家都不得不谨小慎微。</p><hr><h1 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h1><h5 id="一、社区里的小孩砸破橱窗，促进资金流向玻璃店，而玻璃店的消费又促进资金流向另外商家，依次迭代，最终形成就业岗位的增加，即就业机会的增涨"><a href="#一、社区里的小孩砸破橱窗，促进资金流向玻璃店，而玻璃店的消费又促进资金流向另外商家，依次迭代，最终形成就业岗位的增加，即就业机会的增涨" class="headerlink" title="一、社区里的小孩砸破橱窗，促进资金流向玻璃店，而玻璃店的消费又促进资金流向另外商家，依次迭代，最终形成就业岗位的增加，即就业机会的增涨"></a>一、社区里的小孩砸破橱窗，促进资金流向玻璃店，而玻璃店的消费又促进资金流向另外商家，依次迭代，最终形成就业岗位的增加，即就业机会的增涨</h5><p>整个社会的就业机会并不会因为小孩砸破橱窗促进消费的行为而有所改变，因为店主用于更换橱窗的货币本来是由他用于购买其他物品，现在只能将这些货币用于更新原有的橱窗，本来是由店主通过将这些货币以消费的形式促进就业，现在只是变成由玻璃店进行消费行为，因此更新橱窗的货币消费所带来的的就业机会在小孩砸破橱窗的前后都未发生改变。<br>反而若玻璃店是本社区的一名的话，由于店长因为更换了本社区玻璃店的玻璃，从而失去购买外面商品的可能，故整个社区的财富总量却是可能比原本应该达到的要少了。</p><h5 id="二、战争的长期破坏，人们基本需求的不断累积，导致总需求暴涨，待战争结束后将短时间促进国家达到庞大的经济总量，实现经济繁荣"><a href="#二、战争的长期破坏，人们基本需求的不断累积，导致总需求暴涨，待战争结束后将短时间促进国家达到庞大的经济总量，实现经济繁荣" class="headerlink" title="二、战争的长期破坏，人们基本需求的不断累积，导致总需求暴涨，待战争结束后将短时间促进国家达到庞大的经济总量，实现经济繁荣"></a>二、战争的长期破坏，人们基本需求的不断累积，导致总需求暴涨，待战争结束后将短时间促进国家达到庞大的经济总量，实现经济繁荣</h5><p>首先战争的长期破坏产生的结果是需要的积累而非是对需求，需求是依购买力为基础的，然而战争的长期破坏过程正是财富净损失的过程，人们因战争的推进而愈发得贫穷。其次战后人们的总需求确实会有一定程度的增加，但这是因为战时政策所导致的通货膨胀的原因（更具体在后续章节中独立成章），而因为战后人们对特定物品（如安居物品）的需求更加迫切，使人们对其他物品需求优先转移到该类商品，导致这些物品需求实现暴涨，从而造成社会的总需求暴涨的假象。最后战后快速形成的经济繁荣实际上有一部分也是因为战时通货膨胀导致的假象，通过通货膨胀使货币贬值，人们战后持有比以往更多的货币，但实际上其购买力可能并不如原来。而经济繁荣的另外一部分则是因为政府战后稳定的经济政策、战争时期的科技进步形成的生产力净增和久经颠簸的人们为美好生活而更加的勤劳奋斗。战争带来的结果更多的是改变了人们在战后的努力方向、打破了以往各行各业原有的平衡并重塑了工业的结构。</p><h5 id="三、通过政府支出建设公共工程是解决失业问题的万灵药"><a href="#三、通过政府支出建设公共工程是解决失业问题的万灵药" class="headerlink" title="三、通过政府支出建设公共工程是解决失业问题的万灵药"></a>三、通过政府支出建设公共工程是解决失业问题的万灵药</h5><p>在公共工程建设中，雇佣建设工人，可以缓解失业问题。但若建设完毕的公共工程最终无法满足民众的迫切需要或是无法成为民众创造新财富的工具，那么从长远来看反而会使更多的原本会出现的就业机会消失，因为政府的所有支出最终都是要靠纳税人来买单，建设公共工程的资本本来可以让民众在正常的交换经济中消费流通并创造更多健康稳定的职业岗位，此时却成为了一个为了暂时提供工作机会而耗资巨大毫无价值的面子工程，短时的即时利益的获得却以未来更加严峻的失业问题来承担。</p><h5 id="四、通过增加税收实现资本集中，以更加强力的政府支出来创造出更大的财富"><a href="#四、通过增加税收实现资本集中，以更加强力的政府支出来创造出更大的财富" class="headerlink" title="四、通过增加税收实现资本集中，以更加强力的政府支出来创造出更大的财富"></a>四、通过增加税收实现资本集中，以更加强力的政府支出来创造出更大的财富</h5><p>尽管每个人所承受的所得税比例不尽相同，但赋税最终都影响交税人的行为与生产动力，尤其是当赋税相对过高时。因为损失一块钱就是整整一块而赚到一块钱则还要减去纳税金额，高赋税会导致更多人的打消开创新事业的念头或扩张风险最低的业务失去更多的就业机会或资本积累速度减慢，形成新设备和新工艺的应用放慢，从而消费者买不到更好更便宜的产品，实际工资达不到应用的水平，社会生产达不到应有的水平，从而使生产的财富变相的减少，而通过政府支出创造的财富又因为题三的缘故而效益减少，最终结果则是整个社会的财富变相的减少。</p><h5 id="五、在已存在私人信贷机构的情况下，政府实施信用贷款政策将有助于进一步社会生产"><a href="#五、在已存在私人信贷机构的情况下，政府实施信用贷款政策将有助于进一步社会生产" class="headerlink" title="五、在已存在私人信贷机构的情况下，政府实施信用贷款政策将有助于进一步社会生产"></a>五、在已存在私人信贷机构的情况下，政府实施信用贷款政策将有助于进一步社会生产</h5><p>抱着“与其让他吃救济金，不如贷款让他为社会做贡献”想法提议政府实施信用贷款政策是幼稚的，因为所有的信贷都是债务，实施信贷方案其实是加重债务负担的代称，更何况现在已经存在私人信贷机构代理效能的作用。私人信贷和政府信贷存在根本性区别，前者会预先审查投资计划，仔细衡量获利的预期和亏损，而后者则因为政策宽松而面临更多私人信贷认为风险过大的人群的贷款，从而发生政府信贷呆账多的现象。同时私人贷款机构投资人本身就是市场机制里面选择出来的人，本身便符合市场规律，而政府信贷却更可能出现以权谋私的腐败可能。由于社会原始资本有限，通过政府信贷的方式更可能使原本应该通过私人信贷获得资本更好效率的人反而因为市场竞争而超出预算，难以分配到资源。政府采取信贷只看到特殊的人群，而忽视了其他群体的损失和整个社会的净损失。政府信贷通过宽松的贷款政策，暂时过度刺激市场，需求大于供给，使得商品价格上升，甚至可能误导该行业盲目高成本的扩张，鼓励了不当的投资，浪费资本并减少生产几率。于1932年执行的罗斯福新政利用赋税通过信贷使得成功的公司去扶持失败的公司来暂时激活经济，其实质是强迫全体纳税人去承担恶性风险与补偿损失。    </p><h5 id="六、科技进步带来的新机器将导致更多的工人失业"><a href="#六、科技进步带来的新机器将导致更多的工人失业" class="headerlink" title="六、科技进步带来的新机器将导致更多的工人失业"></a>六、科技进步带来的新机器将导致更多的工人失业</h5><p>每当出现失业潮时便会归责于新机器的出现，机器总体上导致失业的谬论成为许多组织开展游行运动的理论基础，然而忘记历史就意味着重蹈覆辙。事实上1760年发明棉纺机时已有7900人从事棉纺织品的生产，在棉纺机发明27年后实际从事棉纺织业的人数却达到了32W人，增加了4400%。而根据柏林统计局估计，1887年在全时间投入使用的蒸汽机的动力总和，大约相当于两亿匹马的力量，相当于约10亿人的劳动力，至少是当时全球劳动人口综合的三倍，但这并没有引发剧烈的失业危机，机器并未真正取代过人力，相反在当时全球人口已经是18世纪中叶工业革命形成规模前的4倍，如果没有近现代机器，这个世界根本无法养活那么多人。当一个商家通过采购某新机器抵消一部分员工的产量时，必然为了成本而进行裁员，但当过了一段时间后所获取的累积利润抵消之前购买新机器的成本之后，商家变会拥有比以往更多的购买力，通过消费，要么扩大本公司经营规模并刺激机器制造商随之增大规模实现增加就业，要么使资本流向其他行业实现就业机会增加。待其他资本家发现该行业有利可图后，外面的资本将源源不断进入促使整个行业实现平均利润，此时整个行业的节约将开始正式向商品购买者进行转移，也就是反馈给消费者，即实现商品价格的降低。在商品价格降低后，要么通过弹性需求而刺激消费，消费者会在该商品的总花费会比以往的多，从而促进整个行业的就业机会的增加，要么消费者并不会因为价格下降而大肆购买，那么消费者在购买该商品的货币也将通过消费去增加其他行业的就业。而诸如电话、空调等一部分机器的创造事实上并不会挤占传统工人的工作机会，因此在整个过程来看，科技进步带来的新机器不会导致更多的工人失业，反而就业机会会有所增加。古典经济学家的可贵之处在于它们寻求特定经济政策的续发后果，关心其在长期内对公众整体的影响，但它的不足之处在于过分注重长期和全局，反而无视了短期和局部的效应。老雇主在旧机器或旧工艺流程上面的投资突然之间落伍过时，而雇员花了大半生所学习和掌握的某种特殊技能变成市场不再需要的技能，他对自身与旧技能的投资也白费了。这类的经历几乎是所有工业和经济进步都必将带来的个人悲剧，但如何补偿他应该超过本章主题，但需要一提的是，只关注特定群体所遭受的即时后果反而可能会执行倒行逆施的荒谬政策。</p><h5 id="七、可做的工作量是有限的，采取缩短每周工时和提高工薪率的手段来减缓严重的失业问题"><a href="#七、可做的工作量是有限的，采取缩短每周工时和提高工薪率的手段来减缓严重的失业问题" class="headerlink" title="七、可做的工作量是有限的，采取缩短每周工时和提高工薪率的手段来减缓严重的失业问题"></a>七、可做的工作量是有限的，采取缩短每周工时和提高工薪率的手段来减缓严重的失业问题</h5><p>单方面认为这个世界可做的工作是有限的，而采取缩短员工每周工时和提高工薪率的政策是一种谬误的行为。只要还有人的需要或愿望还没有获得满足，世界上可做的事情就不会有止境，更不会是有限的，其次缩短每周工时和提高工薪率的手段可能只会带来更加严重的失业问题。在只采取缩短每周工时的情况下，被迫用两个人来做本来一个人的工作，的确会多给其中一个人就业机会，但这样实际结果是原来的雇员变相得对原来的失业人员进行补贴，因为这牺牲了老员工的工作时间和正常工资，通过对老员工的牺牲来实现更多的就业。同时虽然雇佣的工人多了，但每人工作的时间将减少，总工时本质上并无增加，生产也因此不可能有任何显著的增加，工资总额和整体购买了也不会扩大。而进一步通过增加时薪的政策使老员工能得到原先的工资水平，但这样便增加了雇主的生产成本，一旦超出生产成本、价格和利润关系状态所能忍受的程度，那些效率更差的公司和员工都将被淘汰出局，失业问题反而变得更加严重，同时伴随整个行业的生产将缩减，供应减少，产品价格上涨，消费者用同样的工资能买的东西变得更少，虽然另外一方面因为失业率回升会削弱消费需求，因此供求关系的具体情况，最终产品价格是涨是跌还需要根据当时的货币政策决定，比如当政府采用通货膨胀的手段来刺激需求，那么随着工资的上涨，产品价格便会随之增加，虽然此时消费者的实际购买力可能还不如以往。</p><h5 id="八、国家遣散高达数百万军人的举措将导致严重的就业问题"><a href="#八、国家遣散高达数百万军人的举措将导致严重的就业问题" class="headerlink" title="八、国家遣散高达数百万军人的举措将导致严重的就业问题"></a>八、国家遣散高达数百万军人的举措将导致严重的就业问题</h5><p>当国家决定遣散数百万军人时，会有人担心没有足够的购买力来创造安置这些复员军人的工作岗位，从而担忧社会失业问题的爆发。确实，当数以百万计的人突然间被遣散，要使私营工商业重新吸纳他们，表面看上去是需要相当一段时间的，但是令人吃惊的是事实上这过程完成非常的迅速。政府遣散军队，将减少军费开支，那么纳税人将可以拥有更多的资金去购买更多的东西，从而增加需求，提供就业机会。同时以往依赖纳税人供养的军人转变成自食其力的平民，纳税人可以用多余的货币支付复员转业人员，换取等值的产品或服务，使得国民生产总值增加，每个人的财富都有所增加。再将这原理延伸到由纳税人供养的公务员、消防队员等其他职业，裁减那些不再被社会真正需要的多余的人数，也并不会因此发生失业问题，当然，社会所必要数量的警察、消防队员等虽然未直接参与生产，但都履行着与私企员工同等重要的生产性职责，因为正由于他们所从事的服务，私人企业才得以在法制、秩序、自由和和平的环境下运作。</p><h5 id="九、实现国家全面就业，就可以使社会生产达到最大化"><a href="#九、实现国家全面就业，就可以使社会生产达到最大化" class="headerlink" title="九、实现国家全面就业，就可以使社会生产达到最大化"></a>九、实现国家全面就业，就可以使社会生产达到最大化</h5><p>任何国家的经济目标，与任何个人的经济目标相同，在于以最小的努力取得最大的结果。追求生产最大化才是我们的真正目标，值得肯定的是，实现目标就必然需要实现全面就业，但是实现全面就业不一定可以达到充分生产的目标。当全面就业一旦偏离充分生产这个目标，并把自身当作目标的话，恐怕没有什么东西比它更容易实现的了，如希特勒推动庞大的扩军备战计划时便实现了全面就业。一个国家的文明进步体现在，在追寻生产最大化就业机会增加和人口数量随之增加的过程中，相对总人数的就业人口比例的减少上，而不是体现在增加上，因为当国家变得日益富裕时，才使我们得以禁止使用童工，得以实现老有所养，使成千上万的妇女不再需要劳累工作。</p><h5 id="十、通过提高关税，保护民族产业，使他们为本国创造更多的就业机会、增加国家财富进而提高人们工资水平"><a href="#十、通过提高关税，保护民族产业，使他们为本国创造更多的就业机会、增加国家财富进而提高人们工资水平" class="headerlink" title="十、通过提高关税，保护民族产业，使他们为本国创造更多的就业机会、增加国家财富进而提高人们工资水平"></a>十、通过提高关税，保护民族产业，使他们为本国创造更多的就业机会、增加国家财富进而提高人们工资水平</h5><p>自由贸易可以被视为专业分工的一个方面，在自由贸易经济中，人们通常为了迎合自身的最大利益，总是集中生产精力于与其他人相比而存在着相对优势的地方，用自己生产的产品的一部分或自己产品换来的货币的一部分去购买他们所需要的其他东西，而国与国之间也应该遵循这个市场规律，然而对于关税的问题上，人们往往仅仅考虑了关税对特殊群体产生的立即影响，而忽略了考察关税对整个社会的长远影响。关税的上调，抬高了某种商品在我国的售价，使得本国厂商进入该行业有利可图，一些原本并不受雇于该产业的人也会改入这一行，消费者将被迫补贴这个产业，消费能力下降，使得其他行业不得不萎缩，因此从总体而言整个国家的从业人数或就业机会并无任何净增长。新关税并不会提高国人的工资水平，不存在由于关税带来的人们工资水平普遍增涨，因为这里并不存在就业数量的净增长，也没有对商品需求的净增长和劳动生产率的净增长，反而由于人为设立壁垒，造成美国的劳动力、资本和土地，从相对效率较高的产业，转移到相对效率较低的产业上，关税保护的结果反而是降低了劳动生产率，整个国家承受了净损失，关税降低了国内的工资水平，尽管受保护产业的工资水平可能比不受关税保护时要高，但若把所有产业都考虑在内的话，和本来应有的整体水平相比较，关税一定会降低实际工资水平。此外由于设立关税，导致国与国之间货物传输效率下降，以往国家在传输效率中的投资价值也将随之受到影响，究其本质而言，关税的上调是以所有消费者的代价来使只有一部分生产者获益。而关税的下调，虽然可能导致国内制造商的破产，大量隶属工人无业可干，但对于消费者而言原先的商品变得更加便宜，节省下来的货币可以去购买其他东西促进本国其他行业的就业，而购买进口商品的消费将被单独促进外国行业的就业，贸易国商家也由此而获得本国货币，并将它们去购买本国产品进行消费，尽管原产业就业的人数减少，但更多的人将被本国其他行业所雇佣，且是更有效率的雇佣，我国和外国的就业率都并未下降，反而两国的整体生产却得到更大的有益增加，因为各国劳动力资源都充分流向了各国优势产业，不必继续蜗居于缺乏效率或效果差的产业里，两国的消费者都得到了实惠，因为他们都可以买到最便宜的产品。</p><h5 id="十一、对外开展经济援助将拉动国家出口，实现国家更加富裕"><a href="#十一、对外开展经济援助将拉动国家出口，实现国家更加富裕" class="headerlink" title="十一、对外开展经济援助将拉动国家出口，实现国家更加富裕"></a>十一、对外开展经济援助将拉动国家出口，实现国家更加富裕</h5><p>所有国家对出口都怀有病态的渴求，而这仅次于各国对进口怀有的病态的恐惧，但这从逻辑上是非常矛盾的，因为从长期来看，进口与出口必然是相等的。出口与进口相互补偿，是因为在出口越多的情况下，获得贸易国的货币就越多，为了得到补偿，那么我们的进口也必然会更多，而同样的，在进口越多的情况下，贸易国获得我国的货币也会越多，因此必然会促使我国出口更多。对外贸易从本质上来讲并无任何神秘之处，因为它和国内贸易并无本质上的差异。每个人都必须出卖隶属自身的商品，才能获得购买力，才有货币去买其他人的商品，只不过我们大多数人卖的是自身的劳动力商品。在国际金本位制度下，进出口贸易差额可以用交运黄金来结算，但也可以用交运棉花、钢铁等普通商品来结算，但黄金被认为是终极国际货币，黄金的需求几乎可以无限扩张，因为各国不像限制其他任何商品进口那样限制黄金的输入。为了达到增加出口的目的，认为政府应当向国外提供大量贷款，而无需考虑这些贷款有多少能收的回来，因为通过国外贷款的手段已经强劲地拉动了我国出口而使国家获得利益，这个想法是不正确的。从长远来看，如果贷款出现大量呆账，对用于购买我国产品的贷款，外国买主的赖账每多一块，国内卖主便会损失一块，国内消费能力水平也随之下降，因此出口业繁荣的背后却是依靠内销为主的行业蒙受损失为代价。长期下来，二者虽可能得失大体相当，但更大概率的是许多从事出口的企业净收益反而会受损，因为一个国家不可能靠无偿的商品输出而变得富有，因为这样只会使国家变得更穷。综上所述，政府企图对“对外经济援助”计划的实施，即通过盲目向其他政府直接赠予数十亿美元进而拉动本国出口的计划是非常愚蠢的，因为它只考虑到个别出口商可能从国家的损失中获利，而忽略了长期情况下对整个社会整体的影响。对外贸易对任何国家都有利益，最终并不在其出口，而是在于其进口。是进口，让一个国家的消费者能以国内更便宜的价格，买到国外的商品；是进口，让他们买到国内制造商不生产的商品。总的来说，一个国家需要出口的真正理由，是赚钱来支付其进口。</p><h5 id="十二、通过等位价格的政策来使农民富裕，进而促进经济发展"><a href="#十二、通过等位价格的政策来使农民富裕，进而促进经济发展" class="headerlink" title="十二、通过等位价格的政策来使农民富裕，进而促进经济发展"></a>十二、通过等位价格的政策来使农民富裕，进而促进经济发展</h5><p>正如关税的历史所提醒的那样，特殊利益，总能驱使受惠的人处心积虑，去说服群众为何他们应该得到这种待遇，而农产品等位价格政策的历史，正如上述过程所写就的。等位价格，指的是政府通过一些手段调整农产品的价格使得它具有过去一定时期的农产品价格相同的购买力。实施等位价格政策的动机是认为在所有产业中，农业最基本、最重要，只有农民富裕了，其他人的富裕才有着落，要是农民缺乏购买力，买不起工业产品，那么工商业就会萎缩，经济就会崩溃。然而就算过去一段时间的价格关系相当正常，但又有什么理由可以让我们无视此后数十年供需关系的变化并将这种关系继续维持下去。我们需要注意到的是，农民所增加的购买力，正是城市工人因为政策所失去的，因此工业产品在农村地区的销售额增加多少，在城市地区便减低多少，整体而言，工业行业在总体上并没有捞到任何好处。然而事实上事情并未到此结束，这种政策的结果非但没有带来净收益，反而造成了净损失，等位价格政策的政府干预不仅仅在于造成购买力的转移，同时也体现在限制农产品的产量进而控制农产品价格上涨，具体如何限制，可能是人为损坏、也可能蓄意焚烧，而这正是一种对财富的破坏。虽然在实际经济贸易中对工业品进行保护性税的同时，会形成国家进口减少，贸易国因为所持有的我国货币量变少，导致我国出口减少等一系列转换过程，后果是除了工业品受阻外还有农产品的出口量也将下滑，甚至这种保护性税的政策会引起贸易国对我国农产品征收报复性关税，最终造成农民造成无辜的伤害，但是若因此实施等位价格政策保护农民，那么城市工人反而会惨遭工业品和农产品联合价格上升，形成二次剥削，城市工人将变相地对两产业进行补贴，加重城市工人群体的生活负担。</p><h5 id="十三、通过限制资本和补贴行业的举措来避免经济危机"><a href="#十三、通过限制资本和补贴行业的举措来避免经济危机" class="headerlink" title="十三、通过限制资本和补贴行业的举措来避免经济危机"></a>十三、通过限制资本和补贴行业的举措来避免经济危机</h5><p>如果新资本和新劳工被排斥在某产业之外，以强制的手段剥夺了资本和劳动力自由选择的权利，逼迫投资人将钱投向看来回报率还不如某产业的其他地方，迫使劳工投身于工资更低、就业前景更为暗淡的行业，而那些行业还不如所谓有毛病的行业，从整体上，意味着资本和劳工的运用效率都不如允许它们自由选择时的水准，因此这也意味这生产的下降，生活水平的降低。实施限制性政策的结果是，某产业内部的工资和资本回报率可能会更高，但被限制的其他产业的工资和资本回报率将被迫下降，低于本来应有的水平。简而言之就是用被限制产业的损<br>失为代价，换来其他产业得到好处。如果某产业与其他产业相比确实过度拥挤，那根本不需要任何强制立法，去排斥新资本或新劳工进入，因为新资本不会抢着挤进先让要垮掉的行业，投资人也不会贸然踏进风险最大、回报率最低的行业，劳工如果有更多的选择，同样不会进入工资最低、工作最不稳定的行业。如果采用补贴的形式扶助某产业，其后果也差不多，因为这不过是将其他行业和消费者的财富转移到某产业中。因为用于支持某产业的税款正是其他行业和消费者所提供的，而更进一步，由于消费者需要将一部分税款支持某产业，那么它必将导致消费群体的消费能力的下降，从而影响其他产业的发展规模。事实上，因为资本和劳工的选择被人为干涉，而流向可能效率较差的产业，因此原本应该创造出来的财富减少了，进而导致整个社会人均生活水平的下降。这便是通过补贴某产业的提议在逻辑上的必然发展，某产业需要补贴正代表着它在市场的竞争力不行，强行输血只会造成生产损失。</p><h5 id="十四、资本家总是受所谓利润的激励驱动生产，致使部分行业规模缩水甚至衰亡，最终导致物资匮乏"><a href="#十四、资本家总是受所谓利润的激励驱动生产，致使部分行业规模缩水甚至衰亡，最终导致物资匮乏" class="headerlink" title="十四、资本家总是受所谓利润的激励驱动生产，致使部分行业规模缩水甚至衰亡，最终导致物资匮乏"></a>十四、资本家总是受所谓利润的激励驱动生产，致使部分行业规模缩水甚至衰亡，最终导致物资匮乏</h5><p>某项工作做得多，往往不过是以牺牲其他所有的工作为代价得到的，在一个错综复杂的社会中，人们的需要和要求以及轻重缓急千差万别，而解决劳力和资本的使用方式却是可以通过价格体系，也就是通过生产成本、价格和利润三者间不断变动的相互关系来调节的。价格由供需关系决定，但也会反过来影响供需关系。当人们需求增加时，价格变会上升从而产生比以往更大的利润，刺激更多的资本流入该行业实现生产扩大，当供应增多时又会导致价格下降、边际利润下降至整个社会的平均利润水平，当利润下降带来的资本激励减弱同时消费者需求减少时，边际生产者即效率最低或成本最高的生产者便会被淘汰出局，致使供给相对减少。一方面，需求取决于人们想要拥有某种商品的渴求程度，以及他们愿意支付多少货币来换取，而另一方面供给则一部分取决于生产成本，但生产成本并不能直接决定商品的价值，因为商品的价值是取决于现在发生的供需关系，制造商会对于商品未来生产成本和市场价位的预期来决定商品未来的生产数量，从而影响未来的供给，从而使商品价格和生产成本不断形成接近一致的趋势。谴责价格体系导致了物资的匮乏，为什么他们只受自己利润的支配，这些问题和结论主要源于孤立地观察一个产业，只见树木不见深林的错误看法。因为人们除了当前着眼的商品外，还有其它更多种类的商品需要去生产，而任何时候，生产要素都是有限的，原本用于其它产业劳工、土地和资本转移到某个产业时，那个产业才有能力扩张，因此当经济处于均衡状态时，某个产业的扩展总是以其它产业牺牲为代价，同时在一增一缩下社会的总生产其实并没有缩减，反而因为受到巨大需求的缘故而有所上涨。可见，为了一个有活力的经济的健康发展，实现总生产上升的目标，我们应当放手让需求不断减少的产业不断衰败任其消亡，使其腾出更多的空间交给正在成长的行业，而价格、利润和成本之间的相互关系便会自动将复杂难解的问题迎刃而解。</p><h5 id="十五、投机商的存在导致农民蒙受损失，通过农业限产政策将有助于社会公平"><a href="#十五、投机商的存在导致农民蒙受损失，通过农业限产政策将有助于社会公平" class="headerlink" title="十五、投机商的存在导致农民蒙受损失，通过农业限产政策将有助于社会公平"></a>十五、投机商的存在导致农民蒙受损失，通过农业限产政策将有助于社会公平</h5><p>农民的谷物都集中在收获时节上市出售，而这正好是一年中农产品价格最低的时候，投机商乘机买进囤积，等到青黄不接的时候再高价倒卖。然而相反的是，倍受谴责的投机商并不是农民的敌人，他们对于农民的最高福利至关重要，因为农产品价格波动的风险必须要有人来承担。一般而言投机商运作越成功，他们对农民的帮助就越大，而这正是由于投机商们能够准确地预测未来价格的能力，他们预测未来价格越准确，价格波动就会少几分剧烈。而且即使大多数农民不得不在收获时节上把全部农产品出售，但那时的售价也不一定低于其它季节，因为会有投机商在那段时节集中收购农产品，直到价格上升到他们认为有可能在未来甩卖时无利可图的地步。而在另一方面，因为投机商会在未来认为存在利润时的时候再次出售这批商品，而在认为存在亏损的时再次囤积起来，其带来的结果是使全年农产品的价格趋于稳定，达到稳定物价的效果。正因为有专业投机商承担了这些风险，农民和粮食加工者才得以免除风险，所以在正常的情况下，当投机商做的很出色时，农民和粮食加工业者他们的利润主要取决于本身的生产技能和勤劳与否，而与市场的波动无关。更有意思的是，收获季节后的谷物价格每月的涨幅还不足以抵偿每月的仓储费用，事实上投机商还在一定程度上补贴了农民，当然这并非投机商本愿，只是为了对投资美好愿景的博弈行为，因为他们相信通过运作能够获得更多的利润。而为了保障农民的利益而实施限产政策，实现农产品价格的上涨，而这种行为却会导致更大问题。执行限产意味着世界总产出的人为削减，意味着全球消费者能够享用的农产品数量相对变少，世界的总财富也因此与本应该达到的水平而变少，人们也将被迫支付更高的价格购买本应该更低的农产品，造成总体消费能力的下降，其他行业规模将削减，失业问题将更加严峻。同时这种政策也意味着本来有高效率的生产者不得不减产，而本来效率过低应该被市场淘汰的生产者却得以生存，并占用所需的必要生产要素，如土地、人工和资本等，使其难以继续流向更加有效的其他行业，最终导致资源的变相浪费，社会生产率下降。在另外一方面，通过限产政策带来的农民购买力的上升，其本质不过是消费者的购买力下降而换来的，从整个社会来看，总购买力并没有增加。</p><h5 id="十六、采取限价机制，再搭配配给或补贴的政策，可以使消费者得到利好，而不损害其他人"><a href="#十六、采取限价机制，再搭配配给或补贴的政策，可以使消费者得到利好，而不损害其他人" class="headerlink" title="十六、采取限价机制，再搭配配给或补贴的政策，可以使消费者得到利好，而不损害其他人"></a>十六、采取限价机制，再搭配配给或补贴的政策，可以使消费者得到利好，而不损害其他人</h5><p>当商品价格被人为限制在它的正常市场价位之下时，受控商品的需求将增加而供给则会减少，但此时该商品的生产却遭到了阻碍，因为降价使商品利润下降，甚至没有利润，导致边际生产者被迫出局，生产效率变低，甚至出现受控商品出现短缺现象。要么进一步采用配给制度，即每位消费者无论多么富有都只能得到一定限额的配给，而一旦这么做就意味着当前政府采取的是双重价格体系或双重货币体系，因为在这个体系之中，消费者必须配有货币和一定额度的票券共同进行消费。换句话说，政府限价市场试图通过配给，来起到自由市场中货币起到的部分作用，之所以是部分，是因为配给并无法像货币消费那样刺激供给。为了保证受控商品实现持续供给，政府可能还会扩大管制受控商品的生产成本，比如进一步时受控商品的原材料执行限价，甚至达到全面的价格管制，工资将必不可免得像物价一样被强制压低，而劳动力也必须像原材料那样被强制纳入配给，破坏自由市场经济，最终形成完全专制性的经济。要么进一步采用提供补贴的方式来维持生产者利润，进而保证受控商品持续供给。值得注意的是，尽管补贴表面上是提供给生产者，但真正获得补贴的却是消费者，因为生产者得到补贴后其利润并没有比进行限价政策之前要变多，而消费者却以以往很少的货币购买到了同样的商品。至于到底是哪个群体间接补贴了消费者，这取决于政府征税的政策，可能是自己补贴自己，也可能是其他未受限行业进行补贴。总体而言，价格管制往往能在短期内显现出效果，甚至在一段时间内运作得很好，但实施的时间越长，其运作难度就越大，因为为了保持受控商品供应，往往带来的是与之相关生产要素的短缺，同时伴随不健康的法定限定市场的逐渐破坏，国内黑市力量也将越来越大，甚至发生取代法定限价市场的可能，造成国家经济腐败不堪。事实上，真正导致物价上涨的原因是商品匮乏或货币过剩，并不是价格的问题，相反通过限价反而会加剧商品的短缺。另外通过提高工资和保持物价不变的政策提议，只会将盈利能力最差而非效率最差的公司淘汰出局，进而导致某种满足某种需求的商品产量减少甚至停产，造成不必要的失业和生活水平下降。政府一心顾及公众作为消费者的眼前利益，而忽略了生产者的利益。 </p><h5 id="十七、租金管制的执行可以减缓低收入群体租房的困境"><a href="#十七、租金管制的执行可以减缓低收入群体租房的困境" class="headerlink" title="十七、租金管制的执行可以减缓低收入群体租房的困境"></a>十七、租金管制的执行可以减缓低收入群体租房的困境</h5><p>政府对院宅和公寓房租的管制，是限价管制的一种特殊形式。从实质上将其主要后果与一般的物价管制也是相同的，但仍有几点需要特别考虑的地方。由于房屋供应缺乏弹性需求，因此无论租金被提高到怎样的水平，住房短缺都不可能得到立即补偿，因此有人认为通过禁止提高房租，政府可以保护租户不被大肆剥削，也不会对业主造成什么实质的伤害，也不会打消建造新房屋的积极性，但实际上并非如此。如果我们允许房东提高租金，来反应出真实的供求关系的话，那么每一个租户都会通过节省租用面积来达到经济合算，使相同数量的住房，可以供更多的人居住。然而如果我们实施房租管制的话，其实际上是变相地鼓励居住面积使用上的浪费，看似有利于租房客的全体，实际上反而增加了四处寻房的合租人。而房租管制持续的时间越长，其影响就会越恶劣，因为房租获得的利润难以激活房东重新搭建新楼的欲望并提供足够的资本来投入新的建设，从而导致新住房的供应受到阻碍。同时因为利润过低的原因，房东甚至不会对出租的建筑进行必要的维修。而通过进一步采取取消“高档”住宅的房租管制来激活供应，则产生效果反而有所相反，因为高档住宅的房东得到更多的鼓励和更好的回报，促使房东对高档住宅的维修和改造，并让更多拥有足够资本的人去建设高档住宅，其最终结果是对于低收入群体而言，其住房质量将持续恶化，而可租住区域并没有什么增加，同时伴随着人口逐年增长的背景下，低收入住宅情况的将会越来越恶化。当情况恶化到一定程度时，即出租住宅甚至还需要倒赔时，房东甚至可能直接抛弃房产，而这时以不动财产为根据的赋税也将持续萎缩，从而可能造成消费者更多的赋税负担。更加值得注意的是，越当执行房租管制越是背离现实，越不公平时，反而更加难以取消，因为以往习惯了越低的租金的租客越不能容忍一丝的房租上升。</p><h5 id="十八、颁布某行业最低工资法来提高工资"><a href="#十八、颁布某行业最低工资法来提高工资" class="headerlink" title="十八、颁布某行业最低工资法来提高工资"></a>十八、颁布某行业最低工资法来提高工资</h5><p>通过颁布某行业最低工资法来提高工资，其带来的后果是政府通过手段提高商品价格带来的后果类似，工资本身就是一种劳动力的价格。然而应当明确的一点是，最低工资法只是克服低工资弊端的一个有限的武器，而且随涉及的群众越多、工资涨幅越大，其更是弊大于利。当人为地调高某行业全体工资后，由于该行业不能通过提高产品价格来保持利润，因为增加价格可能意味着需求向其他替代品进行转移，因此当企业员工的劳动价值不足以达到法定的最低工资时，他很可能从原本还有一些工资生活的人瞬间变成失业人员，也就是说，最低工资法的本质是以一部分人群直接失业、社会生产量下降为代价，换来更多的工资涨幅。而对于带来的失业问题，如果进行失业救济金来维持其正常生活，不可避免的是劳工通过勤劳与汗水争取到的实际薪水变成了到手薪水与救济金之间的差额，当救济金越是高昂时，人们投入生产的动力也愈发减弱。而如果进行工作救助来解决失业问题，其本质并没有受到影响，因为这意味着我们需要付给这些失业人员的工资要比自由市场付给他的要高，而超过其劳动价值的差额其实就是变相的，同时通过这个方式必然没有多少效率，政府不得不为此支付出巨大资本来安置这些技能最差的工人。值得一提的是，但一家大公司如果垄断某一行业，它并不会因为没有竞争而用低于市场的工资来支付劳动力报酬，因为它必须继续用高工资高福利的方式吸收人才增加其规模，而通过支付更低工资的手段，往往反而出现在病入膏肓的企业。综上所述，提高工资的最佳手段是通过资本累积、更好的教育培训和有效的企业管理等手段提高劳动力的边际生产水平，而非救济金。在我们考虑实施最低工资法同时，我们必须要事先仔细分析到这些政策的种种困难与产生后果。</p><h5 id="十九、工会的出现导致社会全体工人的工资上涨"><a href="#十九、工会的出现导致社会全体工人的工资上涨" class="headerlink" title="十九、工会的出现导致社会全体工人的工资上涨"></a>十九、工会的出现导致社会全体工人的工资上涨</h5><p>由于劳动力市场的求职工人和雇主都难以掌握充分的劳动力市场信息，而一旦判断错误，劳工方面付出的代价往往要远高于雇主方面，因此由工会为某一工种规定一个正常的标准工资，将有助于减少劳工的寻职风险，然而事实上随着时间的偏移，工会总会实行短视的、反社会的政策，比如借助于罢工等威胁和强制手段将某些工会会员的工资提高或者保持在实际市场价值之上，然而这样的结果只会对当代其他人和其他产业的劳工都造成伤害。而当各个产业代表的工会都纷纷要求提高工资后，消费者将再难以通过寻找替代品而节省开支，此时各个行业劳工工资上涨的背后却是其他消费者承受更多的压力，消费者的购买力将被迫减少，而即使已经寻求到工资上升的行业劳工，却可能也会因为提升额度低于市场平均涨幅而变相地比以往更加的贫穷。同时各行业强制涨工资的后果还有可能造成产业普遍性的失业，因为有些劳工的生产价值并无法达到工资的要求。不过最严重的失业不一定发生在工资涨幅最大的行业中，又因为失业导致劳动力的转移和重新分配。而通过失业救济的方式来缓解引发的后果的行为并不能有效得发挥作用，因为救济金本身便是直接或间接从就业者的工资中支付的，更不用说因为救济金的原因，可能反而会使一部分因为奋斗动力降低，从而形成更大的失业问题，严重的失业意味着产品产量更小、国家财富变少，人均财富也随之减少。而如果强制要求某产业提高商品价格，那么该产业的利润将下降，投资资本可能会发生转移投入更多利润的地方，可能造成该产品规模收缩，甚至长期以往设备将年久失修，造成商品产量和质量的逐年下降。因此工会可能在一段时间内可以通过雇主和其他行业劳工的利益来实现本行业劳工的增长，但在长期看工会根本不能为整体工人增加实际的工资收入。简而言之，虽然工会确实在保护工人安全健康等方面起到了有益的作用，但是究其根本是资本投资增长和科技进步导致工资稳定增长，而不是工会。</p><h5 id="二十、利润的提升以提高物价形式出现，是万恶之源"><a href="#二十、利润的提升以提高物价形式出现，是万恶之源" class="headerlink" title="二十、利润的提升以提高物价形式出现，是万恶之源"></a>二十、利润的提升以提高物价形式出现，是万恶之源</h5><p>第一，利润在国民经济总量中所占平均分量并不大，从70年代到90年代也只是占据8%左右的比例，也就是说制造业公司每创造1元的营业额，经过赋税后的利润不到5分钱，然而利润却是其中最招致敌意的一种收益。事实上，人们为了利润而掏钱投资时，不仅要承受赚不到任何回报的风险，而且还得同时面对血本无归的可能性。当通过人为限定利润最高限额时，因为无法刺激各种产品的生产，其造成长期的影响则是阻碍生产与消费者实际需求达到平衡。事实上正是追逐利润的事实在促使每家公司去实现获利产品生产最大化，促使他们追加投资，添置更多的设备、雇佣更多的员工，并吸引来新的投资人和生产者介入该行业，直到那种产品的生产足以满足需求，最终该产品的利润又会回落到或低于总的平均水平。总之，利润的一大功能是为生产要素的配置指出合理的方向，并且为之开辟途径，也只有依靠这个，我们才能恰当地确定无数不同产品的相对产出，使它与需求相一致，自由价格和自由利润会迅速促成生产最大化，迅速缓解社会出现的供不应求。同时利润还能对每一家参与竞争的企业持续不断地施加压力，使得他们必须不断改善经济效益和效率以谋求更多的利润额，与常识相反，利润的实现不是靠提高价格，而是靠降低生产成本，通过讲求经济效益和效率的方式。</p><h5 id="二十一、通过印刷更多的货币来达到刺激经济发展"><a href="#二十一、通过印刷更多的货币来达到刺激经济发展" class="headerlink" title="二十一、通过印刷更多的货币来达到刺激经济发展"></a>二十一、通过印刷更多的货币来达到刺激经济发展</h5><p>第一，特定的政策只有在不存在通货膨胀时才会带来特定的结果，因为通货膨胀的参与使事情变得更加复杂。然而通货膨胀总是存在某种古老的诱人的吸引力，使得政府总是采取通货膨胀的手段，以至于最终走上经济灾难的不归路。通货膨胀之所以吸引人，最明显、最古老、最顽固的错误是在于混淆货币与财富的区别，貌似自己拥有了以往数倍的货币就等价于自己的财富得以随之生长。事实上，货币的过量增加将使单位货币的购买力下降，更直接的表达是物价的飞速上涨。而政府之所以喜闻乐见得采用通货膨胀的政策，是因为它导致本国货币的贬值，从而达到刺激出口并抑制进口的效果。然而通货膨胀是一种不公平的过程，当国家大力发布更多的货币时，获利最大的群体是率先获得货币的人，因为那时市场物价并未随之上升，而随着货币不断伴随商品刺激各行各业的生产者并提高劳务工资和物价逐步上升的过程中，最后获得原始货币刺激的企业将得到更少的利益，甚至反不如前，因为他们获得的工资的提升可能并未达到整个市场物价平均涨幅程度。通货膨胀的效果便是增加社会贫富差距，更有途径的富人获得以往更高的购买力，而最底层的人却购买力下降。在短期内通货膨胀确实可以给某些集团带来好处，但这是建立在其他人利益损失的情况下，而从长期来看，它更会通过扭曲生产结构，给整个社会造成破坏性后果，因为它牺牲掉其他产业的利益使这些产业过度扩张，形成资本的错误运用和浪费。</p><h5 id="二十二、鼓励群众将储蓄的货币拿出来进行消费，从而达到缓解经济危机"><a href="#二十二、鼓励群众将储蓄的货币拿出来进行消费，从而达到缓解经济危机" class="headerlink" title="二十二、鼓励群众将储蓄的货币拿出来进行消费，从而达到缓解经济危机"></a>二十二、鼓励群众将储蓄的货币拿出来进行消费，从而达到缓解经济危机</h5><p>现实世界中的储蓄，同时也是支出的另一种形式，区别只在于将货币转交给其他的人用来投资、扩大生产。相比直接通过消费将货币流通出去，储蓄的方式将随着投资收益的不断增长，创造的就业机会也将越来越多。而将储蓄说成是经济衰退的起因是更是大错特错，恰恰相反，它正是经济衰退的后果，由于经济的反复无常，企业和个人不愿冒险将储蓄拿出来进行再投资，因此他们的存储额度才会越来越高。事实上，经济衰退的真正原因是政府人为干预的不确定性，企业和人们不知道政府在未来又会作出什么干预。虽然储蓄会进一步加深经济衰退的时间，通过购买力的下降的方式促使有些产业的商品难以出售，但需要注意的是从整体而言，整个社会的购买力并没有因此下降，人们的购买力只不过是通过储蓄的方式转移到资本品上，并被其余更有眼光的投资人进行扩大生产，实际上每年的总产量的增长反而是由储蓄所引起的。如果强迫人们取出储蓄的货币进行消费，就业机会不过从资本品行业转移到一般商品中，并不会增加社会整体的就业岗位，而只会造成一般商品的价格上涨、资本品下降的效果，进而由于迫使就业发生转移，短期内资本品行业将就业缩减，而长期的影响则是使整个社会的生产低于本来可以达到的水平。</p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融启蒙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《离散数学》总结</title>
      <link href="/2020/01/15/chi-san-shu-xue-zong-jie/"/>
      <url>/2020/01/15/chi-san-shu-xue-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="参考书本：高等教育出版社《离散数学》第二版"><a href="#参考书本：高等教育出版社《离散数学》第二版" class="headerlink" title="参考书本：高等教育出版社《离散数学》第二版"></a>参考书本：高等教育出版社《离散数学》第二版</h1><h2 id="数理逻辑"><a href="#数理逻辑" class="headerlink" title="数理逻辑"></a>数理逻辑</h2><p><img src="https://img-blog.csdnimg.cn/20200115221538816.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200115221639883.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200115221711639.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200115221724676.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200115221741507.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h2 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h2><p><img src="https://img-blog.csdnimg.cn/20200131205646530.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200131205747823.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/2020013120580192.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p><h2 id="代数结构"><a href="#代数结构" class="headerlink" title="代数结构"></a>代数结构</h2><h3 id="一、全篇目录"><a href="#一、全篇目录" class="headerlink" title="一、全篇目录"></a>一、全篇目录</h3><p><img src="https://img-blog.csdnimg.cn/20200206140011318.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt>    </p><h3 id="二、具体内容"><a href="#二、具体内容" class="headerlink" title="二、具体内容"></a>二、具体内容</h3><h4 id="I-代数系统"><a href="#I-代数系统" class="headerlink" title="I. 代数系统"></a>I. 代数系统</h4><p><img src="https://img-blog.csdnimg.cn/20200205175207220.png" alt><br><img src="https://img-blog.csdnimg.cn/20200205175108673.png" alt><img src="https://img-blog.csdnimg.cn/20200206141317916.png" alt><img src="https://img-blog.csdnimg.cn/20200205180409435.png" alt><img src="https://img-blog.csdnimg.cn/20200205181234817.png" alt><br><img src="https://img-blog.csdnimg.cn/20200205181307852.png" alt><img src="https://img-blog.csdnimg.cn/2020020519184833.png" alt><img src="https://img-blog.csdnimg.cn/20200205192111883.png" alt><img src="https://img-blog.csdnimg.cn/20200205191946832.png" alt><img src="https://img-blog.csdnimg.cn/20200205192554735.png" alt><img src="https://img-blog.csdnimg.cn/20200206110013366.png" alt><img src="https://img-blog.csdnimg.cn/20200206105937199.png" alt><img src="https://img-blog.csdnimg.cn/20200206110141430.png" alt><img src="https://img-blog.csdnimg.cn/20200206110055458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200206110534252.png" alt><br><img src="https://img-blog.csdnimg.cn/20200206110740510.png" alt><center>—————————————-我是可爱的分割线—————————————-</center></p><hr><h4 id="II-群与环"><a href="#II-群与环" class="headerlink" title="II. 群与环"></a>II. 群与环</h4><p><img src="https://img-blog.csdnimg.cn/20200206131107269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200206131135577.png" alt><img src="https://img-blog.csdnimg.cn/20200206131145197.png" alt><img src="https://img-blog.csdnimg.cn/20200206131202156.png" alt><img src="https://img-blog.csdnimg.cn/20200206131229989.png" alt><img src="https://img-blog.csdnimg.cn/20200206131306867.png" alt><img src="https://img-blog.csdnimg.cn/20200206131337601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200206131358484.png" alt><img src="https://img-blog.csdnimg.cn/20200206131452609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200206131524576.png" alt><img src="https://img-blog.csdnimg.cn/20200206131547236.png" alt><img src="https://img-blog.csdnimg.cn/20200206131613407.png" alt><img src="https://img-blog.csdnimg.cn/20200206131646504.png" alt><img src="https://img-blog.csdnimg.cn/20200206131723783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><center>—————————————-我是可爱的分割线—————————————-</center></p><hr><h4 id="III-格与布尔代数"><a href="#III-格与布尔代数" class="headerlink" title="III. 格与布尔代数"></a>III. 格与布尔代数</h4><p><img src="https://img-blog.csdnimg.cn/20200206131744509.png" alt><img src="https://img-blog.csdnimg.cn/20200206131756966.png" alt><img src="https://img-blog.csdnimg.cn/20200206131828854.png" alt><img src="https://img-blog.csdnimg.cn/20200206131856597.png" alt><img src="https://img-blog.csdnimg.cn/20200206131909942.png" alt><img src="https://img-blog.csdnimg.cn/20200206131924522.png" alt><img src="https://img-blog.csdnimg.cn/2020020613194623.png" alt><img src="https://img-blog.csdnimg.cn/2020020613195892.png" alt><img src="https://img-blog.csdnimg.cn/20200206132029473.png" alt><img src="https://img-blog.csdnimg.cn/20200206132038868.png" alt><img src="https://img-blog.csdnimg.cn/20200206132051399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><img src="https://img-blog.csdnimg.cn/20200206132118242.png" alt></p><h2 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h2><p><img src="https://img-blog.csdnimg.cn/20200209162926780.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20200209162932947.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMDQ3MTEx,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常用语会话总结（日语U学院）</title>
      <link href="/2020/01/10/ri-chang-yong-yu-hui-hua-zong-jie-ri-yu-u-xue-yuan/"/>
      <url>/2020/01/10/ri-chang-yong-yu-hui-hua-zong-jie-ri-yu-u-xue-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="一、日常用语"><a href="#一、日常用语" class="headerlink" title="一、日常用语"></a>一、日常用语</h3><p>&emsp;&emsp;&emsp;&emsp; 1. げんき　元気<br>&emsp;&emsp;&emsp;&emsp; ２. おはようございます    早上好<br>&emsp;&emsp;&emsp;&emsp; ３.こんにちは    中午好<br>&emsp;&emsp;&emsp;&emsp; ４.こんばんは 晚上好<br>&emsp;&emsp;&emsp;&emsp; ５.おやすみなさい 晚安<br>&emsp;&emsp;&emsp;&emsp; ６.はじめまして　どうぞよろしくお願（ねが）いします 初次见面，请多关照<br>&emsp;&emsp;&emsp;&emsp; ７.こちらこそ　どうぞよろしくお願（ねが）いします  初次见面，也请您多关照<br>&emsp;&emsp;&emsp;&emsp; ８.お久（ひさ）しぶりです 好久不见<br>&emsp;&emsp;&emsp;&emsp; ９.いただきます 我开吃啦<br>&emsp;&emsp;&emsp;&emsp; 10.ごちそうさまでした  我吃好了<br>&emsp;&emsp;&emsp;&emsp; 11. ちょっとまでください　稍等一下<br>&emsp;&emsp;&emsp;&emsp; 12. わかりました／ません  我明白了/我不明白<br>&emsp;&emsp;&emsp;&emsp; 13. すみません  对不起<br>&emsp;&emsp;&emsp;&emsp; 14. 大丈夫（だいじょうぶ）です 没关系<br>&emsp;&emsp;&emsp;&emsp; 15. ありがとうございます 谢谢<br>&emsp;&emsp;&emsp;&emsp; 16. どういたしまして 不客气<br>&emsp;&emsp;&emsp;&emsp; 17. ただいま 我回来了<br>&emsp;&emsp;&emsp;&emsp; 18. おかえり 你回来啦</p><hr><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><h4 id="1、第一连体形-ます"><a href="#1、第一连体形-ます" class="headerlink" title="1、第一连体形 ます"></a>1、第一连体形 ます</h4><p>1、经常习惯性的动作<br>わたしは毎日（まいにち）図書館で勉強（べんきょう）します<br>2、将来的行为<br>明日（あした）、友達（ともだち）が来（き）ます<br>3、主语的意志<br>では授業（じゅぎょう）を初（はじ）めます</p><h5 id="1-1、-形容词"><a href="#1-1、-形容词" class="headerlink" title="1.1、 形容词"></a>1.1、 形容词</h5><h6 id="I类形容词：イ形容词-词尾都是い"><a href="#I类形容词：イ形容词-词尾都是い" class="headerlink" title="I类形容词：イ形容词  词尾都是い"></a>I类形容词：イ形容词  词尾都是い</h6><p> 敬体谓语句：用在句尾，加上です　　　　日本料理はおいしいです<br>活用： 高（たか）いーー＞高くない</p><h6 id="II类形容词：ナ类形容词-或-形容动词-词尾都是だ，但一般省略"><a href="#II类形容词：ナ类形容词-或-形容动词-词尾都是だ，但一般省略" class="headerlink" title="II类形容词：ナ类形容词 或 形容动词 词尾都是だ，但一般省略"></a>II类形容词：ナ类形容词 或 形容动词 词尾都是だ，但一般省略</h6><p> 连体形：词干+再な修饰名词　　　立派（りっぱ）な図書館（としょかん）<br> 敬体谓语句：词干+です　　　図書館はきれいです<br> 活用：　词干+ではない／ではありません</p><h5 id="1-2、-动词"><a href="#1-2、-动词" class="headerlink" title="1.2、 动词"></a>1.2、 动词</h5><h6 id="一类动词：词尾都是う段上的假名"><a href="#一类动词：词尾都是う段上的假名" class="headerlink" title="一类动词：词尾都是う段上的假名　　　"></a>一类动词：词尾都是う段上的假名　　　</h6><p>～う段—&gt;い段＋ます   　　始（はじ）まるーー＞始（はじ）まります</p><h6 id="二类动词：词尾是る／る前面的假名在い段或え段上"><a href="#二类动词：词尾是る／る前面的假名在い段或え段上" class="headerlink" title="二类动词：词尾是る／る前面的假名在い段或え段上"></a>二类动词：词尾是る／る前面的假名在い段或え段上</h6><p>～るーー＞～ます　　起（お）きるーー＞起きます</p><h6 id="三类动词：只有两种"><a href="#三类动词：只有两种" class="headerlink" title="三类动词：只有两种"></a>三类动词：只有两种</h6><p>サ变    する/する结尾的词　　　～するーー＞します<br>カ变   来（く）る　　　くるーー＞きます</p><hr><h4 id="2、-第二连用形て形"><a href="#2、-第二连用形て形" class="headerlink" title="2、 第二连用形て形"></a>2、 第二连用形て形</h4><p>表示反复的、习惯性的动作</p><h5 id="2-1、-形容词"><a href="#2-1、-形容词" class="headerlink" title="2.1、 形容词"></a>2.1、 形容词</h5><h6 id="I类形容词：イ形容词-词尾都是い-1"><a href="#I类形容词：イ形容词-词尾都是い-1" class="headerlink" title="I类形容词：イ形容词  词尾都是い"></a>I类形容词：イ形容词  词尾都是い</h6><p>~いーー＞～くて   表并列，或因果关系</p><h6 id="II类形容词：ナ类形容词-或-形容动词-词尾都是だ，但一般省略-1"><a href="#II类形容词：ナ类形容词-或-形容动词-词尾都是だ，但一般省略-1" class="headerlink" title="II类形容词：ナ类形容词 或 形容动词 词尾都是だ，但一般省略"></a>II类形容词：ナ类形容词 或 形容动词 词尾都是だ，但一般省略</h6><p>词干后面加で、表示并列关系</p><h5 id="2-2、-动词"><a href="#2-2、-动词" class="headerlink" title="2.2、 动词"></a>2.2、 动词</h5><h6 id="一类动词：词尾都是う段上的假名-词尾不同，变化方式不同"><a href="#一类动词：词尾都是う段上的假名-词尾不同，变化方式不同" class="headerlink" title="一类动词：词尾都是う段上的假名;词尾不同，变化方式不同"></a>一类动词：词尾都是う段上的假名;词尾不同，变化方式不同</h6><p>以く、ぐ结尾的词　　～く／ぐ　　ーー＞　～いて／で<br>以う、つ、る结尾的词　　　～う／つ／る　ーー＞　～って　　買（か）う　ーー＞　買って<br>以ぬ、ぶ、む结尾的词　　死（し）ぬ　ーー＞　死んで<br>其他情况　　　～すーー＞～して</p><h6 id="二类动词：词尾是る／る前面的假名在い段或え段上-1"><a href="#二类动词：词尾是る／る前面的假名在い段或え段上-1" class="headerlink" title="二类动词：词尾是る／る前面的假名在い段或え段上"></a>二类动词：词尾是る／る前面的假名在い段或え段上</h6><p>～るーー＞～て　　起（お）きるーー＞起きて</p><h6 id="三类动词：只有两种-1"><a href="#三类动词：只有两种-1" class="headerlink" title="三类动词：只有两种"></a>三类动词：只有两种</h6><p>サ变    する/する结尾的词　　　～するーー＞して<br>カ变   来（く）る　　　くるーー＞きて</p><hr><h3 id="三、基本句型"><a href="#三、基本句型" class="headerlink" title="三、基本句型"></a>三、基本句型</h3><h4 id="动词て形-ている"><a href="#动词て形-ている" class="headerlink" title="动词て形+ている"></a>动词て形+ている</h4><p>表示动作正在进行中<br>広場（ひろば）ダンスをしています<br>动作结果的继续保持<br>東（ひがし）のほうに来ています<br>经常性、反复性的动作<br>毎日作（つく）っています</p><h4 id="动词て形-てもいいですか"><a href="#动词て形-てもいいですか" class="headerlink" title="动词て形+てもいいですか"></a>动词て形+てもいいですか</h4><p>表示做这个动作也可以吗<br>ちょっと休（や）んでもいいですか</p><h4 id="动词て形-て-V"><a href="#动词て形-て-V" class="headerlink" title="动词て形+て+V."></a>动词て形+て+V.</h4><p>前面的动作都变成て形，最后动词保持不变<br>表示各种含义，如并列、先后、方式方法和因果等<br>ここに座（すわ）って夕日（ゆうひ）を眺（なが）めませんか</p><h4 id="动词て形-てはいけません"><a href="#动词て形-てはいけません" class="headerlink" title="动词て形+てはいけません"></a>动词て形+てはいけません</h4><p>いけません是いけない的敬体表达 “不行”<br>大音量（だいおんりょう）で音楽（おんがく）を流（なが）してはいけませんね</p><h4 id="动词ます形-ませんか"><a href="#动词ます形-ませんか" class="headerlink" title="动词ます形+ませんか"></a>动词ます形+ませんか</h4><p>ます的否定+疑问 表委婉的建议。”不…吗？”<br>夕日（ゆうひ）でも（なが）めませんか</p><h4 id="形容词-名词-连体形"><a href="#形容词-名词-连体形" class="headerlink" title="形容词+名词=连体形"></a>形容词+名词=连体形</h4><p>名词の名词　　私の趣味（しゅみ）<br>一类形+名词　　　面白（おもしろ）い映画（えいが）<br> 二类形な名词　 　　好（す）きなこと</p><h4 id="动词过去时-名词，即动词て形-た"><a href="#动词过去时-名词，即动词て形-た" class="headerlink" title="动词过去时+名词，即动词て形+た"></a>动词过去时+名词，即动词て形+た</h4><p>買（か）った花（はな）<br>动词原形+こと  表示兴趣爱好<br>花を作（つく）ること</p><h4 id="连体形-んです／のです-表示强调和解释说明"><a href="#连体形-んです／のです-表示强调和解释说明" class="headerlink" title="连体形+んです／のです　　 表示强调和解释说明"></a>连体形+んです／のです　　 表示强调和解释说明</h4><p>自分（じぶん）で作ったのです</p><h4 id="是与不是"><a href="#是与不是" class="headerlink" title="是与不是"></a>是与不是</h4><p>ＡはＢです<br>AはBではありません<br>ＡはＢですか　はい／ええ、Ｂです　　　　いいえ、Ｂではあんりません</p>]]></content>
      
      
      <categories>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语会话 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可执行文件的生成和进程的运行</title>
      <link href="/2020/01/04/ke-zhi-xing-wen-jian-de-sheng-cheng-he-jin-cheng-de-yun-xing/"/>
      <url>/2020/01/04/ke-zhi-xing-wen-jian-de-sheng-cheng-he-jin-cheng-de-yun-xing/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><h3 id="关于这篇文章"><a href="#关于这篇文章" class="headerlink" title="关于这篇文章"></a>关于这篇文章</h3><p>博客所涉及的基础知识来自于机械工业出版社的《计算机系统基础》、《编译原理》和《操作系统教程》和其他博友的相关总结。这篇文章旨在初步了解在IDE开发中编写完毕的高级语言源程序从点击编译按钮到控制台响应的一系列转换过程，并以实例来探究可重定位目标文件和可执行目标文件的相互关系。</p><h3 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h3><p>体系结构：IA-32(X86-32) &emsp;&emsp; 操作系统：Ubuntu16.4 &emsp;&emsp;  汇编代码格式：AT&amp;T &emsp;&emsp;   高级语言：C语言</p><h3 id="第一部分-从点击编译按钮到链接结束——可执行文件的生成"><a href="#第一部分-从点击编译按钮到链接结束——可执行文件的生成" class="headerlink" title="第一部分 从点击编译按钮到链接结束——可执行文件的生成"></a>第一部分 从点击编译按钮到链接结束——可执行文件的生成</h3><h4 id="一、预处理"><a href="#一、预处理" class="headerlink" title="一、预处理"></a>一、预处理</h4><p> &emsp;&emsp;&emsp;&emsp;命令：$gcc -E hello.c -o hello.i<br> &emsp;&emsp;&emsp;&emsp;操作：通过处理源文件中以”#”开头的预编译指令进行宏替换。<br> &emsp;&emsp;&emsp;&emsp;结果：得到一个可读但不包含任何宏定义的文本文件，称为预处理文件。<br> 具体如下：</p><hr> <center><img src="https://img-blog.csdnimg.cn/20191231224001617.png"></center><hr><h4 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h4><p>&emsp;&emsp;&emsp;&emsp;命令：$gcc -S hello.i -o  hello.s<br>&emsp;&emsp;&emsp;&emsp;操作：通过编译程序将预处理文件进行词法分析、语法分析、语义分析、中间代码生成、代码优化和代码生成。<br>&emsp;&emsp;&emsp;&emsp;结果：得到一个汇编语言源文件。<br>具体如下：</p><hr><h5 id="I-词法分析"><a href="#I-词法分析" class="headerlink" title="I.词法分析"></a>I.词法分析</h5><p>词法分析器会根据高级语言源程序的字符流，将每一个字符构建成为一个结构体——词法单元，从而获得一连串的词法单元序列，为下一步语法分析做准备。</p><center><img src="https://img-blog.csdnimg.cn/20200101123019477.png"></center><h5 id="II-语法分析"><a href="#II-语法分析" class="headerlink" title="II.语法分析"></a>II.语法分析</h5><p>语法分析器通过一种树形的中间表示如”语法树”来表示词法单元序列的语法结构，从而判断是否是一个符合语法规范的表达式，如检查语法树发现某表达式中存在二元操作符却只有一个操作数，则不符合语法，编译器报错。</p><center><img src="https://img-blog.csdnimg.cn/20200101125047852.png"></center><h5 id="III-语义分析"><a href="#III-语义分析" class="headerlink" title="III.语义分析"></a>III.语义分析</h5><p>语义分析器会根据语法树和符号表中的信息来检查高级语言源程序是否和语言定义的语义一致，并对语法树和符号表进行更新，主要涉及类型检查和自动类型转换等部分，如某表达式的语义是70+30，但不小心把70写成浮点数类型，30写成整数类型，那么在经过例行的类型检查后，需要自动类型转换将二者操作数类型加以转化，在这儿是把30拓展成浮点数类型。</p><center><img src="https://img-blog.csdnimg.cn/20200101131352244.png"></center><h5 id="IV-中间代码生成"><a href="#IV-中间代码生成" class="headerlink" title="IV.中间代码生成"></a>IV.中间代码生成</h5><p>根据更新后的语法树生成一个源程序的明确的低级的中间表示，作为从高级语言格式到汇编语言格式的过渡形式。</p><center><img src="https://img-blog.csdnimg.cn/20200101132444471.png"></center><h5 id="V-代码优化"><a href="#V-代码优化" class="headerlink" title="V.代码优化"></a>V.代码优化</h5><p>通过尽可能消除中间表示的冗余部分，使其更加精简、高效。</p><center><img src="https://img-blog.csdnimg.cn/20200101132844737.png"></center><h5 id="VI-代码生成"><a href="#VI-代码生成" class="headerlink" title="VI.代码生成"></a>VI.代码生成</h5><p>代码生成器通过为每一个变量分配寄存器或内存单元的手段来将中间表示映射成最终的汇编语言格式。</p><center><img src="https://img-blog.csdnimg.cn/20200101135217482.png"></center><center>（注：这儿只给出对应的汇编伪代码，非IA-32指令集）</center><hr><h4 id="三、汇编"><a href="#三、汇编" class="headerlink" title="三、汇编"></a>三、汇编</h4><p> &emsp;&emsp;&emsp;&emsp;命令：$gcc -c hello.s -o hello.o<br> &emsp;&emsp;&emsp;&emsp;操作：通过汇编程序将汇编语言源文件转换成机器指令序列，并将源文件中具有相同特征的最小可处理单位在目标文件中统一划分成对应节。<br> &emsp;&emsp;&emsp;&emsp;结果：得到一个不可读的二级制代码文件，称为可重定位目标文件。<br>具体如下：</p><hr> <center><img src="https://img-blog.csdnimg.cn/20200101185145578.png"></center><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>ELF头</td><td>包含链接过程所用的目标代码信息，如二进制表示方式、排序方式，ELF头本身大小、节头表大小和操作系统类型等</td></tr><tr><td>.text节</td><td>编译后的目标代码部分</td></tr><tr><td>.rodata节</td><td>只读数据，如printf格式串</td></tr><tr><td>.data节</td><td>已初始化的全局变量</td></tr><tr><td>.bss节</td><td>未初始化全局变量，不占磁盘空间。区分初始化和非初始化节是为了空间效率</td></tr><tr><td>.symtab节</td><td>存放函数和全局变量信息，也就是符号表所在的节。注意不包含局部变量</td></tr><tr><td>.rel.text节</td><td>.text节的重定位信息，用于链接过程的.text节中的符号引用处地址的修改</td></tr><tr><td>.rel.data节</td><td>.data节的重定位信息，用于链接过程的.data节中的符号引用处地址的修改</td></tr><tr><td>.debug节</td><td>调试用符号表</td></tr><tr><td>.strab节</td><td>包含.symtab和.debug节中符号及节名</td></tr><tr><td>.line节</td><td>包含调试信息,包括哪些调试符号的行号,为程序指令码与源文件的行号建立联系</td></tr><tr><td>节头表</td><td>除ELF头外，是可重定位目标文件最重要的部分，用于描述每个节的节名、在文件中偏移、大小和对齐方式等</td></tr><tr><td><em>*</em></td><td></td></tr></tbody></table><h4 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h4><p> &emsp;&emsp;&emsp;&emsp;命令：$gcc -static -o myproc main.o test.o<br> &emsp;&emsp;&emsp;&emsp;操作：将多个可重定位目标文件进行符号解析、合并和重定位操作。<br> &emsp;&emsp;&emsp;&emsp;结果：仍然得到一个不可读的二级制代码文件，称为可执行目标文件。<br>具体如下：</p><hr><h5 id="I-符号解析"><a href="#I-符号解析" class="headerlink" title="I.符号解析"></a>I.符号解析</h5><p>将每个符号引用都与一个确定的符号定义建立关联，因为是根据引用来逐一寻找定义，因此允许存在符号定义的数量大于符号引用的数量的情况。</p> <center><img src="https://img-blog.csdnimg.cn/20200101191817578.png"></center><h5 id="II-合并"><a href="#II-合并" class="headerlink" title="II.合并"></a>II.合并</h5><p>将多个可重定位目标文件的相同的节合并成一个单独的可执行目标文件的同名节，如多个文件中的.text节共同合并成一个单独的.text节。</p> <center><img src="https://img-blog.csdnimg.cn/20200101201203850.png"></center><h5 id="III-重定位"><a href="#III-重定位" class="headerlink" title="III.重定位"></a>III.重定位</h5><p>计算每个符号定义在虚拟地址空间中的绝对地址，再根据该绝对地址去修改符号引用处的地址信息。</p><hr><h3 id="第二部分-从作业请求到控制台响应——进程的运行"><a href="#第二部分-从作业请求到控制台响应——进程的运行" class="headerlink" title="第二部分 从作业请求到控制台响应——进程的运行"></a>第二部分 从作业请求到控制台响应——进程的运行</h3><p>当编译器生成可执行目标文件后，便向CPU请求加载文件以期望运行，直到控制台响应，看似直截了当，实际上从作业请求到控制台响应整个过程却有着诸多检测策略在路上充当检查站的作用。</p><h4 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h4><p>在我们具体分析整个检测过程前，我们需要先了解当前流行的操作系统的基本特性和IA-32计算机的组成结构。</p><table><thead><tr><th>分时操作系统</th><th></th></tr></thead><tbody><tr><td>处理机调度</td><td>时间片轮转算法RR，即处于就绪态的进程只允许一次性执行一个固定的时间片的时间，在当前进程运行完时间片后，便将CPU分配给就绪队列中的下一个进程</td></tr><tr><td>进程同步机制</td><td>信号量机制，即使用PV操作实现多个进程之间的同步和互斥关系</td></tr><tr><td>死锁避免</td><td>银行家算法，即进程每次请求资源，CPU会根据”分配对应资源后系统不会产生死锁”的原则来为进程分配资源，否则将拒绝请求，进程等待</td></tr><tr><td>死锁检测</td><td>资源分配图，每隔一段时间便会自动执行检测当前系统是否存在死锁</td></tr><tr><td>内存分配与回收</td><td>基于虚拟存储技术的请求分页存储管理机制，即将进程虚拟存储空间分成各个页面，物理内存空间也分成和页面相同大小的各个页框，将组成进程的页面分散存放在相应页框之中，避免了进程运行时需要一大块连续空间的窘境</td></tr><tr><td>页面置换</td><td>最近最久未使用置换算法LRU，即若进程所拥有的页框都存放了对应页面，当需要访问新的页面时，按照最近最久未访问的策略来与特定页面发生置换，获取对应页框的使用权</td></tr><tr><td>Cache行和主存块的映射方式</td><td>组相联映射，即将Cache分成若干行，主存分成若干主存块，存储数据的主存块分别映射到Cache固定组中的任一行</td></tr><tr><td>Cache中主存块替换</td><td>最近最少用算法LRU，将最近最少用的存储块淘汰掉，将其对应的行置空，等待新的存储块存放</td></tr><tr><td>磁盘调度</td><td>C-LOOK算法，即只会响应磁头移动方向上的磁道请求，当磁头移动方向上不再有请求，就立即让磁头放回至起点，重新扫描</td></tr><tr><td>设备分配</td><td>动态分配方式，即进程运行过程中动态申请设备资源，而非在加载时便给它分配需要的所有资源</td></tr><tr><td>内部异常</td><td>在CPU内部发生的意外事件，如指令所引起的意外事件，如缺页</td></tr><tr><td>外部中断</td><td>在CPU外部发生的意外事件，如I/O设备所引起的意外事件，如设备数据已经准备完毕</td></tr><tr><td>I/O控制方式</td><td>DMA方式，即CPU发出I/O命令，启动DMA控制器来处理数据传输的事宜，而此时CPU可以进行其它事情，当DMA控制器处理完毕再发送中断请求至CPU以期望其完成善后工作</td></tr></tbody></table><table><thead><tr><th>IA-32计算机组成</th><th></th></tr></thead><tbody><tr><td>CPU中央处理器</td><td>作为计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元</td></tr><tr><td>Cache高速缓冲存储器</td><td>主要由SRAM存储器组成，具有易失性，存放的内容是主存储器的部分备份，用于减少访问主存储器次数，从而增加程序执行效率</td></tr><tr><td>TLB相联高速缓冲存储器</td><td>是Cache的变种，存放的内容是虚拟存储技术下的页表的部分备份</td></tr><tr><td>主存储器</td><td>主要由DRAM存储器组成，采用双译码结构，主要用来存放指令和数据等信息，读取速度相比Cache慢</td></tr><tr><td>磁盘</td><td>一种磁表面存储器，由磁记录介质、磁盘驱动器和磁盘控制器组成，主要用来存放大量指令和数据等信息，读取速度相比主存储器慢许多</td></tr></tbody></table><h4 id="二、从作业请求到CPU分配"><a href="#二、从作业请求到CPU分配" class="headerlink" title="二、从作业请求到CPU分配"></a>二、从作业请求到CPU分配</h4><p>在经过上述术语的简要介绍和策略算法的规定，已经可以在具体的环境下讲解从作业请求到控制台响应整个过程中操作系统扮演的角色。</p><p>在经过第一部分的操作成功生成可执行目标文件生成后，IDE将自动向操作系统发送作业请求来说明自身想要运行某程序的愿望，此时操作系统并非直接接纳该愿望，而是先通过查找系统资源表检测是否有足够的页框资源分配给该程序的进程，若资源不够则先进入后备队列等待，待其它进程释放资源后再考虑将作业加载进内存并进行进程初始化等操作，最后根据处理机调度算法RR与其他就绪队列的进程平分CPU时间，这时CPU通过将可执行目标文件中的ELF头中的程序虚拟起始地址字段作为EIP值，开始执行程序第一条指令。<br> <center><br><img src="https://img-blog.csdnimg.cn/20200103150436433.png"></center></p><h4 id="三、控制台响应——进程的运行"><a href="#三、控制台响应——进程的运行" class="headerlink" title="三、控制台响应——进程的运行"></a>三、控制台响应——进程的运行</h4><p>即使在具体的策略条件下，在实际操作仍存在诸多变化，因此在这篇文章中选择性地按最槽糕的情况进行分析，期望用最少的内容来覆盖更多的变化，同时我也根据”功能的不同”将实际程序的汇编代码划分成以下五种可能情景。</p><h5 id="I-含有形式地址的RM取数操作"><a href="#I-含有形式地址的RM取数操作" class="headerlink" title="I.含有形式地址的RM取数操作"></a>I.含有形式地址的RM取数操作</h5><p>当CPU执行RM取数指令时，会根据指令的寻址地址字段和形式地址字段计算出操作数的有效地址（虚拟地址），并尝试将有效地址转换为主存物理地址，为此CPU会优先访问TLB快表查找是否已存在二者的映射关系，如果不存在，则会根据当前进程的对应寄存器所保存的页表的主存物理地址读取页表内容至CPU，CPU再次在页表中查找。此时一定可以找到二者的映射关系，但在着手转化成主存物理地址之前，会先根据页表对应表项判断包含有效地址的相应页面是否已加载至主存空间，</p><p>如果不在则发生缺页内部异常将页面从磁盘加载到主存的页框中，具体为将断点（当前指令的地址，即RM取数指令地址）和程序状态字保存到相应寄存器中，根据专门的硬件查询电路识别异常，并获取中断类型号，在根据类型号到中断向量表中读取对应的中断服务程序的入口地址，通过执行中断服务程序来调用磁盘的驱动程序，在驱动程序中通过IO控制方式-DMA方式来启动磁盘工作（通过磁盘调用-CLOOK算法读取由磁盘地址确认的扇区信息并送至磁盘控制器的数据缓冲寄存器），此时CPU得到解放可以执行其他进程，此后由DMA控制器来控制相应页面的信息从磁盘到主存的传递过程，待信息全部传递完毕后DMA控制器发送中断请求至CPU以告知传输完成，</p><p>CPU在每一个指令周期末会检测是否有中断请求，若发现存在则进入中断响应，CPU状态为禁止中断，再将断点（当前指令的下一条指令地址，即其他进程的指令地址）和程序状态字保存到相应寄存器中，根据专门的硬件查询电路识别异常，并获取中断类型号，在根据类型号到中断向量表中读取对应的中断服务程序的入口地址，在中断服务程序中完成数据传输任务的善后工作，恢复断点和程序状态字并开中断，返回断点处继续执行其他进程。</p><p>此时已经把页面加载至主存的页框，若分配给进程的页框已经都存放了页面，则发生页面置换-LRU算法，将新页面成功存放至对应页框后，再进一步更新TLB和页表相应字段的信息，最后便是恢复异常时保存的断点和程序状态字，返回发生异常时的断点处继续执行。此时将重复最开始的操作，即访问TLB快表，此时由于TLB内容已经更新，此时可以找到RM取数指令中操作数的虚拟地址和物理地址的映射关系，故此时虚拟地址转化为物理地址。</p><p>在根据物理地址优先访问Cache的各行，如果不存在包含目标页面的主存块的行，再根据物理地址访问主存中的主存块，最后送至CPU和Cache，如果目标主存块在Cache中位置不够，则发生Cache主存块替换-LRU算法，完成取数操作。</p> <center><img src="https://img-blog.csdnimg.cn/20200103182801312.png"></center><h5 id="II-进程同步操作"><a href="#II-进程同步操作" class="headerlink" title="II.进程同步操作"></a>II.进程同步操作</h5><p>当就绪队列中存在多个进程共同使用信号量机制-PV操作实现对同一资源的互斥时，如果资源已经耗尽，那么剩余竞争进程会因此进入阻塞态，直到资源满足后才会被分配到就绪队列，重新分配CPU时间，若长时间未满足且内存空间不足则可能将进程从内存存放至磁盘，腾出内存空间，直到满足资源后再考虑重新运行。</p><h5 id="III-过程调用操作"><a href="#III-过程调用操作" class="headerlink" title="III.过程调用操作"></a>III.过程调用操作</h5><p>在整个过程调用操作中存在两个研究对象——调用者P和被调用者Q。当P开始调用Q时，首先会陆续将调用者保存寄存器的内容、入口参数（实参）和返回地址入栈，随后将CPU控制权移交至Q（实际上是将Q的第一条指令地址存到EIP中），Q得到控制权后开始保存P的栈帧信息，同时将被调用保存寄存器的内容送入栈，再进一步在栈中开辟自身的局部变量存放空间，开始执行，待Q执行完毕后恢复P的栈帧和释放自身局部变量空间，取出P存放在栈中的返回地址，将CPU控制权返还给P。</p> <center><img src="https://img-blog.csdnimg.cn/20200103184932842.png"></center><h5 id="IV-系统调用操作"><a href="#IV-系统调用操作" class="headerlink" title="IV.系统调用操作"></a>IV.系统调用操作</h5><p>系统调用封装函数的汇编代码中存在陷阱指令，当CPU执行到陷阱指令后，会根据EAX寄存器中的系统调用号，选择执行一个相应的系统调用处理程序，并在系统调用处理程序中再次调用系统调用服务例程，最终在服务例程中实现系统函数功能。</p> <center><img src="https://img-blog.csdnimg.cn/20200103211353401.png"></center><h5 id="V-进程切换操作"><a href="#V-进程切换操作" class="headerlink" title="V.进程切换操作"></a>V.进程切换操作</h5><p>当进程占据CPU超过一个时间片后，就需要进行进程切换到另外一个进程，此时需要将当前处理器的寄存器上下文保存到当前进程的系统级上下文的现场信息中，将新进程系统级上下文中的现场信息作为新的寄存器上下文恢复到处理器的各个寄存器中，最后将CPU控制权转移到新进程中。<br>可执行目标文件加载时，只会将其部分节加载至主存，并和其余部分共同构建起一个进程的虚拟存储映像，在映像中存在这系统级上下文和用户级上下文两部分，其中系统级上下文又分为进程标识信息、进程现场信息、进程控制信息和系统内核栈，用户级上下文则分为用户堆栈、用户数据块、用户程序块和共享地址空间。</p> <center><img src="https://img-blog.csdnimg.cn/20200103222833470.png"></center><h2 id="第三部分-实例演示——重定位目标文件与可执行目标文件的关系"><a href="#第三部分-实例演示——重定位目标文件与可执行目标文件的关系" class="headerlink" title="第三部分 实例演示——重定位目标文件与可执行目标文件的关系"></a>第三部分 实例演示——重定位目标文件与可执行目标文件的关系</h2><h5 id="I-初始材料"><a href="#I-初始材料" class="headerlink" title="I.初始材料"></a>I.初始材料</h5><p>1)    sum.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2)    main.c</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="II-可重定位文件的具体内容"><a href="#II-可重定位文件的具体内容" class="headerlink" title="II.可重定位文件的具体内容"></a>II.可重定位文件的具体内容</h5><h6 id="1-main-o的主要内容"><a href="#1-main-o的主要内容" class="headerlink" title="1. main.o的主要内容"></a>1. main.o的主要内容</h6><center><img src="https://img-blog.csdnimg.cn/20200101213029999.png"></center><table><thead><tr><th>字段</th><th>含义</th><th>值的解释</th></tr></thead><tbody><tr><td>Magic</td><td>俗称魔数，确定文件的类型</td><td>7f 为固定格式，剩余45、4c和46分别代表着’E’、’L’、’F’字符的ASCII码的十六进制</td></tr><tr><td>入口点地址</td><td>程序第一条指令的虚拟地址</td><td>由于main.o非可执行目标文件，故这儿默认为0</td></tr><tr><td>程序头起点</td><td>程序头在文件的起始偏移量</td><td>由于非可执行目标文件，不含有程序头，故默认为0</td></tr><tr><td>Start of section headers</td><td>节头表在文件的起始偏移量</td><td>节头表的第一个字节位于距重定位目标文件开头516B处</td></tr><tr><td>本头的大小</td><td>ELF头本身所占空间大小</td><td>一般固定为52B大小，开辟了同样空间，区别仅在于有没有存值</td></tr><tr><td>程序头大小</td><td>- -</td><td>由于非可执行目标文件，不含有程序头，故默认为0</td></tr><tr><td>Number of program headers</td><td>程序头表中表项的个数</td><td>由于非可执行目标文件，不含有程序头，故默认为0</td></tr><tr><td>节头大小</td><td>节头表中每一表项所占空间</td><td>每一表项分别占用固定大小空间40B</td></tr><tr><td>节头数量</td><td>节头表中表项的数量</td><td>节头表中一共有12个表项，对应main.o文件中存在12个节</td></tr></tbody></table><center><img src="https://img-blog.csdnimg.cn/20200101213301220.png"></center>|字段 |含义 |值的解释 ||--|--|--|| Value |符号定义的虚拟地址  |  因为非可执行目标文件，故默认为0 || Size  |符号定义的大小|一般只有符号定义才会分配空间，故函数名和变量名，否则默认为0  || Type |符号的类型  |  一般分有'NOTYPE'未定义、'SECTION'节、'FILE'文件、'FUNC'函数和'OBJECT'变量 || Bind|符号的绑定属性  |  一般分有'LOCAL'本地变量、'GLOBAL'全局变量、'WEAK’弱符号 || Ndx|存储符号定义的节号  |  -     - || Name| 符号具体名称 |  比如main函数所定义的main函数名和调用的sum函数名 |<center><img src="https://img-blog.csdnimg.cn/20200101213436124.png"></center><table><thead><tr><th>字段</th><th>含义</th><th>值的解释</th></tr></thead><tbody><tr><td>偏移量</td><td>符号引用在可重定位目标文件的偏移量</td><td>比如在main.o中sum函数的调用的指令位于距文件21H处</td></tr><tr><td>类型</td><td>重定位类型</td><td>有符号引用处的有效地址就是重定位后的值’R_386_PC32’   和   有效地址是重定位的值加上当前PC的值’R_386_32 ‘两种</td></tr><tr><td>符号名称</td><td>符号引用的符号名</td><td>比如main.o所调用的sum函数名</td></tr></tbody></table><center><img src="https://img-blog.csdnimg.cn/20200101214026930.png"></center><table><thead><tr><th>字段</th><th>含义</th><th>值的解释</th></tr></thead><tbody><tr><td>Name</td><td>可重定位目标文件的节名</td><td>- -</td></tr><tr><td>Addr</td><td>节的第一个字节在虚拟地址空间的虚拟地址</td><td>由于非可执行目标文件，故默认为0</td></tr><tr><td>Off</td><td>节的第一个字节在可重定位目标文件的偏移量</td><td>比如.text节位于main.o文件开头后34H处</td></tr><tr><td>Size</td><td>节所占的空间大小</td><td>比如.text节存储需要38B的空间</td></tr><tr><td>Al</td><td>节存放时所按照的对齐方式</td><td>比如.rel.text节是按照4B的对齐方式</td></tr></tbody></table><p>根据ELF头中的本头的大小、Start of section headers、节头大小和节头数量字段，我们可以得出ELF头大小和节头表偏移量和大小，再结合节头表各节的Name、Off和Size字段，我们可以得出可重定位目标文件main.o的具体格式。</p><center><img src="https://img-blog.csdnimg.cn/20200104190344448.png"></center><hr><h6 id="2-sum-o的主要内容"><a href="#2-sum-o的主要内容" class="headerlink" title="2. sum.o的主要内容"></a>2. sum.o的主要内容</h6> <center><img src="https://img-blog.csdnimg.cn/20200101205927936.png"></center> <center><img src="https://img-blog.csdnimg.cn/20200101210717109.png"></center> <center><img src="https://img-blog.csdnimg.cn/20200101210425910.png"></center> <center><img src="https://img-blog.csdnimg.cn/20200101211114215.png"></center><p>同理，也可以绘制出同样为可重定位目标文件的sum.o格式。</p><center><img src="https://img-blog.csdnimg.cn/20200104190122437.png"></center><hr><h5 id="III-可执行目标文件的具体内容"><a href="#III-可执行目标文件的具体内容" class="headerlink" title="III.可执行目标文件的具体内容"></a>III.可执行目标文件的具体内容</h5><center><img src="https://img-blog.csdnimg.cn/20200104203421846.png"></center><table><thead><tr><th>字段</th><th>含义</th><th>值的解释</th></tr></thead><tbody><tr><td>入口点地址</td><td>程序第一条指令的虚拟地址</td><td>程序加载后，CPU在虚拟地址8048074H处取得第一条指令开始执行</td></tr><tr><td>程序头起点</td><td>程序头在文件的起始偏移量</td><td>程序头表的第一个字节在可执行目标文件的距开头52B处</td></tr><tr><td>Start of section headers</td><td>节头表在文件的起始偏移量</td><td>节头表的第一个字节位于距重定位目标文件开头632B处</td></tr><tr><td>本头的大小</td><td>ELF头本身所占空间大小</td><td>一般固定为52B大小，开辟了同样空间，区别仅在于有没有存值</td></tr><tr><td>程序头大小</td><td>- -</td><td>程序头表占用空间为32B</td></tr><tr><td>Number of program headers</td><td>程序头表中表项的个数</td><td>由于程序加载后会有两个段，故在程序头表中存在2个表项</td></tr></tbody></table><center><img src="https://img-blog.csdnimg.cn/20200104202444214.png"></center><center><img src="https://img-blog.csdnimg.cn/20200104202731234.png"></center><p>在可执行目标文件的生成中需要重定位，因此可重定位目标文件中存放可重定位信息，因此待可执行文件成功生成后便无需再保存相关信息。</p><center><img src="https://img-blog.csdnimg.cn/20200104203254380.png"></center><table><thead><tr><th>字段</th><th>含义</th><th>值的解释</th></tr></thead><tbody><tr><td>Name</td><td>可执行目标文件的节名</td><td>- -</td></tr><tr><td>Addr</td><td>节的第一个字节在虚拟地址空间的虚拟地址</td><td>比如程序加载后可执行目标文件的.text节位于虚拟地址8048074H处</td></tr></tbody></table><center><img src="https://img-blog.csdnimg.cn/20200104202946423.png"></center><table><thead><tr><th>字段</th><th>含义</th><th>值的解释</th></tr></thead><tbody><tr><td>Type</td><td>描述存储段的类型或特殊节的类型</td><td>一般有可装入段LOAD、特殊的动态节DYNAMIC和异常调试用的GUN_STACK等</td></tr><tr><td>Offset</td><td>本段在可执行目标文件的偏移量</td><td>比如LOAD段，即只读区域和可读写数据区域所包含的节，的第一个字节在文件的偏移量为0H</td></tr><tr><td>VirAddr</td><td>本段的第一个字节的虚拟地址</td><td>比如LOAD段的第一个字节的虚拟地址为8048000H</td></tr><tr><td>PhysAddr</td><td>本段的第一个字节的主存地址</td><td>- -</td></tr><tr><td>FileSiz</td><td>本段所包含的节在文件中所占的总大小</td><td>- -</td></tr><tr><td>MemSiz</td><td>本段所包含的节在磁盘所占的总大小</td><td>- -</td></tr><tr><td>Flg</td><td>描述存取权限</td><td>- -</td></tr><tr><td>Align</td><td>本段在存储时的对齐方式</td><td>比如LOAD段存储时的对齐方式为2的12次方</td></tr></tbody></table><p>在绘制可重定位目标的基础上，再根据程序头表中的偏移量52H可以进一步勾勒出该可执行目标文件的格式。</p><center><img src="https://img-blog.csdnimg.cn/20200104212340775.png"></center><h6 id="IV-可重定位目标文件与可执行目标文件的相互关系"><a href="#IV-可重定位目标文件与可执行目标文件的相互关系" class="headerlink" title="IV 可重定位目标文件与可执行目标文件的相互关系"></a>IV 可重定位目标文件与可执行目标文件的相互关系</h6><center><img src="https://img-blog.csdnimg.cn/20200104213841973.png"></center><center><img src="https://img-blog.csdnimg.cn/20200104214320915.png"></center>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统基础 </tag>
            
            <tag> 编译原理 </tag>
            
            <tag> 操作系统教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
